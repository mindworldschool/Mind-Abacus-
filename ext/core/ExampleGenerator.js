// ext/core/ExampleGenerator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª

export class ExampleGenerator {
  constructor(rule) {
    this.rule = rule;
    console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª–æ–º: ${rule.name}`);
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä —Å —É—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤.
   * –î–ª—è 1 —Ä–∞–∑—Ä—è–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ø–æ—à–∞–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É (_generateAttempt).
   * –î–ª—è 2+ —Ä–∞–∑—Ä—è–¥–æ–≤ ‚Äî –Ω–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –≥–¥–µ –∫–∞–∂–¥—ã–π —à–∞–≥ —ç—Ç–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º.
   */
  generate() {
    const digitCount = this.rule.config?.digitCount || 1;
    const combineLevels = this.rule.config?.combineLevels || false;

    // –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ (–ø–æ–¥–Ω–∏–º–µ–º –¥–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö)
    let maxAttempts =
      digitCount === 1 ? 100 : (digitCount <= 3 ? 200 : 250);

    // combineLevels=false –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞ ‚Äî —Å–ª–æ–∂–Ω–µ–µ, –¥–∞—ë–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤
    if (!combineLevels && digitCount > 1) {
      maxAttempts *= 2;
    }

    console.log(
      `üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: digitCount=${digitCount}, combineLevels=${combineLevels}, –ø–æ–ø—ã—Ç–æ–∫=${maxAttempts}`
    );

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        let example;

        if (digitCount === 1) {
          // —Å—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
          example = this._generateAttempt();
        } else {
          // –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª ‚Äî –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —à–∞–≥–∏
          example = this._generateMultiDigitAttemptVectorBased();
        }

        // üîß FIX –±–∞–≥–∞ —Å –ª–∏—à–Ω–∏–º–∏ —à–∞–≥–∞–º–∏:
        // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–æ maxSteps –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        const maxStepsAllowed = this.rule.config?.maxSteps ?? example.steps.length;
        if (example.steps.length > maxStepsAllowed) {
          console.warn(
            `‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª ${example.steps.length} —à–∞–≥–æ–≤ –ø—Ä–∏ –ª–∏–º–∏—Ç–µ ${maxStepsAllowed}, –æ–±—Ä–µ–∑–∞–µ–º`
          );

          const trimmedSteps = example.steps.slice(0, maxStepsAllowed);

          // –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ answer –∏–∑ start, –ø—Ä–∏–º–µ–Ω–∏–≤ —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —à–∞–≥–∏
          let recomputedState = example.start;
          for (const step of trimmedSteps) {
            recomputedState = this.rule.applyAction(recomputedState, step.action);
          }

          example = {
            start: example.start,
            steps: trimmedSteps,
            answer: recomputedState
          };
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if (digitCount > 1 && !combineLevels) {
          if (!this._validateIntermediateStates(example)) {
            console.warn(
              `‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—à–ª–∏ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω`
            );
            continue;
          }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª–æ–º
        if (this.rule.validateExample && !this.rule.validateExample(example)) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–∏–º–µ—Ä –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é`);
          continue;
        }

        console.log(`‚úÖ –ü—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return example;
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      }
    }

    throw new Error(
      `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`
    );
  }

  /**
   * –ù–û–í–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –¥–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (digitCount > 1).
   *
   * –ò–¥–µ—è:
   * - –ú—ã —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–≥–æ –∞–±–∞–∫—É—Å–∞ –∫–∞–∫ –º–∞—Å—Å–∏–≤ [–µ–¥–∏–Ω–∏—Ü—ã, –¥–µ—Å—è—Ç–∫–∏, —Å–æ—Ç–Ω–∏, ...].
   * - –ö–∞–∂–¥—ã–π —à–∞–≥ = –≤–µ–∫—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
   * - –í—Å–µ —Ä–∞–∑—Ä—è–¥—ã –≤ —ç—Ç–æ–º —à–∞–≥–µ –∏–¥—É—Ç —Å –æ–¥–Ω–∏–º –∑–Ω–∞–∫–æ–º (–≤—Å–µ + –∏–ª–∏ –≤—Å–µ -), —á—Ç–æ–±—ã —à–∞–≥ –º–æ–∂–Ω–æ –±—ã–ª–æ "—Å—ã–≥—Ä–∞—Ç—å" –æ–¥–Ω–∏–º –∂–µ—Å—Ç–æ–º.
   * - –ú—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ–º —É—Ö–æ–¥ –Ω–∏–∂–µ 0 –≤ –ª—é–±–æ–º —Ä–∞–∑—Ä—è–¥–µ.
   * - –ú—ã –Ω–µ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –º–µ–∂–¥—É —Ä–∞–∑—Ä—è–¥–∞–º–∏: —Ä–∞–∑—Ä—è–¥ –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å >9.
   * - –û—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º >=0 (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–≤–µ—Ä—Ö—É —É–∂–µ —Å–Ω—è—Ç–æ –≤ UnifiedSimpleRule).
   */
  _generateMultiDigitAttemptVectorBased() {
    const digitCount = this.rule.config?.digitCount || 2;
    const maxSteps = this.rule.generateStepsCount(); // —Ü–µ–ª–µ–≤–∞—è –¥–ª–∏–Ω–∞
    const firstMustBePositive = this.rule.config?.firstActionMustBePositive !== false;

    // —Å—Ç–µ–π—Ç –≤–∏–¥–∞ [0,0,0...] –¥–ª–∏–Ω–æ–π digitCount
    let currentState = this.rule.generateStartState(); // –æ–∂–∏–¥–∞–µ–º [0,...]
    const startState = Array.isArray(currentState)
      ? [...currentState]
      : [currentState];

    const steps = [];

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–≥–∏ –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
    for (let stepIndex = 0; stepIndex < maxSteps; stepIndex++) {
      const isFirstStep = (stepIndex === 0 && steps.length === 0);

      // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ —ç—Ç–æ–≥–æ —à–∞–≥–∞ (+ –∏–ª–∏ -)
      // –ø–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ +
      // –¥–∞–ª—å—à–µ –∑–Ω–∞–∫ –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è)
      let desiredSign;
      if (isFirstStep && firstMustBePositive) {
        desiredSign = +1;
      } else {
        // –ø—Ä–æ–±—É–µ–º –æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–æ —Ä–∞–Ω–¥–æ–º–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        desiredSign = Math.random() < 0.5 ? +1 : -1;
      }

      // —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö "–≤–µ–∫—Ç–æ—Ä–æ–≤ —à–∞–≥–æ–≤" –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
      const candidateVectorsForSign = (sign) =>
        this._buildCandidateVectorsForSign(currentState, sign);

      // –ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∂–µ–ª–∞–µ–º—ã–π –∑–Ω–∞–∫
      let candidateVectors = candidateVectorsForSign(desiredSign);

      // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –∑–Ω–∞–∫
      if (candidateVectors.length === 0 && !isFirstStep) {
        candidateVectors = candidateVectorsForSign(desiredSign * -1);
      }

      // –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—É—Å—Ç–æ ‚Äî –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ü–µ–ø–æ—á–∫—É, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è —Ä–∞–Ω—å—à–µ
      if (candidateVectors.length === 0) {
        break;
      }

      // –≤—ã–±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω–æ –æ–¥–∏–Ω –≤–µ–∫—Ç–æ—Ä
      const chosenVector = candidateVectors[
        Math.floor(Math.random() * candidateVectors.length)
      ];

      // –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ç–æ—Ç –≤–µ–∫—Ç–æ—Ä –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ä–∞–∑—Ä—è–¥–æ–≤
      const newState = this._applyVectorToAllDigits(currentState, chosenVector);

      steps.push({
        action: chosenVector,     // –≤–µ–∫—Ç–æ—Ä [{position, value}, ...]
        fromState: currentState,  // –º–∞—Å—Å–∏–≤ –¥–æ —à–∞–≥–∞
        toState: newState         // –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ —à–∞–≥–∞
      });

      currentState = newState;
    }

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî —ç—Ç–æ answer
    return {
      start: startState,
      steps,
      answer: currentState
    };
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –í–°–ï –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞,
   * –≥–¥–µ –í–°–ï —Ä–∞–∑—Ä—è–¥—ã –∏–¥—É—Ç –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (sign = +1 –∏–ª–∏ sign = -1).
   *
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤–µ–∫—Ç–æ—Ä–æ–≤.
   * –í–µ–∫—Ç–æ—Ä = –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { position, value }, –æ–¥–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞.
   * –ü—Ä–∏–º–µ—Ä –¥–ª—è 2 —Ä–∞–∑—Ä—è–¥–æ–≤: [ {position:1, value:+3}, {position:0, value:+2} ]
   * –≠—Ç–æ –ø–æ—Ç–æ–º —Å—Ç–∞–Ω–µ—Ç —à–∞–≥–æ–º "+32".
   */
  _buildCandidateVectorsForSign(currentState, sign) {
    const digitCount = this.rule.config?.digitCount || 2;

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
    // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö –ø–æ –∑–Ω–∞–∫—É (–≤—Å–µ –ø–ª—é—Å—ã –∏–ª–∏ –≤—Å–µ –º–∏–Ω—É—Å—ã)
    const perDigitOptions = [];

    for (let pos = 0; pos < digitCount; pos++) {
      const localActions = this.rule.getAvailableActions(
        currentState,
        false,       // isFirstAction - –º—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ _generateMultiDigitAttemptVectorBased
        pos
      );

      // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —à–∞–≥–∏ –Ω—É–∂–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ (–≤—Å–µ + –∏–ª–∏ –≤—Å–µ -)
      const filtered = localActions.filter(a => {
        const v = (typeof a === "object") ? a.value : a;
        return (sign > 0 ? v > 0 : v < 0);
      }).map(a => (typeof a === "object" ? a : { position: pos, value: a }));

      // –µ—Å–ª–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ-—Ç–æ —Ä–∞–∑—Ä—è–¥–∞ –Ω–µ—Ç —à–∞–≥–æ–≤ —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞–∫–æ–º ‚Äî —ç—Ç–æ—Ç –∑–Ω–∞–∫ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
      if (filtered.length === 0) {
        return []; // –≤–µ—Å—å –≤–µ–∫—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
      }

      perDigitOptions.push(filtered);
    }

    // –¢–µ–ø–µ—Ä—å –Ω–∞–¥–æ —Å–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥,
    // —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –≤–µ–∫—Ç–æ—Ä "—Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑—Ä—è–¥–æ–≤"
    // –ù–∞–ø—Ä–∏–º–µ—Ä:
    //  –¥–µ—Å—è—Ç–∫–∏: [+3, +1]
    //  –µ–¥–∏–Ω–∏—Ü—ã: [+2, +4]
    // –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏:
    //  [ {+3 –¥–µ—Å—è—Ç–∫–∏}, {+2 –µ–¥–∏–Ω–∏—Ü—ã} ]
    //  [ {+3 –¥–µ—Å—è—Ç–∫–∏}, {+4 –µ–¥–∏–Ω–∏—Ü—ã} ]
    //  [ {+1 –¥–µ—Å—è—Ç–∫–∏}, {+2 –µ–¥–∏–Ω–∏—Ü—ã} ]
    //  [ {+1 –¥–µ—Å—è—Ç–∫–∏}, {+4 –µ–¥–∏–Ω–∏—Ü—ã} ]

    const allCombos = this._cartesian(perDigitOptions);

    // –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã —Å—Ä–∞–∑—É
    // (–Ω–∏ –æ–¥–∏–Ω —Ä–∞–∑—Ä—è–¥ –Ω–µ —É—Ö–æ–¥–∏—Ç <0 –∏–ª–∏ >9 –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è)
    const validCombos = allCombos.filter(vector => {
      const newState = this._applyVectorToAllDigits(currentState, vector);

      // –ó–∞–ø—Ä–µ—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª—é–±–æ–º —Ä–∞–∑—Ä—è–¥–µ
      if (newState.some(d => d < 0)) return false;

      // –ó–∞–ø—Ä–µ—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è >9 –≤ –ª—é–±–æ–º —Ä–∞–∑—Ä—è–¥–µ (–Ω–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å–µ–π—á–∞—Å)
      if (newState.some(d => d > 9)) return false;

      return true;
    });

    return validCombos;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä [{position, value}, ...] –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤.
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
   */
  _applyVectorToAllDigits(stateArray, vector) {
    const result = [...stateArray];
    for (const part of vector) {
      const pos = part.position;
      const val = part.value;
      result[pos] = result[pos] + val;
    }
    return result;
  }

  /**
   * –î–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞,
   * —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ "–ø–æ –æ–¥–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –Ω–∞ —Ä–∞–∑—Ä—è–¥".
   * input: [ [a,b], [c,d] ]
   * output: [ [a,c], [a,d], [b,c], [b,d] ]
   */
  _cartesian(arrays) {
    return arrays.reduce(
      (acc, curr) => {
        const res = [];
        for (const a of acc) {
          for (const b of curr) {
            res.push([...a, b]);
          }
        }
        return res;
      },
      [[]]
    );
  }

  /**
   * –°–¢–ê–†–´–ô –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ digitCount === 1).
   * –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω—ã—Ö —á–∏—Å–µ–ª.
   */
  _generateAttempt() {
    const start = this.rule.generateStartState();
    let stepsCount = this.rule.generateStepsCount();

    const startStr = Array.isArray(start) ? `[${start.join(', ')}]` : start;
    console.log(`üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: —Å—Ç–∞—Ä—Ç=${startStr}, —à–∞–≥–æ–≤=${stepsCount}`);

    const steps = [];
    let currentState = start;
    let has5Action = false;
    let blockInserted = false;

    const requireBlock = this.rule.config?.requireBlock;
    const blockPlacement = this.rule.config?.blockPlacement || "auto";

    // –ë–ª–æ–∫ –≤ –Ω–∞—á–∞–ª–æ
    if (requireBlock && blockPlacement === "start" && this.rule.generateBlock) {
      const block = this.rule.generateBlock(currentState, true);
      if (block) {
        for (const action of block) {
          const newState = this.rule.applyAction(currentState, action);
          steps.push({ action, fromState: currentState, toState: newState });
          currentState = newState;
          if (Math.abs(action) === 5) has5Action = true;
        }
        blockInserted = true;
        stepsCount -= block.length;
      }
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ (–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π —Ä–µ–∂–∏–º)
    for (let i = 0; i < stepsCount; i++) {
      const isFirstAction = (i === 0 && steps.length === 0);
      const isLastAction = (i === stepsCount - 1);

      let availableActions = this.rule.getAvailableActions(
        currentState,
        isFirstAction
      );

      if (availableActions.length === 0) {
        throw new Error(
          `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${currentState}`
        );
      }

      // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—è—Ç—ë—Ä–∫–∏ –ø–æ—Å–ª–µ —á–∞—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–∞
      const hasFive = this.rule.config?.hasFive;
      if (hasFive && !has5Action && i >= Math.floor(stepsCount / 3)) {
        const actions5 = availableActions.filter(a => Math.abs(a) === 5);
        if (actions5.length > 0 && Math.random() < 0.4) {
          availableActions = actions5;
        }
      }

      // –Ω–µ –¥–∞—ë–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ 0 –ø–æ—Å–ª–µ–¥–Ω–∏–º —à–∞–≥–æ–º
      if (isLastAction && typeof currentState === "number" && currentState <= 4) {
        const nonZeroActions = availableActions.filter(action => {
          const result = currentState + action;
          return result !== 0;
        });
        if (nonZeroActions.length > 0) {
          availableActions = nonZeroActions;
        }
      }

      // –≤—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const action =
        availableActions[Math.floor(Math.random() * availableActions.length)];
      const newState = this.rule.applyAction(currentState, action);

      if (Math.abs(action) === 5) {
        has5Action = true;
      }

      steps.push({
        action,
        fromState: currentState,
        toState: newState
      });

      currentState = newState;
    }

    // –ë–ª–æ–∫ –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if (
      requireBlock &&
      !blockInserted &&
      this.rule.generateBlock &&
      this.rule.canInsertBlock
    ) {
      const canInsertPositive = this.rule.canInsertBlock(currentState, true);
      const canInsertNegative = this.rule.canInsertBlock(currentState, false);

      if (!canInsertPositive && !canInsertNegative) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫ ¬±k`);
      }

      const isPositive = canInsertPositive ? true : false;
      const block = this.rule.generateBlock(currentState, isPositive);

      if (!block) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫ ¬±k`);
      }

      for (const action of block) {
        const newState = this.rule.applyAction(currentState, action);
        steps.push({
          action,
          fromState: currentState,
          toState: newState
        });
        currentState = newState;
        if (Math.abs(action) === 5) has5Action = true;
      }

      blockInserted = true;
    }

    // –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ maxFinalState (–Ω–∞–ø—Ä–∏–º–µ—Ä 7 –ø—Ä–∏ "–ü—Ä–æ—Å—Ç–æ 5"), –¥–æ–∂–∏–º–∞–µ–º –Ω–∞–∑–∞–¥
    if (
      this.rule.config?.maxFinalState !== undefined &&
      typeof currentState === "number" &&
      currentState > this.rule.config.maxFinalState
    ) {
      currentState = this._repairToRange(steps, currentState);
    }

    return {
      start: start,
      steps: steps,
      answer: currentState
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏ (combineLevels=false).
   * –î–ª—è –Ω–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–π –ª–æ–≥–∏–∫–∏ –º—ã —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä—è–¥–æ–≤
   * (–Ω–µ <0 –∏ –Ω–µ >9), —Ç–∞–∫ —á—Ç–æ —ç—Ç–æ ‚Äî –∑–∞—â–∏—Ç–Ω—ã–π fallback.
   */
  _validateIntermediateStates(example) {
    const digitCount = this.rule.config?.digitCount || 1;
    if (digitCount === 1) return true;

    // –ú—ã –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    // –ù–æ –º—ã –Ω–µ —Ö–æ—Ç–∏–º —É—Ö–æ–¥–∏—Ç—å –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ —Ö–æ–¥—É —à–∞–≥–∞.
    for (let i = 0; i < example.steps.length; i++) {
      const stateArr = example.steps[i].toState;
      if (Array.isArray(stateArr)) {
        // –Ω–∏–∫–∞–∫–æ–π —Ü–∏—Ñ—Ä—ã <0 –∏ >9
        if (stateArr.some(d => d < 0 || d > 9)) {
          console.warn(
            `‚ùå –®–∞–≥ ${i + 1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ [${stateArr.join(", ")}] —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`
          );
          return false;
        }
      }
    }

    const finalArr = example.answer;
    if (Array.isArray(finalArr)) {
      if (finalArr.some(d => d < 0 || d > 9)) {
        console.warn(
          `‚ùå –§–∏–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—É—é —Ü–∏—Ñ—Ä—É [${finalArr.join(", ")}]`
        );
        return false;
      }
    }

    return true;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω—ã—Ö (–ü—Ä–æ—Å—Ç–æ 4 / –ü—Ä–æ—Å—Ç–æ 5).
   */
  _repairToRange(steps, currentState) {
    const maxFinal = this.rule.config.maxFinalState;
    console.log(`üîß Repair to range: ${currentState} ‚Üí 0..${maxFinal}`);

    let attempts = 0;
    const maxAttempts = 10;

    if (typeof currentState === "number") {
      while (currentState > maxFinal && attempts < maxAttempts) {
        const isUpperActive = currentState >= 5;
        const activeLower = isUpperActive ? currentState - 5 : currentState;

        let action;

        if (isUpperActive && currentState - 5 <= maxFinal && currentState - 5 >= 0) {
          action = -5;
        } else if (activeLower > 0) {
          const needed = Math.min(activeLower, currentState - maxFinal);
          action = -needed;
        } else {
          console.warn(
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${currentState} –¥–æ ${maxFinal}`
          );
          break;
        }

        const newState = this.rule.applyAction(currentState, action);
        steps.push({
          action,
          fromState: currentState,
          toState: newState
        });
        currentState = newState;
        attempts++;

        console.log(
          `  üîß –®–∞–≥ ${attempts}: ${this.rule.formatAction(action)} ‚Üí ${currentState}`
        );
      }
    }

    return currentState;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é).
   */
  formatForDisplay(example) {
    const { start, steps, answer } = example;

    const stepsStr = steps
      .map(step => this.rule.formatAction(step.action))
      .join(" ");

    const startNum = this.rule.stateToNumber(start);
    const answerNum = this.rule.stateToNumber(answer);

    if (startNum === 0) {
      return `${stepsStr} = ${answerNum}`;
    } else {
      return `${startNum} ${stepsStr} = ${answerNum}`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç –¥–ª—è trainer_logic.js
   * –¢–µ–ø–µ—Ä—å:
   *  - –µ—Å–ª–∏ 1 —Ä–∞–∑—Ä—è–¥: –∫–∞–∫ —Ä–∞–Ω—å—à–µ
   *  - –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–æ–≤: –∫–∞–∂–¥—ã–π —à–∞–≥ —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä -> "+32", "-14", "+505", ...
   */
  toTrainerFormat(example) {
    const digitCount = this.rule.config?.digitCount || 1;

    // –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–π —Å–ª—É—á–∞–π
    if (digitCount > 1 && Array.isArray(example.start)) {
      const formattedSteps = [];

      for (const step of example.steps) {
        // step.action ‚Äî —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä [{position,value}, ...]
        // –Ω–∞–º –Ω–∞–¥–æ —Å–∫–ª–µ–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º
        // –∏ –æ–¥–∏–Ω –æ–±—â–∏–π –∑–Ω–∞–∫
        const vector = Array.isArray(step.action)
          ? step.action
          : [step.action];

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        // –ø–æ–∑–∏—Ü–∏—è 0 = –µ–¥–∏–Ω–∏—Ü—ã, 1 = –¥–µ—Å—è—Ç–∫–∏ ... –ù—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ä—à–∏–π —Ä–∞–∑—Ä—è–¥ —Å–ª–µ–≤–∞.
        const byPos = [];
        for (const part of vector) {
          byPos[part.position] = part.value;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞–∫ —à–∞–≥–∞ (–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞)
        const signValue = byPos.find(v => v !== 0) || 0;
        const signStr = signValue >= 0 ? "+" : "-";

        // –ë–µ—Ä—ë–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º –∏ —Å–∫–ª–µ–∏–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ
        // –ø—Ä–∏–º–µ—Ä: –¥–µ—Å—è—Ç–∫–∏ +3, –µ–¥–∏–Ω–∏—Ü—ã +2 => "32"
        // –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–∑—Ä—è–¥ –Ω–µ –º–µ–Ω—è–ª—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ, —Ç–æ —ç—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è 0 –≤ –Ω—ë–º
        const maxPos = byPos.length - 1;
        let magnitudeStr = "";
        for (let p = maxPos; p >= 0; p--) {
          const v = byPos[p] || 0;
          magnitudeStr += Math.abs(v).toString();
        }

        formattedSteps.push(`${signStr}${magnitudeStr}`);
      }

      // –æ—Ç–≤–µ—Ç = —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Å–∏–≤ —Ä–∞–∑—Ä—è–¥–æ–≤ -> —á–∏—Å–ª–æ
      const finalAnswer = this.rule.stateToNumber(example.answer);

      return {
        start: this.rule.stateToNumber(example.start),
        steps: formattedSteps,
        answer: finalAnswer
      };
    }

    // –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π —Å–ª—É—á–∞–π
    return {
      start: this.rule.stateToNumber(example.start),
      steps: example.steps.map(step =>
        this.rule.formatAction(step.action)
      ),
      answer: this.rule.stateToNumber(example.answer)
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (—Ç–µ–ø–µ—Ä—å –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª –¥–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö –Ω–µ –∂–º—ë–º).
   */
  validate(example) {
    if (this.rule.validateExample) {
      return this.rule.validateExample(example);
    }
    return true;
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
   */
  generateMultiple(count) {
    const out = [];
    for (let i = 0; i < count; i++) {
      out.push(this.generate());
    }
    return out;
  }
}

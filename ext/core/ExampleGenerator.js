// ext/core/ExampleGenerator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª

export class ExampleGenerator {
  constructor(rule) {
    this.rule = rule;
    console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª–æ–º: ${rule.name}`);
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä.
   *  - –µ—Å–ª–∏ digitCount === 1 ‚Üí –æ–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω–∞—è –ª–æ–≥–∏–∫–∞ (_generateSingleDigitAttempt)
   *  - –µ—Å–ª–∏ digitCount > 1   ‚Üí –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ (_generateMultiDigitAttemptVectorBased)
   */
  generate() {
    const digitCount = this.rule.config?.digitCount || 1;
    const combineLevels = this.rule.config?.combineLevels || false;

    // –°–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–ª–∏–¥–Ω—É—é —Ü–µ–ø–æ—á–∫—É
    let maxAttempts = digitCount === 1 ? 100 : (digitCount <= 3 ? 200 : 250);

    if (!combineLevels && digitCount > 1) {
      maxAttempts *= 2;
    }

    console.log(
      `üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: digitCount=${digitCount}, combineLevels=${combineLevels}, –ø–æ–ø—ã—Ç–æ–∫=${maxAttempts}`
    );

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        let example;

        if (digitCount === 1) {
          example = this._generateSingleDigitAttempt();
        } else {
          example = this._generateMultiDigitAttemptVectorBased();
        }

        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ü–µ–ø–æ—á–∫—É –¥–ª–∏–Ω–Ω–µ–µ –ª–∏–º–∏—Ç–∞ maxSteps ‚Äî –æ–±—Ä–µ–∂–µ–º –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
        const maxStepsAllowed =
          this.rule.config?.maxSteps ?? example.steps.length;

        if (example.steps.length > maxStepsAllowed) {
          console.warn(
            `‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª ${example.steps.length} —à–∞–≥–æ–≤ –ø—Ä–∏ –ª–∏–º–∏—Ç–µ ${maxStepsAllowed}, –æ–±—Ä–µ–∑–∞–µ–º`
          );

          const trimmedSteps = example.steps.slice(0, maxStepsAllowed);

          // –ü–µ—Ä–µ—Å—á—ë—Ç –æ—Ç–≤–µ—Ç–∞
          let recomputedState = example.start;
          for (const step of trimmedSteps) {
            recomputedState = this.rule.applyAction(
              recomputedState,
              step.action
            );
          }

          example = {
            start: example.start,
            steps: trimmedSteps,
            answer: recomputedState
          };
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –≤—ã–ª–µ–∑–ª–∏ –∑–∞ 0..9 (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–∞–∑—Ä—è–¥–æ–≤)
        if (digitCount > 1 && !combineLevels) {
          if (!this._validateIntermediateStates(example)) {
            console.warn(
              `‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—à–ª–∏ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω`
            );
            continue;
          }
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–æ–¥–∏–∫–æ–π
        if (this.rule.validateExample && !this.rule.validateExample(example)) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–∏–º–µ—Ä –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é`);
          continue;
        }

        console.log(`‚úÖ –ü—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return example;
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      }
    }

    throw new Error(
      `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`
    );
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –û–î–ù–û–ì–û –†–ê–ó–†–Ø–î–ê (—Å–∞–º—ã–π —á–∞—Å—Ç—ã–π –∫–µ–π—Å "–ü—Ä–æ—Å—Ç–æ").
   *
   * –ê–ª–≥–æ—Ä–∏—Ç–º:
   *  1. —Å—Ç–∞—Ä—Ç—É–µ–º —Å 0;
   *  2. –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø—Ä–∞–≤–∏–ª–∞ getAvailableActions(currentState, isFirstStep);
   *  3. –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω–æ –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π;
   *     - –ª—ë–≥–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–æ–ª—å—à–∏—Ö –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —à–∞–≥–∞,
   *       —á—Ç–æ–±—ã —Ü–∏—Ñ—Ä—ã 6-9 —á–∞—â–µ –ø–æ–ø–∞–¥–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã;
   *  4. –ø—Ä–∏–º–µ–Ω—è–µ–º —à–∞–≥;
   *  5. –ø–æ–≤—Ç–æ—Ä—è–µ–º.
   *
   * –ù–∏–∫–∞–∫–∏—Ö –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö "–∑–∞–ø—Ä–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —à–∞–≥–∞ –ø–æ–¥—Ä—è–¥".
   * –ù–∏–∫–∞–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ "–ø–æ—á–∏–Ω–∏—Ç—å" —Ñ–∏–Ω–∞–ª ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç validateExample.
   */
  _generateSingleDigitAttempt() {
    // —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ–±—ã—á–Ω–æ 0)
    const start = this.rule.generateStartState();
    let stepsCount = this.rule.generateStepsCount();

    // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º —à–∞–≥–æ–≤
    const minSteps = this.rule.config?.minSteps ?? 2;
    if (stepsCount < minSteps) stepsCount = minSteps;

    const steps = [];
    let currentState = start;

    for (let i = 0; i < stepsCount; i++) {
      const isFirstAction = i === 0 && steps.length === 0;

      // –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–π—á–∞—Å
      let availableActions = this.rule.getAvailableActions(
        currentState,
        isFirstAction
      );

      if (!availableActions || availableActions.length === 0) {
        // –º—ã —É–ø—ë—Ä–ª–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å—Ç–æ—è–ª–∏ –Ω–∞ 4, –∞ –≤—Å–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø–ª—é—Å—ã)
        // –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ä–∞–Ω—å—à–µ
        break;
      }

      // bias: —Ö–æ—Ç–∏–º –Ω–µ–º–Ω–æ–≥–æ —á–∞—â–µ –≤—ã–±–∏—Ä–∞—Ç—å –±–æ–ª—å—à–∏–µ —Ü–∏—Ñ—Ä—ã,
      // —á—Ç–æ–±—ã 6,7,8,9 —Ä–µ–∞–ª—å–Ω–æ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å.
      // —Å–¥–µ–ª–∞–µ–º –∏–∑ availableActions "–º–µ—à–æ–∫" —Å –≤–µ—Å–∞–º–∏ –ø–æ |delta|.
      const weighted = [];
      for (const act of availableActions) {
        const w = 1 + Math.abs(act) * 0.3; // —á—É—Ç—å –±–æ–ª—å—à–µ –≤–µ—Å —É –±–æ–ª—å—à–∏—Ö
        for (let k = 0; k < w; k++) {
          weighted.push(act);
        }
      }

      const action =
        weighted[Math.floor(Math.random() * weighted.length)];

      // –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      const newState = this.rule.applyAction(currentState, action);

      steps.push({
        action,
        fromState: currentState,
        toState: newState
      });

      currentState = newState;
    }

    return {
      start,
      steps,
      answer: currentState
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ú–ù–û–ì–û–†–ê–ó–†–Ø–î–ù–û–ì–û –ø—Ä–∏–º–µ—Ä–∞ (digitCount > 1).
   * –ö–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä {position,value} –¥–ª—è –ö–ê–ñ–î–û–ì–û —Ä–∞–∑—Ä—è–¥–∞,
   * –ø—Ä–∏—á—ë–º –∑–Ω–∞–∫ —É –≤—Å–µ—Ö —Ä–∞–∑—Ä—è–¥–æ–≤ –Ω–∞ —à–∞–≥–µ –æ–±—â–∏–π (+ –∏–ª–∏ -).
   * –ü–µ—Ä–≤—ã–π —à–∞–≥ –æ–±—è–∑–∞–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.
   */
  _generateMultiDigitAttemptVectorBased() {
    const digitCount = this.rule.config?.digitCount || 2;
    const maxSteps = this.rule.generateStepsCount();
    const firstMustBePositive =
      this.rule.config?.firstActionMustBePositive !== false;

    // –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: [0,0,...]
    let currentState = this.rule.generateStartState();
    const startState = Array.isArray(currentState)
      ? [...currentState]
      : [currentState];

    const steps = [];

    for (let stepIndex = 0; stepIndex < maxSteps; stepIndex++) {
      const isFirstStep = stepIndex === 0 && steps.length === 0;

      // –∫–∞–∫–æ–π –∑–Ω–∞–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω?
      const candidateSigns =
        isFirstStep && firstMustBePositive ? [+1] : [+1, -1];

      let chosenVector = null;

      // –ø—Ä–æ–±—É–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –æ–±—â–∏–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
      for (const sign of candidateSigns) {
        const vectors = this._buildCandidateVectorsForSign(
          currentState,
          sign,
          isFirstStep
        );

        if (vectors.length === 0) {
          continue;
        }

        // –≤—ã–±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
        chosenVector =
          vectors[Math.floor(Math.random() * vectors.length)];
        break;
      }

      // –µ—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞—à–ª–∏ —Ö–æ–¥ ‚Äî –≤—ã—Ö–æ–¥–∏–º
      if (!chosenVector) {
        break;
      }

      // –ø—Ä–∏–º–µ–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä —Å—Ä–∞–∑—É –∫–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º
      const newState = this._applyVectorToAllDigits(
        currentState,
        chosenVector
      );

      steps.push({
        action: chosenVector, // [{position,value},...]
        fromState: currentState,
        toState: newState
      });

      currentState = newState;
    }

    return {
      start: startState,
      steps,
      answer: currentState
    };
  }

  /**
   * –°—Ç—Ä–æ–∏–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ —à–∞–≥–∞ (+ –∏–ª–∏ -)
   * —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥ –ø–æ–ª—É—á–∏–ª –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–≥,
   * –∏ —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —à–∞–≥–∞ –Ω–µ –±—ã–ª–æ –≤—ã—Ö–æ–¥–∞ –∑–∞ 0..9.
   */
  _buildCandidateVectorsForSign(currentState, sign, isFirstStep) {
    const digitCount = this.rule.config?.digitCount || 2;

    const perDigitOptions = [];

    for (let pos = 0; pos < digitCount; pos++) {
      const localActions = this.rule.getAvailableActions(
        currentState,
        isFirstStep,
        pos
      );

      // –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∑–Ω–∞–∫—É
      const filtered = localActions.filter(a => {
        const v = typeof a === "object" ? a.value : a;
        return sign > 0 ? v > 0 : v < 0;
      });

      if (filtered.length === 0) {
        // –æ–¥–∏–Ω –∏–∑ —Ä–∞–∑—Ä—è–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è —Å —Ç–∞–∫–∏–º –∑–Ω–∞–∫–æ–º -> –≤–µ–∫—Ç–æ—Ä –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
        return [];
      }

      // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É {position,value}
      const normalized = filtered.map(a =>
        typeof a === "object" ? a : { position: pos, value: a }
      );

      perDigitOptions.push(normalized);
    }

    // –¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑—Ä—è–¥–æ–≤
    const allCombos = this._cartesian(perDigitOptions);

    // —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±–∏–≤–∞—é—Ç —Ö–æ—Ç—å –æ–¥–∏–Ω —Ä–∞–∑—Ä—è–¥ –∑–∞ 0..9
    const validCombos = allCombos.filter(vector => {
      const newState = this._applyVectorToAllDigits(
        currentState,
        vector
      );
      if (newState.some(d => d < 0)) return false;
      if (newState.some(d => d > 9)) return false;
      return true;
    });

    return validCombos;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä [{position,value}, ...] –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤.
   */
  _applyVectorToAllDigits(stateArray, vector) {
    const result = [...stateArray];
    for (const part of vector) {
      const pos = part.position;
      const val = part.value;
      result[pos] = result[pos] + val;
    }
    return result;
  }

  /**
   * –î–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞.
   */
  _cartesian(arrays) {
    return arrays.reduce(
      (acc, curr) => {
        const res = [];
        for (const a of acc) {
          for (const b of curr) {
            res.push([...a, b]);
          }
        }
        return res;
      },
      [[]]
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ:
   * –Ω–µ–ª—å–∑—è —É—Ö–æ–¥–∏—Ç—å <0 –∏–ª–∏ >9 –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–∞–∑—Ä—è–¥–µ.
   */
  _validateIntermediateStates(example) {
    const digitCount = this.rule.config?.digitCount || 1;
    if (digitCount === 1) return true;

    for (let i = 0; i < example.steps.length; i++) {
      const stateArr = example.steps[i].toState;
      if (Array.isArray(stateArr)) {
        if (stateArr.some(d => d < 0 || d > 9)) {
          console.warn(
            `‚ùå –®–∞–≥ ${i + 1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ [${stateArr.join(
              ", "
            )}] —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`
          );
          return false;
        }
      }
    }

    const finalArr = example.answer;
    if (Array.isArray(finalArr)) {
      if (finalArr.some(d => d < 0 || d > 9)) {
        console.warn(
          `‚ùå –§–∏–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—É—é —Ü–∏—Ñ—Ä—É [${finalArr.join(
            ", "
          )}]`
        );
        return false;
      }
    }

    return true;
  }

  /**
   * –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.
   */
  formatForDisplay(example) {
    const { start, steps, answer } = example;

    const stepsStr = steps
      .map(step => this.rule.formatAction(step.action))
      .join(" ");

    const startNum = this.rule.stateToNumber(start);
    const answerNum = this.rule.stateToNumber(answer);

    if (startNum === 0) {
      return `${stepsStr} = ${answerNum}`;
    } else {
      return `${startNum} ${stepsStr} = ${answerNum}`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç –¥–ª—è trainer_logic.js:
   *  - steps => –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ "+3", "-7", "+5"
   *  - answer => –∫–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ
   *
   * –í –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –º—ã —Å–∫–ª–µ–∏–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ "+32".
   */
  toTrainerFormat(example) {
    const digitCount = this.rule.config?.digitCount || 1;

    // –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–π –∫–µ–π—Å
    if (digitCount > 1 && Array.isArray(example.start)) {
      const formattedSteps = [];

      for (const step of example.steps) {
        const vector = Array.isArray(step.action)
          ? step.action
          : [step.action];

        // —Å–æ–±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        const byPos = [];
        for (const part of vector) {
          byPos[part.position] = part.value;
        }

        // –∑–Ω–∞–∫ —à–∞–≥–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –µ–¥–∏–Ω—ã–π –∑–Ω–∞–∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —à–∞–≥–∞)
        const signValue = byPos.find(v => v !== 0) || 0;
        const signStr = signValue >= 0 ? "+" : "-";

        // –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç —Å—Ç–∞—Ä—à–µ–≥–æ –∫ –º–ª–∞–¥—à–µ–º—É
        const maxPos = byPos.length - 1;
        let magnitudeStr = "";
        for (let p = maxPos; p >= 0; p--) {
          const v = byPos[p] || 0;
          magnitudeStr += Math.abs(v).toString();
        }

        formattedSteps.push(`${signStr}${magnitudeStr}`);
      }

      const finalAnswer = this.rule.stateToNumber(example.answer);

      return {
        start: this.rule.stateToNumber(example.start),
        steps: formattedSteps,
        answer: finalAnswer
      };
    }

    // –æ–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–π –∫–µ–π—Å
    return {
      start: this.rule.stateToNumber(example.start),
      steps: example.steps.map(step =>
        this.rule.formatAction(step.action)
      ),
      answer: this.rule.stateToNumber(example.answer)
    };
  }

  /**
   * –î–µ–ª–µ–≥–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é.
   */
  validate(example) {
    if (this.rule.validateExample) {
      return this.rule.validateExample(example);
    }
    return true;
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥.
   */
  generateMultiple(count) {
    const out = [];
    for (let i = 0; i < count; i++) {
      out.push(this.generate());
    }
    return out;
  }
}

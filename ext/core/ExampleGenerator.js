// ext/core/ExampleGenerator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª

export class ExampleGenerator {
  constructor(rule) {
    this.rule = rule;
    console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª–æ–º: ${rule.name}`);
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä —Å —É—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤.
   * –î–ª—è 1 —Ä–∞–∑—Ä—è–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É (_generateAttempt).
   * –î–ª—è 2+ —Ä–∞–∑—Ä—è–¥–æ–≤ ‚Äî –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –≥–¥–µ –∫–∞–∂–¥—ã–π —à–∞–≥ —ç—Ç–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º.
   */
  generate() {
    const digitCount = this.rule.config?.digitCount || 1;
    const combineLevels = this.rule.config?.combineLevels || false;

    // –ö–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    let maxAttempts = digitCount === 1 ? 100 : (digitCount <= 3 ? 200 : 250);

    // –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–æ–≤ –∏ –±–µ–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–ø–∞—Å
    if (!combineLevels && digitCount > 1) {
      maxAttempts *= 2;
    }

    console.log(
      `üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: digitCount=${digitCount}, combineLevels=${combineLevels}, –ø–æ–ø—ã—Ç–æ–∫=${maxAttempts}`
    );

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        let example;

        if (digitCount === 1) {
          // –û–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å +N / -N)
          example = this._generateAttempt();
        } else {
          // –ú–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä (–∫–∞–∂–¥—ã–π —à–∞–≥ ‚Äî –æ–±—â–∏–π –∂–µ—Å—Ç –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º)
          example = this._generateMultiDigitAttemptVectorBased();
        }

        // üîß FIX –±–∞–≥–∞ —Å –ª–∏—à–Ω–∏–º–∏ —à–∞–≥–∞–º–∏:
        // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–æ maxSteps –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        const maxStepsAllowed = this.rule.config?.maxSteps ?? example.steps.length;
        if (example.steps.length > maxStepsAllowed) {
          console.warn(
            `‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª ${example.steps.length} —à–∞–≥–æ–≤ –ø—Ä–∏ –ª–∏–º–∏—Ç–µ ${maxStepsAllowed}, –æ–±—Ä–µ–∑–∞–µ–º`
          );

          const trimmedSteps = example.steps.slice(0, maxStepsAllowed);

          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
          let recomputedState = example.start;
          for (const step of trimmedSteps) {
            recomputedState = this.rule.applyAction(recomputedState, step.action);
          }

          example = {
            start: example.start,
            steps: trimmedSteps,
            answer: recomputedState
          };
        }

        // –õ—ë–≥–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if (digitCount > 1 && !combineLevels) {
          if (!this._validateIntermediateStates(example)) {
            console.warn(
              `‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—à–ª–∏ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω`
            );
            continue;
          }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–æ–º
        if (this.rule.validateExample && !this.rule.validateExample(example)) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–∏–º–µ—Ä –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é`);
          continue;
        }

        console.log(`‚úÖ –ü—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return example;
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      }
    }

    throw new Error(
      `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`
    );
  }

  /**
   * –ù–û–í–´–ô –ì–ï–ù–ï–†–ê–¢–û–† –¥–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (digitCount > 1).
   *
   * –õ–æ–≥–∏–∫–∞ (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –º–µ—Ç–æ–¥–∏–∫–æ–π):
   * - –°–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –º–∞—Å—Å–∏–≤ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º: [–µ–¥–∏–Ω–∏—Ü—ã, –¥–µ—Å—è—Ç–∫–∏, —Å–æ—Ç–Ω–∏, ...] (–≤ —Ç–≤–æ–µ–π —Å–∏—Å—Ç–µ–º–µ).
   * - –ö–∞–∂–¥—ã–π —à–∞–≥ = –æ–¥–∏–Ω –æ–±—â–∏–π –∂–µ—Å—Ç –ø–æ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑—Ä—è–¥–∞–º.
   *   –¢–æ –µ—Å—Ç—å —É –¥–µ—Å—è—Ç–∫–æ–≤ —Å–≤–æ—ë +N –∏–ª–∏ -N, —É –µ–¥–∏–Ω–∏—Ü —Å–≤–æ—ë +M –∏–ª–∏ -M,
   *   –Ω–æ –∑–Ω–∞–∫ —à–∞–≥–∞ –î–û–õ–ñ–ï–ù –±—ã—Ç—å –æ–±—â–∏–π (–≤—Å—ë –ø–ª—é—Å –∏–ª–∏ –≤—Å—ë –º–∏–Ω—É—Å –≤ —ç—Ç–æ—Ç —Ç–∞–∫—Ç).
   * - –≠—Ç–∏ –¥–µ–ª—å—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä—è–¥—É –º—ã –±–æ–ª—å—à–µ –ù–ï —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é,
   *   –º—ã –±–µ—Ä—ë–º –∏—Ö –∏–∑ rule.getAvailableActions(...) ‚Äî –∏ —Ç–∞–º —É–∂–µ —Å–∏–¥–∏—Ç —Ñ–∏–∑–∏–∫–∞ –∞–±–∞–∫—É—Å–∞.
   * - –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞ –Ω–∏–∫–∞–∫–æ–π —Ä–∞–∑—Ä—è–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –∑–∞ 0..9
   *   (–Ω–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤).
   * - –ü–µ—Ä–≤—ã–π —à–∞–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.
   */
  _generateMultiDigitAttemptVectorBased() {
    const digitCount = this.rule.config?.digitCount || 2;
    const maxSteps = this.rule.generateStepsCount();
    const firstMustBePositive = this.rule.config?.firstActionMustBePositive !== false;

    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏–ø–∞ [0,0,...]
    let currentState = this.rule.generateStartState();
    const startState = Array.isArray(currentState)
      ? [...currentState]
      : [currentState];

    const steps = [];

    for (let stepIndex = 0; stepIndex < maxSteps; stepIndex++) {
      const isFirstStep = (stepIndex === 0 && steps.length === 0);

      // 1. –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ.
      //    - –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º ‚Üí —Ç–æ–ª—å–∫–æ '+'
      //    - –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è '+' –∏–ª–∏ '-'
      const candidateSigns = isFirstStep && firstMustBePositive
        ? [+1]
        : [+1, -1];

      let chosenVector = null;

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —à–∞–≥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
      for (const sign of candidateSigns) {
        const vectors = this._buildCandidateVectorsForSign(
          currentState,
          sign,
          isFirstStep
        );

        if (vectors.length === 0) {
          continue;
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–µ–∫—Ç–æ—Ä —Å—Ä–µ–¥–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö
        chosenVector = vectors[Math.floor(Math.random() * vectors.length)];
        break;
      }

      // –ù–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±—â–µ–≥–æ —à–∞–≥–∞ ‚Äî –Ω–∞ —ç—Ç–æ–º –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
      if (!chosenVector) {
        break;
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–≥ –∫–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º
      const newState = this._applyVectorToAllDigits(currentState, chosenVector);

      steps.push({
        action: chosenVector,     // –≤–µ–∫—Ç–æ—Ä [{position, value}, ...]
        fromState: currentState,  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —à–∞–≥–∞
        toState: newState         // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —à–∞–≥–∞
      });

      currentState = newState;
    }

    return {
      start: startState,
      steps,
      answer: currentState
    };
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –í–°–ï –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—â–µ–≥–æ —à–∞–≥–∞,
   * –≥–¥–µ –í–°–ï —Ä–∞–∑—Ä—è–¥—ã –¥–≤–∏–≥–∞—é—Ç—Å—è —Å –æ–¥–Ω–∏–º –∑–Ω–∞–∫–æ–º (–ª–∏–±–æ –≤—Å–µ +, –ª–∏–±–æ –≤—Å–µ -).
   *
   * –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç:
   * - –ú—ã –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–ª—å—Ç—ã —Å–∞–º–∏.
   * - –ú—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ–º rule.getAvailableActions(...) –¥–ª—è –ö–ê–ñ–î–û–ì–û —Ä–∞–∑—Ä—è–¥–∞.
   *   –ü–æ—Å–ª–µ –Ω–∞—à–∏—Ö –ø—Ä–∞–≤–æ–∫ –≤ UnifiedSimpleRule.getAvailableActions():
   *   - –≤ –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { position, value },
   *     –≥–¥–µ value —É–∂–µ –≥–æ—Ç–æ–≤–∞—è –¥–µ–ª—å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä +7, -3), –≤–∞–ª–∏–¥–Ω–∞—è –æ–¥–Ω–∏–º –∂–µ—Å—Ç–æ–º.
   * - –ú—ã —Ñ–∏–ª—å—Ç—Ä—É–µ–º —ç—Ç–∏ –¥–µ–ª—å—Ç—ã –ø–æ –∑–Ω–∞–∫—É (–≤—Å–µ –ø–ª—é—Å—ã –∏–ª–∏ –≤—Å–µ –º–∏–Ω—É—Å—ã).
   * - –ü–æ—Ç–æ–º –±–µ—Ä—ë–º –¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
   *   "–∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä—è–¥—É –ø–æ –æ–¥–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é".
   * - –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–∑—Ä—è–¥ <0 –∏–ª–∏ >9.
   *
   * @param {number[]} currentState —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤
   * @param {number} sign +1 –∏–ª–∏ -1 (–≤—Å–µ –ø–ª—é—Å—ã –∏–ª–∏ –≤—Å–µ –º–∏–Ω—É—Å—ã)
   * @param {boolean} isFirstStep –Ω—É–∂–Ω–æ –ª–∏ –∑–∞—Å—Ç–∞–≤–ª—è—Ç—å —à–∞–≥ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –≤ –∫–∞–∂–¥–æ–º —Ä–∞–∑—Ä—è–¥–µ
   * @returns {Array<Array<{position:number,value:number}>>>}
   */
  _buildCandidateVectorsForSign(currentState, sign, isFirstStep) {
    const digitCount = this.rule.config?.digitCount || 2;

    // –®–∞–≥ 1. –°–æ–±–∏—Ä–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä—è–¥—É —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    // –ü–æ—Å–ª–µ –Ω–∞—à–µ–π –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ getAvailableActions –≤ –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
    // –æ–Ω–∞ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [{ position, value }, ...]
    const perDigitOptions = [];

    for (let pos = 0; pos < digitCount; pos++) {
      // –ó–¥–µ—Å—å –í–ê–ñ–ù–û: –º—ã –ø–µ—Ä–µ–¥–∞—ë–º isFirstAction —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º —à–∞–≥–µ,
      // —á—Ç–æ–±—ã getAvailableActions –ø—Ä–∏–º–µ–Ω–∏–ª–∞ –ø—Ä–∞–≤–∏–ª–æ "–ø–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∏–Ω—É—Å–æ–º"
      const localActions = this.rule.getAvailableActions(
        currentState,
        isFirstStep,
        pos
      );

      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω–æ–º—É –∑–Ω–∞–∫—É
      // sign = +1 -> –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ value > 0
      // sign = -1 -> –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ value < 0
      const filtered = localActions.filter(a => {
        const v = (typeof a === "object") ? a.value : a;
        return sign > 0 ? v > 0 : v < 0;
      });

      // –ï—Å–ª–∏ –≤ –∫–∞–∫–æ–º-—Ç–æ —Ä–∞–∑—Ä—è–¥–µ –Ω–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ö–æ–¥–∞ —Å —ç—Ç–∏–º –∑–Ω–∞–∫–æ–º,
      // —Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–±—â–∏–π —à–∞–≥ —Å —ç—Ç–∏–º –∑–Ω–∞–∫–æ–º –≤–æ–æ–±—â–µ.
      if (filtered.length === 0) {
        return [];
      }

      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –∫–∞–∫ {position,value}
      const normalized = filtered.map(a => {
        if (typeof a === "object") {
          return a;
        } else {
          return { position: pos, value: a };
        }
      });

      perDigitOptions.push(normalized);
    }

    // –®–∞–≥ 2. –î–µ–∫–∞—Ä—Ç–æ–≤–æ –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ–º –º–∞—Å—Å–∏–≤—ã,
    // —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ "–ø–æ –æ–¥–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥"
    const allCombos = this._cartesian(perDigitOptions);

    // –®–∞–≥ 3. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ñ–∏–∑–∏–∫–µ:
    // - –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞–∑—Ä—è–¥–æ–≤ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0..9]
    // - –Ω–∏–∫–∞–∫–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    const validCombos = allCombos.filter(vector => {
      const newState = this._applyVectorToAllDigits(currentState, vector);

      // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä—è–¥—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º: 0..9
      if (newState.some(d => d < 0)) return false;
      if (newState.some(d => d > 9)) return false;

      return true;
    });

    return validCombos;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä [{position, value}, ...] –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤.
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
   */
  _applyVectorToAllDigits(stateArray, vector) {
    const result = [...stateArray];
    for (const part of vector) {
      const pos = part.position;
      const val = part.value;
      result[pos] = result[pos] + val;
    }
    return result;
  }

  /**
   * –î–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞,
   * —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ "–ø–æ –æ–¥–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –Ω–∞ —Ä–∞–∑—Ä—è–¥".
   * input: [ [a,b], [c,d] ]
   * output: [ [a,c], [a,d], [b,c], [b,d] ]
   */
  _cartesian(arrays) {
    return arrays.reduce(
      (acc, curr) => {
        const res = [];
        for (const a of acc) {
          for (const b of curr) {
            res.push([...a, b]);
          }
        }
        return res;
      },
      [[]]
    );
  }

  /**
   * –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–õ–Ø –û–î–ù–û–ì–û –†–ê–ó–†–Ø–î–ê (digitCount === 1).
   * –ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π —à–∞–≥ ‚Äî –æ–¥–Ω–∞ –¥–µ–ª—å—Ç–∞ (+N –∏–ª–∏ -N) –∏–∑ getAvailableActions().
   * –ü–æ—Å–ª–µ —Ç–≤–æ–µ–π –ø—Ä–∞–≤–∫–∏ UnifiedSimpleRule.getAvailableActions()
   * —ç—Ç–∏ —à–∞–≥–∏ —É–∂–µ —É—á–∏—Ç—ã–≤–∞—é—Ç —Ñ–∏–∑–∏–∫—É –∞–±–∞–∫—É—Å–∞ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã (–≤–∫–ª—é—á–∞—è 6,7,8,9).
   */
  _generateAttempt() {
    const start = this.rule.generateStartState();
    let stepsCount = this.rule.generateStepsCount();

    const startStr = Array.isArray(start) ? `[${start.join(", ")}]` : start;
    console.log(`üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: —Å—Ç–∞—Ä—Ç=${startStr}, —à–∞–≥–æ–≤=${stepsCount}`);

    const steps = [];
    let currentState = start;
    let has5Action = false;
    let blockInserted = false;

    const requireBlock = this.rule.config?.requireBlock;
    const blockPlacement = this.rule.config?.blockPlacement || "auto";

    // –ë–ª–æ–∫ –≤ –Ω–∞—á–∞–ª–æ (–µ—Å–ª–∏ —Ä–µ–∂–∏–º —Ç—Ä–µ–±—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω)
    if (requireBlock && blockPlacement === "start" && this.rule.generateBlock) {
      const block = this.rule.generateBlock(currentState, true);
      if (block) {
        for (const action of block) {
          const newState = this.rule.applyAction(currentState, action);
          steps.push({ action, fromState: currentState, toState: newState });
          currentState = newState;
          if (Math.abs(action) === 5) has5Action = true;
        }
        blockInserted = true;
        stepsCount -= block.length;
      }
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –æ–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    for (let i = 0; i < stepsCount; i++) {
      const isFirstAction = (i === 0 && steps.length === 0);
      const isLastAction = (i === stepsCount - 1);

      let availableActions = this.rule.getAvailableActions(
        currentState,
        isFirstAction
      );

      if (!availableActions || availableActions.length === 0) {
        throw new Error(
          `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${currentState}`
        );
      }

      // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—è—Ç—ë—Ä–∫–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—Ä–∏–º–µ—Ä–∞
      const hasFive = this.rule.config?.hasFive;
      if (hasFive && !has5Action && i >= Math.floor(stepsCount / 3)) {
        const actions5 = availableActions.filter(a => Math.abs(a) === 5);
        if (actions5.length > 0 && Math.random() < 0.4) {
          availableActions = actions5;
        }
      }

      // –ù–µ –¥–∞—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —à–∞–≥–æ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ç–æ—á—å-–≤-—Ç–æ—á—å –≤ 0,
      // –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—â—ë –º–∞–ª–µ–Ω—å–∫–æ–µ (–º–µ—Ç–æ–¥–∏–∫–∞ —É–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ)
      if (isLastAction && typeof currentState === "number" && currentState <= 4) {
        const nonZeroActions = availableActions.filter(action => {
          const result = currentState + action;
          return result !== 0;
        });
        if (nonZeroActions.length > 0) {
          availableActions = nonZeroActions;
        }
      }

      // –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å–ª—É—á–∞–π–Ω–æ
      const action =
        availableActions[Math.floor(Math.random() * availableActions.length)];

      const newState = this.rule.applyAction(currentState, action);

      if (Math.abs(action) === 5) {
        has5Action = true;
      }

      steps.push({
        action,
        fromState: currentState,
        toState: newState
      });

      currentState = newState;
    }

    // –ë–ª–æ–∫ –≤ –∫–æ–Ω–µ—Ü (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ / –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞)
    if (
      requireBlock &&
      !blockInserted &&
      this.rule.generateBlock &&
      this.rule.canInsertBlock
    ) {
      const canInsertPositive = this.rule.canInsertBlock(currentState, true);
      const canInsertNegative = this.rule.canInsertBlock(currentState, false);

      if (!canInsertPositive && !canInsertNegative) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫ ¬±k`);
      }

      const isPositive = canInsertPositive ? true : false;
      const block = this.rule.generateBlock(currentState, isPositive);

      if (!block) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫ ¬±k`);
      }

      for (const action of block) {
        const newState = this.rule.applyAction(currentState, action);
        steps.push({
          action,
          fromState: currentState,
          toState: newState
        });
        currentState = newState;
        if (Math.abs(action) === 5) has5Action = true;
      }

      blockInserted = true;
    }

    // –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª —É—à—ë–ª –≤—ã—à–µ maxFinalState (–Ω–∞–ø—Ä–∏–º–µ—Ä 7 –ø—Ä–∏ "–ü—Ä–æ—Å—Ç–æ 5"),
    // –ø—ã—Ç–∞–µ–º—Å—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å –±—É—Å–∏–Ω—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ—Ä–∏–¥–æ—Ä
    if (
      this.rule.config?.maxFinalState !== undefined &&
      typeof currentState === "number" &&
      currentState > this.rule.config.maxFinalState
    ) {
      currentState = this._repairToRange(steps, currentState);
    }

    return {
      start: start,
      steps: steps,
      answer: currentState
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.
   * –ú—ã –∑–∞–ø—Ä–µ—â–∞–µ–º –ª—é–±—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≥–¥–µ –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–∑—Ä—è–¥ <0 –∏–ª–∏ >9.
   */
  _validateIntermediateStates(example) {
    const digitCount = this.rule.config?.digitCount || 1;
    if (digitCount === 1) return true;

    for (let i = 0; i < example.steps.length; i++) {
      const stateArr = example.steps[i].toState;
      if (Array.isArray(stateArr)) {
        if (stateArr.some(d => d < 0 || d > 9)) {
          console.warn(
            `‚ùå –®–∞–≥ ${i + 1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ [${stateArr.join(", ")}] —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`
          );
          return false;
        }
      }
    }

    const finalArr = example.answer;
    if (Array.isArray(finalArr)) {
      if (finalArr.some(d => d < 0 || d > 9)) {
        console.warn(
          `‚ùå –§–∏–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—É—é —Ü–∏—Ñ—Ä—É [${finalArr.join(", ")}]`
        );
        return false;
      }
    }

    return true;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω—ã—Ö (–ü—Ä–æ—Å—Ç–æ 4 / –ü—Ä–æ—Å—Ç–æ 5).
   * –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª > –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ—Å–∞–¥–∏—Ç—å –±—É—Å–∏–Ω—ã –Ω–∞–∑–∞–¥.
   */
  _repairToRange(steps, currentState) {
    const maxFinal = this.rule.config.maxFinalState;
    console.log(`üîß Repair to range: ${currentState} ‚Üí 0..${maxFinal}`);

    let attempts = 0;
    const maxAttempts = 10;

    if (typeof currentState === "number") {
      while (currentState > maxFinal && attempts < maxAttempts) {
        const isUpperActive = currentState >= 5;
        const activeLower = isUpperActive ? currentState - 5 : currentState;

        let action;

        if (isUpperActive && currentState - 5 <= maxFinal && currentState - 5 >= 0) {
          action = -5;
        } else if (activeLower > 0) {
          const needed = Math.min(activeLower, currentState - maxFinal);
          action = -needed;
        } else {
          console.warn(
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${currentState} –¥–æ ${maxFinal}`
          );
          break;
        }

        const newState = this.rule.applyAction(currentState, action);
        steps.push({
          action,
          fromState: currentState,
          toState: newState
        });
        currentState = newState;
        attempts++;

        console.log(
          `  üîß –®–∞–≥ ${attempts}: ${this.rule.formatAction(action)} ‚Üí ${currentState}`
        );
      }
    }

    return currentState;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—á–∏—Å—Ç–æ –¥–ª—è –ª–æ–≥–æ–≤).
   */
  formatForDisplay(example) {
    const { start, steps, answer } = example;

    const stepsStr = steps
      .map(step => this.rule.formatAction(step.action))
      .join(" ");

    const startNum = this.rule.stateToNumber(start);
    const answerNum = this.rule.stateToNumber(answer);

    if (startNum === 0) {
      return `${stepsStr} = ${answerNum}`;
    } else {
      return `${startNum} ${stepsStr} = ${answerNum}`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç –¥–ª—è trainer_logic.js
   *
   * - –µ—Å–ª–∏ 1 —Ä–∞–∑—Ä—è–¥:
   *      steps: ["+3", "-2", "+7", ...]
   *
   * - –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–æ–≤:
   *      –∫–∞–∂–¥—ã–π —à–∞–≥ —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä {pos,value} –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º,
   *      –∏ –º—ã —Å–∫–ª–µ–∏–≤–∞–µ–º –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç "+32", "-17", "+805", ...
   *      –≥–¥–µ —Å–ª–µ–≤–∞ —Å—Ç–∞—Ä—à–∏–π —Ä–∞–∑—Ä—è–¥, —Å–ø—Ä–∞–≤–∞ –º–ª–∞–¥—à–∏–π.
   */
  toTrainerFormat(example) {
    const digitCount = this.rule.config?.digitCount || 1;

    // –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–π —Å–ª—É—á–∞–π
    if (digitCount > 1 && Array.isArray(example.start)) {
      const formattedSteps = [];

      for (const step of example.steps) {
        // step.action ‚Äî —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä [{position,value}, ...]
        const vector = Array.isArray(step.action)
          ? step.action
          : [step.action];

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        // position: 0 = –µ–¥–∏–Ω–∏—Ü—ã, 1 = –¥–µ—Å—è—Ç–∫–∏, ...
        const byPos = [];
        for (const part of vector) {
          byPos[part.position] = part.value;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ —à–∞–≥–∞ (–º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤–µ—Å—å —à–∞–≥ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞)
        const signValue = byPos.find(v => v !== 0) || 0;
        const signStr = signValue >= 0 ? "+" : "-";

        // –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É —Ä–∞–∑—Ä—è–¥–æ–≤ –æ—Ç —Å—Ç–∞—Ä—à–µ–≥–æ –∫ –º–ª–∞–¥—à–µ–º—É
        const maxPos = byPos.length - 1;
        let magnitudeStr = "";
        for (let p = maxPos; p >= 0; p--) {
          const v = byPos[p] || 0;
          magnitudeStr += Math.abs(v).toString();
        }

        formattedSteps.push(`${signStr}${magnitudeStr}`);
      }

      // –æ—Ç–≤–µ—Ç (—á–∏—Å–ª–æ) ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤
      const finalAnswer = this.rule.stateToNumber(example.answer);

      return {
        start: this.rule.stateToNumber(example.start),
        steps: formattedSteps,
        answer: finalAnswer
      };
    }

    // –æ–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–π —Å–ª—É—á–∞–π
    return {
      start: this.rule.stateToNumber(example.start),
      steps: example.steps.map(step =>
        this.rule.formatAction(step.action)
      ),
      answer: this.rule.stateToNumber(example.answer)
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  validate(example) {
    if (this.rule.validateExample) {
      return this.rule.validateExample(example);
    }
    return true;
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥
   */
  generateMultiple(count) {
    const out = [];
    for (let i = 0; i < count; i++) {
      out.push(this.generate());
    }
    return out;
  }
}

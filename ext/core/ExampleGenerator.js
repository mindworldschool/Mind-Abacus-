// ext/core/ExampleGenerator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª

export class ExampleGenerator {
  constructor(rule) {
    this.rule = rule;
    console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª–æ–º: ${rule.name}`);
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä —Å —É—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤.
   * –î–ª—è 1 —Ä–∞–∑—Ä—è–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É (_generateAttempt).
   * –î–ª—è 2+ —Ä–∞–∑—Ä—è–¥–æ–≤ ‚Äî –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –≥–¥–µ –∫–∞–∂–¥—ã–π —à–∞–≥ —ç—Ç–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º.
   */
  generate() {
    const digitCount = this.rule.config?.digitCount || 1;
    const combineLevels = this.rule.config?.combineLevels || false;

    // –ö–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    let maxAttempts = digitCount === 1 ? 100 : (digitCount <= 3 ? 200 : 250);

    // –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–æ–≤ –∏ –±–µ–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–ø–∞—Å
    if (!combineLevels && digitCount > 1) {
      maxAttempts *= 2;
    }

    console.log(
      `üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: digitCount=${digitCount}, combineLevels=${combineLevels}, –ø–æ–ø—ã—Ç–æ–∫=${maxAttempts}`
    );

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        let example;

        if (digitCount === 1) {
          // –û–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å +N / -N)
          example = this._generateAttempt();
        } else {
          // –ú–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä (–∫–∞–∂–¥—ã–π —à–∞–≥ ‚Äî –æ–±—â–∏–π –∂–µ—Å—Ç –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º)
          example = this._generateMultiDigitAttemptVectorBased();
        }

        // üîß –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–æ maxSteps –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω–∞–¥–æ
        const maxStepsAllowed = this.rule.config?.maxSteps ?? example.steps.length;
        if (example.steps.length > maxStepsAllowed) {
          console.warn(
            `‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª ${example.steps.length} —à–∞–≥–æ–≤ –ø—Ä–∏ –ª–∏–º–∏—Ç–µ ${maxStepsAllowed}, –æ–±—Ä–µ–∑–∞–µ–º`
          );

          const trimmedSteps = example.steps.slice(0, maxStepsAllowed);

          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
          let recomputedState = example.start;
          for (const step of trimmedSteps) {
            recomputedState = this.rule.applyAction(recomputedState, step.action);
          }

          example = {
            start: example.start,
            steps: trimmedSteps,
            answer: recomputedState
          };
        }

        // –õ—ë–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if (digitCount > 1 && !combineLevels) {
          if (!this._validateIntermediateStates(example)) {
            console.warn(
              `‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—à–ª–∏ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω`
            );
            continue;
          }
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–æ–º
        if (this.rule.validateExample && !this.rule.validateExample(example)) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–∏–º–µ—Ä –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é`);
          continue;
        }

        console.log(`‚úÖ –ü—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return example;
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      }
    }

    throw new Error(
      `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`
    );
  }

  /**
   * –ì–ï–ù–ï–†–ê–¢–û–† –¥–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (digitCount > 1).
   *
   * –õ–æ–≥–∏–∫–∞:
   * - —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –º–∞—Å—Å–∏–≤ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º: [–µ–¥–∏–Ω–∏—Ü—ã, –¥–µ—Å—è—Ç–∫–∏, ...];
   * - –æ–¥–∏–Ω —à–∞–≥ = –æ–±—â–∏–π –∂–µ—Å—Ç: –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥ –¥–≤–∏–≥–∞–µ—Ç—Å—è —Å–≤–æ–∏–º +N/-N,
   *   –Ω–æ –∑–Ω–∞–∫ —à–∞–≥–∞ –æ–±—â–∏–π (–≤—Å–µ –ø–ª—é—Å –∏–ª–∏ –≤—Å–µ –º–∏–Ω—É—Å –≤ —ç—Ç–æ–º —Ç–∞–∫—Ç–µ);
   * - getAvailableActions(...) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞ —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–µ–ª—å—Ç—ã;
   * - –ø–µ—Ä–≤—ã–π –æ–±—â–∏–π —à–∞–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º;
   * - –Ω–∏–∫–∞–∫–æ–π –ø–µ—Ä–µ–Ω–æ—Å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã 0..9.
   */
  _generateMultiDigitAttemptVectorBased() {
    const digitCount = this.rule.config?.digitCount || 2;
    const maxSteps = this.rule.generateStepsCount();
    const firstMustBePositive = this.rule.config?.firstActionMustBePositive !== false;

    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏–ø–∞ [0,0,...]
    let currentState = this.rule.generateStartState();
    const startState = Array.isArray(currentState)
      ? [...currentState]
      : [currentState];

    const steps = [];

    for (let stepIndex = 0; stepIndex < maxSteps; stepIndex++) {
      const isFirstStep = (stepIndex === 0 && steps.length === 0);

      // 1. –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ.
      //    - –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º ‚Üí —Ç–æ–ª—å–∫–æ '+'
      //    - –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è '+' –∏–ª–∏ '-'
      const candidateSigns = isFirstStep && firstMustBePositive
        ? [+1]
        : [+1, -1];

      let chosenVector = null;

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —à–∞–≥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
      for (const sign of candidateSigns) {
        const vectors = this._buildCandidateVectorsForSign(
          currentState,
          sign,
          isFirstStep
        );

        if (vectors.length === 0) {
          continue;
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–µ–∫—Ç–æ—Ä —Å—Ä–µ–¥–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö
        chosenVector = vectors[Math.floor(Math.random() * vectors.length)];
        break;
      }

      // –ù–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±—â–µ–≥–æ —à–∞–≥–∞ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
      if (!chosenVector) {
        break;
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–≥ –∫–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º
      const newState = this._applyVectorToAllDigits(currentState, chosenVector);

      steps.push({
        action: chosenVector,     // –≤–µ–∫—Ç–æ—Ä [{position, value}, ...]
        fromState: currentState,  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —à–∞–≥–∞
        toState: newState         // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —à–∞–≥–∞
      });

      currentState = newState;
    }

    return {
      start: startState,
      steps,
      answer: currentState
    };
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –í–°–ï –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—â–µ–≥–æ —à–∞–≥–∞,
   * –≥–¥–µ –í–°–ï —Ä–∞–∑—Ä—è–¥—ã –¥–≤–∏–≥–∞—é—Ç—Å—è —Å –æ–¥–Ω–∏–º –∑–Ω–∞–∫–æ–º (–ª–∏–±–æ –≤—Å–µ +, –ª–∏–±–æ –≤—Å–µ -).
   *
   * - getAvailableActions(...) –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä—è–¥—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫
   *   –≤–æ–∑–º–æ–∂–Ω—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è –≠–¢–û–ì–û —Ä–∞–∑—Ä—è–¥–∞.
   * - —Ñ–∏–ª—å—Ç—Ä—É–µ–º —à–∞–≥–∏ –ø–æ –∑–Ω–∞–∫—É.
   * - —Å–æ–±–∏—Ä–∞–µ–º –¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.
   * - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–º–∞—é—Ç –¥–∏–∞–ø–∞–∑–æ–Ω (–∫–∞–∫–æ–π-—Ç–æ —Ä–∞–∑—Ä—è–¥ <0 –∏–ª–∏ >9).
   */
  _buildCandidateVectorsForSign(currentState, sign, isFirstStep) {
    const digitCount = this.rule.config?.digitCount || 2;

    // 1. –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä—è–¥—É
    const perDigitOptions = [];

    for (let pos = 0; pos < digitCount; pos++) {
      const localActions = this.rule.getAvailableActions(
        currentState,
        isFirstStep,
        pos
      );

      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω–æ–º—É –∑–Ω–∞–∫—É:
      // sign = +1 -> value > 0
      // sign = -1 -> value < 0
      const filtered = localActions.filter(a => {
        const v = (typeof a === "object") ? a.value : a;
        return sign > 0 ? v > 0 : v < 0;
      });

      // –ï—Å–ª–∏ –≤ –∫–∞–∫–æ–º-—Ç–æ —Ä–∞–∑—Ä—è–¥–µ –Ω–µ—Ç —Ö–æ–¥–∞ —Å —ç—Ç–∏–º –∑–Ω–∞–∫–æ–º ‚Äî –∑–Ω–∞—á–∏—Ç –æ–±—â–∏–π —à–∞–≥ —Å —ç—Ç–∏–º –∑–Ω–∞–∫–æ–º –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
      if (filtered.length === 0) {
        return [];
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É { position, value }
      const normalized = filtered.map(a => {
        if (typeof a === "object") {
          return a;
        } else {
          return { position: pos, value: a };
        }
      });

      perDigitOptions.push(normalized);
    }

    // 2. –î–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: –±–µ—Ä—ë–º –ø–æ –æ–¥–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥
    const allCombos = this._cartesian(perDigitOptions);

    // 3. –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–æ–¥—è—Ç —Ö–æ—Ç—å –æ–¥–∏–Ω —Ä–∞–∑—Ä—è–¥ –∑–∞ 0..9
    const validCombos = allCombos.filter(vector => {
      const newState = this._applyVectorToAllDigits(currentState, vector);
      if (newState.some(d => d < 0)) return false;
      if (newState.some(d => d > 9)) return false;
      return true;
    });

    return validCombos;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä [{position, value}, ...] –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤.
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
   */
  _applyVectorToAllDigits(stateArray, vector) {
    const result = [...stateArray];
    for (const part of vector) {
      const pos = part.position;
      const val = part.value;
      result[pos] = result[pos] + val;
    }
    return result;
  }

  /**
   * –î–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞,
   * —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ "–ø–æ –æ–¥–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –Ω–∞ —Ä–∞–∑—Ä—è–¥".
   * input: [ [a,b], [c,d] ]
   * output: [ [a,c], [a,d], [b,c], [b,d] ]
   */
  _cartesian(arrays) {
    return arrays.reduce(
      (acc, curr) => {
        const res = [];
        for (const a of acc) {
          for (const b of curr) {
            res.push([...a, b]);
          }
        }
        return res;
      },
      [[]]
    );
  }

  /**
   * –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–õ–Ø –û–î–ù–û–ì–û –†–ê–ó–†–Ø–î–ê (digitCount === 1) –≤ —Ä–µ–∂–∏–º–µ "–ü—Ä–æ—Å—Ç–æ".
   *
   * –õ–æ–≥–∏–∫–∞:
   * - —Å—Ç–∞—Ä—Ç—É–µ–º –∏–∑ 0;
   * - –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π;
   * - –¥–∞–ª—å—à–µ –º–æ–∂–Ω–æ –∏ –ø–ª—é—Å, –∏ –º–∏–Ω—É—Å;
   * - –∫–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ ¬±d, –≥–¥–µ d ‚àà selectedDigits –ø—Ä–∞–≤–∏–ª–∞;
   * - —à–∞–≥ –¥–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ 0..9;
   * - –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö "–±–ª–æ–∫–æ–≤ —á–µ—Ä–µ–∑ 5", –±–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—è—Ç—ë—Ä–∫–∏,
   *   –±–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞ —Ö–≤–æ—Å—Ç–∞.
   */
  _generateAttempt() {
    // 1. —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è "–ü—Ä–æ—Å—Ç–æ" —ç—Ç–æ 0)
    const start = this.rule.generateStartState
      ? this.rule.generateStartState()
      : 0;

    // 2. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    let stepsCount = this.rule.generateStepsCount
      ? this.rule.generateStepsCount()
      : (this.rule.config?.maxSteps ?? 4);

    const minSteps = this.rule.config?.minSteps ?? 2;
    if (stepsCount < minSteps) stepsCount = minSteps;

    const steps = [];
    let currentState = start;

    for (let i = 0; i < stepsCount; i++) {
      const isFirstAction = (i === 0 && steps.length === 0);

      // —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–æ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–∞—Ö —Å–µ–π—á–∞—Å
      let availableActions = this.rule.getAvailableActions(
        currentState,
        isFirstAction
      );

      // —Ç—É–ø–∏–∫ ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —á—É—Ç—å –∫–æ—Ä–æ—á–µ
      if (!availableActions || availableActions.length === 0) {
        break;
      }

      // —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
      const action =
        availableActions[Math.floor(Math.random() * availableActions.length)];

      // –ø—Ä–∏–º–µ–Ω—è–µ–º
      const newState = this.rule.applyAction(currentState, action);

      // –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–≥
      steps.push({
        action,
        fromState: currentState,
        toState: newState
      });

      // –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
      currentState = newState;
    }

    // –≥–æ—Ç–æ–≤–∏–º –ø—Ä–∏–º–µ—Ä
    return {
      start: start,
      steps: steps,
      answer: currentState
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.
   * –ú—ã –∑–∞–ø—Ä–µ—â–∞–µ–º –ª—é–±—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≥–¥–µ –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–∑—Ä—è–¥ <0 –∏–ª–∏ >9.
   */
  _validateIntermediateStates(example) {
    const digitCount = this.rule.config?.digitCount || 1;
    if (digitCount === 1) return true;

    for (let i = 0; i < example.steps.length; i++) {
      const stateArr = example.steps[i].toState;
      if (Array.isArray(stateArr)) {
        if (stateArr.some(d => d < 0 || d > 9)) {
          console.warn(
            `‚ùå –®–∞–≥ ${i + 1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ [${stateArr.join(", ")}] —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`
          );
          return false;
        }
      }
    }

    const finalArr = example.answer;
    if (Array.isArray(finalArr)) {
      if (finalArr.some(d => d < 0 || d > 9)) {
        console.warn(
          `‚ùå –§–∏–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—É—é —Ü–∏—Ñ—Ä—É [${finalArr.join(", ")}]`
        );
        return false;
      }
    }

    return true;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—á–∏—Å—Ç–æ –¥–ª—è –ª–æ–≥–æ–≤).
   */
  formatForDisplay(example) {
    const { start, steps, answer } = example;

    const stepsStr = steps
      .map(step => this.rule.formatAction(step.action))
      .join(" ");

    const startNum = this.rule.stateToNumber(start);
    const answerNum = this.rule.stateToNumber(answer);

    if (startNum === 0) {
      return `${stepsStr} = ${answerNum}`;
    } else {
      return `${startNum} ${stepsStr} = ${answerNum}`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç –¥–ª—è trainer_logic.js
   *
   * - –µ—Å–ª–∏ 1 —Ä–∞–∑—Ä—è–¥:
   *      steps: ["+3", "-2", "+7", ...]
   *
   * - –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–æ–≤:
   *      –∫–∞–∂–¥—ã–π —à–∞–≥ —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä {pos,value} –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º,
   *      –∏ –º—ã —Å–∫–ª–µ–∏–≤–∞–µ–º –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç "+32", "-17", "+805", ...
   *      –≥–¥–µ —Å–ª–µ–≤–∞ —Å—Ç–∞—Ä—à–∏–π —Ä–∞–∑—Ä—è–¥, —Å–ø—Ä–∞–≤–∞ –º–ª–∞–¥—à–∏–π.
   */
  toTrainerFormat(example) {
    const digitCount = this.rule.config?.digitCount || 1;

    // –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–π —Å–ª—É—á–∞–π
    if (digitCount > 1 && Array.isArray(example.start)) {
      const formattedSteps = [];

      for (const step of example.steps) {
        // step.action ‚Äî —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä [{position,value}, ...]
        const vector = Array.isArray(step.action)
          ? step.action
          : [step.action];

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        // position: 0 = –µ–¥–∏–Ω–∏—Ü—ã, 1 = –¥–µ—Å—è—Ç–∫–∏, ...
        const byPos = [];
        for (const part of vector) {
          byPos[part.position] = part.value;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ —à–∞–≥–∞
        const signValue = byPos.find(v => v !== 0) || 0;
        const signStr = signValue >= 0 ? "+" : "-";

        // –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É —Ä–∞–∑—Ä—è–¥–æ–≤ –æ—Ç —Å—Ç–∞—Ä—à–µ–≥–æ –∫ –º–ª–∞–¥—à–µ–º—É
        const maxPos = byPos.length - 1;
        let magnitudeStr = "";
        for (let p = maxPos; p >= 0; p--) {
          const v = byPos[p] || 0;
          magnitudeStr += Math.abs(v).toString();
        }

        formattedSteps.push(`${signStr}${magnitudeStr}`);
      }

      const finalAnswer = this.rule.stateToNumber(example.answer);

      return {
        start: this.rule.stateToNumber(example.start),
        steps: formattedSteps,
        answer: finalAnswer
      };
    }

    // –æ–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–π —Å–ª—É—á–∞–π
    return {
      start: this.rule.stateToNumber(example.start),
      steps: example.steps.map(step =>
        this.rule.formatAction(step.action)
      ),
      answer: this.rule.stateToNumber(example.answer)
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  validate(example) {
    if (this.rule.validateExample) {
      return this.rule.validateExample(example);
    }
    return true;
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥
   */
  generateMultiple(count) {
    const out = [];
    for (let i = 0; i < count; i++) {
      out.push(this.generate());
    }
    return out;
  }
}

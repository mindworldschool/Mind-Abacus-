// ext/core/ExampleGenerator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª

export class ExampleGenerator {
  constructor(rule) {
    this.rule = rule;
    console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª–æ–º: ${rule.name}`);
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä —Å —É—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤.
   * –î–ª—è 1 —Ä–∞–∑—Ä—è–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É (_generateSingleDigitAttempt).
   * –î–ª—è 2+ —Ä–∞–∑—Ä—è–¥–æ–≤ ‚Äî –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (_generateMultiDigitAttemptVectorBased),
   * –≥–¥–µ –∫–∞–∂–¥—ã–π —à–∞–≥ ‚Äî –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º.
   */
  generate() {
    const digitCount = this.rule.config?.digitCount || 1;
    const combineLevels = this.rule.config?.combineLevels || false;

    // –ö–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    let maxAttempts = digitCount === 1 ? 100 : (digitCount <= 3 ? 200 : 250);

    // –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–æ–≤ –∏ –±–µ–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–ø–∞—Å
    if (!combineLevels && digitCount > 1) {
      maxAttempts *= 2;
    }

    console.log(
      `üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: digitCount=${digitCount}, combineLevels=${combineLevels}, –ø–æ–ø—ã—Ç–æ–∫=${maxAttempts}`
    );

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        let example;

        if (digitCount === 1) {
          // –û–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å +N / -N)
          example = this._generateSingleDigitAttempt();
        } else {
          // –ú–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä (–∫–∞–∂–¥—ã–π —à–∞–≥ ‚Äî –æ–±—â–∏–π –∂–µ—Å—Ç –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º)
          example = this._generateMultiDigitAttemptVectorBased();
        }

        // üîß –ï—Å–ª–∏ –ø—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–∏–ª—Å—è –¥–ª–∏–Ω–Ω–µ–µ –º–∞–∫—Å–∏–º—É–º–∞ ‚Äî
        // –æ–±—Ä–µ–∂–µ–º –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
        const maxStepsAllowed =
          this.rule.config?.maxSteps ?? example.steps.length;
        if (example.steps.length > maxStepsAllowed) {
          console.warn(
            `‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª ${example.steps.length} —à–∞–≥–æ–≤ –ø—Ä–∏ –ª–∏–º–∏—Ç–µ ${maxStepsAllowed}, –æ–±—Ä–µ–∑–∞–µ–º`
          );

          const trimmedSteps = example.steps.slice(0, maxStepsAllowed);

          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏
          let recomputedState = example.start;
          for (const step of trimmedSteps) {
            recomputedState = this.rule.applyAction(
              recomputedState,
              step.action
            );
          }

          example = {
            start: example.start,
            steps: trimmedSteps,
            answer: recomputedState
          };
        }

        // –î–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (digitCount > 1 –∏ combineLevels === false)
        // –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        if (digitCount > 1 && !combineLevels) {
          if (!this._validateIntermediateStates(example)) {
            console.warn(
              `‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—à–ª–∏ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω`
            );
            continue;
          }
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª–æ–º
        if (this.rule.validateExample && !this.rule.validateExample(example)) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–∏–º–µ—Ä –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é`);
          continue;
        }

        console.log(`‚úÖ –ü—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return example;
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      }
    }

    throw new Error(
      `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`
    );
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞ (digitCount === 1) –≤ —Ä–µ–∂–∏–º–µ "–ü—Ä–æ—Å—Ç–æ".
   *
   * –õ–æ–≥–∏–∫–∞:
   * - —Å—Ç–∞—Ä—Ç—É–µ–º —Å 0;
   * - –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π;
   * - –¥–∞–ª—å—à–µ –º–æ–∂–Ω–æ –∏ –ø–ª—é—Å, –∏ –º–∏–Ω—É—Å;
   * - –∫–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ ¬±d, –≥–¥–µ d ‚àà selectedDigits –∏–∑ UnifiedSimpleRule;
   * - —à–∞–≥ —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
   *   (0..4 –µ—Å–ª–∏ –≤–µ—Ä—Ö–Ω—è—è –±—É—Å–∏–Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –∏–ª–∏ 0..9 –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞);
   * - –º—ã –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã ("—á–µ—Ä–µ–∑ 5"), –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ–º –≤–≤–æ–¥–∏—Ç—å 5,
   *   –Ω–µ —á–∏–Ω–∏–º —Ö–≤–æ—Å—Ç.
   */
  _generateSingleDigitAttempt() {
    // —Å—Ç–∞—Ä—Ç—É–µ–º –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ (–æ–±—ã—á–Ω–æ 0)
    const start = this.rule.generateStartState();
    let stepsCount = this.rule.generateStepsCount();

    // —É–≤–∞–∂–∞–µ–º minSteps
    const minSteps = this.rule.config?.minSteps ?? 2;
    if (stepsCount < minSteps) stepsCount = minSteps;

    const steps = [];
    let currentState = start;

    for (let i = 0; i < stepsCount; i++) {
      const isFirstAction = i === 0 && steps.length === 0;

      // —Å–ø—Ä–æ—Å–∏—Ç—å —É –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–≥–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const availableActions = this.rule.getAvailableActions(
        currentState,
        isFirstAction
      );

      // –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ—Ç ‚Äî –æ–±—Ä—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —á—É—Ç—å —Ä–∞–Ω—å—à–µ
      if (!availableActions || availableActions.length === 0) {
        break;
      }

      // —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–≥
      const action =
        availableActions[
          Math.floor(Math.random() * availableActions.length)
        ];

      // –ø—Ä–∏–º–µ–Ω—è–µ–º
      const newState = this.rule.applyAction(currentState, action);

      // –∑–∞–ø–∏—Å–∞—Ç—å —à–∞–≥
      steps.push({
        action,
        fromState: currentState,
        toState: newState
      });

      // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —à–∞–≥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–º
      currentState = newState;
    }

    return {
      start,
      steps,
      answer: currentState
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (digitCount > 1).
   *
   * –õ–æ–≥–∏–∫–∞:
   * - —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –º–∞—Å—Å–∏–≤ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º: [–µ–¥–∏–Ω–∏—Ü—ã, –¥–µ—Å—è—Ç–∫–∏, —Å–æ—Ç–Ω–∏, ...];
   * - –∫–∞–∂–¥—ã–π —à–∞–≥ = –û–î–ò–ù –æ–±—â–∏–π –∂–µ—Å—Ç –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º;
   *   —Ç–æ –µ—Å—Ç—å –º—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–≤–∏–≥–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥,
   *   –Ω–æ —É –≤—Å–µ—Ö —Ä–∞–∑—Ä—è–¥–æ–≤ –∑–Ω–∞–∫ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ –æ–¥–∏–Ω (+ –∏–ª–∏ -);
   * - –ø–µ—Ä–≤—ã–π –æ–±—â–∏–π —à–∞–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∏–Ω—É—Å–æ–º;
   * - –Ω–∏–∫–∞–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –º–µ–∂–¥—É —Ä–∞–∑—Ä—è–¥–∞–º–∏
   *   (–Ω–∏ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å <0 –∏–ª–∏ >maxState).
   */
  _generateMultiDigitAttemptVectorBased() {
    const digitCount = this.rule.config?.digitCount || 2;
    const maxSteps = this.rule.generateStepsCount();
    const firstMustBePositive =
      this.rule.config?.firstActionMustBePositive !== false;

    // –Ω–∞—á–∏–Ω–∞–µ–º —Å –º–∞—Å—Å–∏–≤–∞ –Ω—É–ª–µ–π [0,0,...]
    let currentState = this.rule.generateStartState();
    const startState = Array.isArray(currentState)
      ? [...currentState]
      : [currentState];

    const steps = [];

    for (let stepIndex = 0; stepIndex < maxSteps; stepIndex++) {
      const isFirstStep = stepIndex === 0 && steps.length === 0;

      // –∫–∞–∫–æ–π –∑–Ω–∞–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ?
      const candidateSigns =
        isFirstStep && firstMustBePositive ? [+1] : [+1, -1];

      let chosenVector = null;

      // –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –æ–±—â–∏–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
      for (const sign of candidateSigns) {
        const vectors = this._buildCandidateVectorsForSign(
          currentState,
          sign,
          isFirstStep
        );

        if (vectors.length === 0) {
          continue;
        }

        // –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
        chosenVector = vectors[Math.floor(Math.random() * vectors.length)];
        break;
      }

      // –µ—Å–ª–∏ –º—ã –Ω–µ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π –æ–±—â–∏–π —à–∞–≥ ‚Äì –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
      if (!chosenVector) {
        break;
      }

      // –ø—Ä–∏–º–µ–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä —Å—Ä–∞–∑—É –∫–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º
      const newState = this._applyVectorToAllDigits(currentState, chosenVector);

      steps.push({
        action: chosenVector, // –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {position,value}
        fromState: currentState,
        toState: newState
      });

      currentState = newState;
    }

    return {
      start: startState,
      steps,
      answer: currentState
    };
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –í–°–ï –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—â–µ–≥–æ —à–∞–≥–∞
   * —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–Ω–∞–∫–æ–º (–≤—Å–µ –ø–ª—é—Å –∏–ª–∏ –≤—Å–µ –º–∏–Ω—É—Å).
   *
   * –ê–ª–≥–æ—Ä–∏—Ç–º:
   *  - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º rule.getAvailableActions(...)
   *    ‚Üí —Ç–∞–º —É–∂–µ —É—á—Ç–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ñ–∏–∑–∏–∫–∏ –∏ –º–µ—Ç–æ–¥–∏–∫–∏:
   *      - –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ (0..4 –∏–ª–∏ 0..9),
   *      - –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Å –º–∏–Ω—É—Å–∞,
   *      - onlyAddition / onlySubtraction,
   *      - –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã.
   *  - —Ñ–∏–ª—å—Ç—Ä—É–µ–º —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–Ω–∞–∫—É;
   *  - –±–µ—Ä—ë–º –¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ,
   *    —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ "–∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä—è–¥—É ‚Äî —Å–≤–æ–π —Å–¥–≤–∏–≥";
   *  - –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±–∏–≤–∞—é—Ç —Ö–æ—Ç—å –æ–¥–∏–Ω —Ä–∞–∑—Ä—è–¥ –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
   */
  _buildCandidateVectorsForSign(currentState, sign, isFirstStep) {
    const digitCount = this.rule.config?.digitCount || 2;
    const maxAllowed = this.rule.config?.maxState ?? 9;

    // –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä—è–¥—É
    const perDigitOptions = [];

    for (let pos = 0; pos < digitCount; pos++) {
      const localActions = this.rule.getAvailableActions(
        currentState,
        isFirstStep,
        pos
      );

      // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∑–Ω–∞–∫—É:
      // sign = +1 ‚Üí –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ value > 0
      // sign = -1 ‚Üí –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ value < 0
      const filtered = localActions.filter(a => {
        const v = typeof a === "object" ? a.value : a;
        return sign > 0 ? v > 0 : v < 0;
      });

      // –µ—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –¥–µ–ª—å—Ç—ã —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞–∫–æ–º ‚Üí –≤–µ—Å—å –≤–µ–∫—Ç–æ—Ä –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
      if (filtered.length === 0) {
        return [];
      }

      // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É { position, value }
      const normalized = filtered.map(a => {
        if (typeof a === "object") {
          return a;
        } else {
          return { position: pos, value: a };
        }
      });

      perDigitOptions.push(normalized);
    }

    // –¥–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: –±–µ—Ä—ë–º –ø–æ –æ–¥–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥
    const allCombos = this._cartesian(perDigitOptions);

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–∫–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–µ –≤—ã–±–∏–≤–∞–µ—Ç –Ω–∏ –æ–¥–∏–Ω —Ä–∞–∑—Ä—è–¥ –∑–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã
    const validCombos = allCombos.filter(vector => {
      const newState = this._applyVectorToAllDigits(currentState, vector);
      if (newState.some(d => d < 0)) return false;
      if (newState.some(d => d > maxAllowed)) return false;
      return true;
    });

    return validCombos;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä [{position, value}, ...] –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑—Ä—è–¥–æ–≤.
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–º–∞—Å—Å–∏–≤).
   */
  _applyVectorToAllDigits(stateArray, vector) {
    const result = [...stateArray];
    for (const part of vector) {
      const pos = part.position;
      const val = part.value;
      result[pos] = result[pos] + val;
    }
    return result;
  }

  /**
   * –î–µ–∫–∞—Ä—Ç–æ–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞,
   * —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ "–ø–æ –æ–¥–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥".
   * –ü—Ä–∏–º–µ—Ä:
   *   –≤—Ö–æ–¥: [ [a,b], [c,d] ]
   *   –≤—ã—Ö–æ–¥: [ [a,c], [a,d], [b,c], [b,d] ]
   */
  _cartesian(arrays) {
    return arrays.reduce(
      (acc, curr) => {
        const res = [];
        for (const a of acc) {
          for (const b of curr) {
            res.push([...a, b]);
          }
        }
        return res;
      },
      [[]]
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.
   * –ú—ã –∑–∞–ø—Ä–µ—â–∞–µ–º –ª—é–±—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≥–¥–µ –∫–∞–∫–æ–π-—Ç–æ —Ä–∞–∑—Ä—è–¥ <0
   * –∏–ª–∏ > –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ (4 –∏–ª–∏ 9).
   */
  _validateIntermediateStates(example) {
    const digitCount = this.rule.config?.digitCount || 1;
    if (digitCount === 1) return true;

    const maxAllowed = this.rule.config?.maxState ?? 9;

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for (let i = 0; i < example.steps.length; i++) {
      const stateArr = example.steps[i].toState;
      if (Array.isArray(stateArr)) {
        if (stateArr.some(d => d < 0 || d > maxAllowed)) {
          console.warn(
            `‚ùå –®–∞–≥ ${i + 1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ [${stateArr.join(
              ", "
            )}] —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`
          );
          return false;
        }
      }
    }

    // –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const finalArr = example.answer;
    if (Array.isArray(finalArr)) {
      if (finalArr.some(d => d < 0 || d > maxAllowed)) {
        console.warn(
          `‚ùå –§–∏–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—É—é —Ü–∏—Ñ—Ä—É [${finalArr.join(", ")}]`
        );
        return false;
      }
    }

    return true;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ / –ª–æ–≥–æ–≤.
   * –ü—Ä–∏–º–µ—Ä: "+3 +1 -4 = 0"
   */
  formatForDisplay(example) {
    const { start, steps, answer } = example;

    const stepsStr = steps
      .map(step => this.rule.formatAction(step.action))
      .join(" ");

    const startNum = this.rule.stateToNumber(start);
    const answerNum = this.rule.stateToNumber(answer);

    if (startNum === 0) {
      return `${stepsStr} = ${answerNum}`;
    } else {
      return `${startNum} ${stepsStr} = ${answerNum}`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç –¥–ª—è trainer_logic.js / UI.
   *
   * - –µ—Å–ª–∏ 1 —Ä–∞–∑—Ä—è–¥:
   *      steps: ["+3", "+1", "-4", ...]
   *      answer: 0
   *
   * - –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–æ–≤:
   *      –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —É –Ω–∞—Å –µ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä [{position,value}, ...],
   *      –º—ã –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É –≤—Ä–æ–¥–µ "+32" –∏–ª–∏ "-805"
   *      (–∑–Ω–∞–∫ –æ–±—â–∏–π, –¥–∞–ª—å—à–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º –æ—Ç —Å—Ç–∞—Ä—à–µ–≥–æ –∫ –º–ª–∞–¥—à–µ–º—É).
   */
  toTrainerFormat(example) {
    const digitCount = this.rule.config?.digitCount || 1;

    // –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–π —Å–ª—É—á–∞–π
    if (digitCount > 1 && Array.isArray(example.start)) {
      const formattedSteps = [];

      for (const step of example.steps) {
        // step.action ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ [{position,value}, ...]
        const vector = Array.isArray(step.action)
          ? step.action
          : [step.action];

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        // position: 0 = –µ–¥–∏–Ω–∏—Ü—ã, 1 = –¥–µ—Å—è—Ç–∫–∏, ...
        const byPos = [];
        for (const part of vector) {
          byPos[part.position] = part.value;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π –∑–Ω–∞–∫ —à–∞–≥–∞
        const signValue = byPos.find(v => v !== 0) || 0;
        const signStr = signValue >= 0 ? "+" : "-";

        // –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç —Å—Ç–∞—Ä—à–µ–≥–æ –∫ –º–ª–∞–¥—à–µ–º—É
        const maxPos = byPos.length - 1;
        let magnitudeStr = "";
        for (let p = maxPos; p >= 0; p--) {
          const v = byPos[p] || 0;
          magnitudeStr += Math.abs(v).toString();
        }

        formattedSteps.push(`${signStr}${magnitudeStr}`);
      }

      const finalAnswer = this.rule.stateToNumber(example.answer);

      return {
        start: this.rule.stateToNumber(example.start),
        steps: formattedSteps,
        answer: finalAnswer
      };
    }

    // –æ–¥–Ω–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–π —Å–ª—É—á–∞–π
    return {
      start: this.rule.stateToNumber(example.start),
      steps: example.steps.map(step => this.rule.formatAction(step.action)),
      answer: this.rule.stateToNumber(example.answer)
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
   * –û–±—ã—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—É.
   */
  validate(example) {
    if (this.rule.validateExample) {
      return this.rule.validateExample(example);
    }
    return true;
  }

  /**
   * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥.
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä–∏–º–µ—Ä–æ–≤.
   */
  generateMultiple(count) {
    const out = [];
    for (let i = 0; i < count; i++) {
      out.push(this.generate());
    }
    return out;
  }
}

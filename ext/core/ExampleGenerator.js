// ext/core/ExampleGenerator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª

/**
 * ExampleGenerator - –∫–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ (BaseRule, SimpleRule, Simple5Rule –∏ –¥—Ä.) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
 */
export class ExampleGenerator {
  constructor(rule) {
    this.rule = rule;
    console.log(`‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª–æ–º: ${rule.name}`);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä
   * @returns {Object} - –ü—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ {start, steps, answer}
   */
  generate() {
    // –î–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    const digitCount = this.rule.config?.digitCount || 1;
    const combineLevels = this.rule.config?.combineLevels || false;

    // –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: digitCount=1: 100, digitCount=2-3: 150, digitCount=4+: 200
    let maxAttempts = digitCount === 1 ? 100 : (digitCount <= 3 ? 150 : 200);

    // –î–ª—è combineLevels=false —É–¥–≤–∞–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ (—Å—Ç—Ä–æ–∂–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    if (!combineLevels && digitCount > 1) {
      maxAttempts *= 2;
    }

    console.log(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: digitCount=${digitCount}, combineLevels=${combineLevels}, –ø–æ–ø—ã—Ç–æ–∫=${maxAttempts}`);

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const example = this._generateAttempt();

        // –î–ª—è combineLevels=false –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (!combineLevels && digitCount > 1) {
          if (!this._validateIntermediateStates(example)) {
            console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã—à–ª–∏ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω`);
            continue;
          }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞
        if (this.rule.validateExample && !this.rule.validateExample(example)) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø—Ä–∏–º–µ—Ä –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é`);
          continue;
        }

        console.log(`‚úÖ –ü—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return example;
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      }
    }
    
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
  }

  /**
   * –û–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞
   * @private
   */
_generateAttempt() {
  const start = this.rule.generateStartState();
  let stepsCount = this.rule.generateStepsCount();

  const startStr = Array.isArray(start) ? `[${start.join(', ')}]` : start;
  console.log(`üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞: —Å—Ç–∞—Ä—Ç=${startStr}, —à–∞–≥–æ–≤=${stepsCount}`);

  const steps = [];
  let currentState = start;
  let has5Action = false; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ¬±5
  let blockInserted = false; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –±–ª–æ–∫–∞ ¬±k

  const requireBlock = this.rule.config?.requireBlock;
  const blockPlacement = this.rule.config?.blockPlacement || "auto";

  // === –í–°–¢–ê–í–ö–ê –ë–õ–û–ö–ê –í –ù–ê–ß–ê–õ–û ===
  if (requireBlock && blockPlacement === "start" && this.rule.generateBlock) {
    const block = this.rule.generateBlock(currentState, true);
    if (block) {
      console.log(`üì¶ –í—Å—Ç–∞–≤–∫–∞ –±–ª–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–æ: [${block.join(', ')}]`);
      for (const action of block) {
        const newState = this.rule.applyAction(currentState, action);
        steps.push({ action, fromState: currentState, toState: newState });
        currentState = newState;
        if (Math.abs(action) === 5) has5Action = true;
      }
      blockInserted = true;
      stepsCount -= block.length;
    }
  }

  // === –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–°–ù–û–í–ù–´–• –®–ê–ì–û–í ===

  const digitCount = this.rule.config?.digitCount || 1;
  const combineLevels = this.rule.config?.combineLevels || false;

  for (let i = 0; i < stepsCount; i++) {
    const isFirstAction = (i === 0 && steps.length === 0);
    const isLastAction = (i === stepsCount - 1);

    let availableActions = [];

    // –î–ª—è multi-digit —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    if (digitCount > 1 && Array.isArray(currentState)) {
      if (!combineLevels) {
        // –ö–†–ò–¢–ò–ß–ù–û: –¥–ª—è combineLevels=false –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –≤—ã–±–∏—Ä–∞–µ–º –°–õ–£–ß–ê–ô–ù–´–ô —Ä–∞–∑—Ä—è–¥
        // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —á–∏—Å–µ–ª (11, 23, 45, 73...) –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        const randomPosition = Math.floor(Math.random() * digitCount);
        availableActions = this.rule.getAvailableActions(currentState, isFirstAction, randomPosition);
        console.log(`üé≤ combineLevels=false: —à–∞–≥ ${i+1}, —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑—Ä—è–¥ ${randomPosition} (${['–µ–¥–∏–Ω–∏—Ü—ã', '–¥–µ—Å—è—Ç–∫–∏', '—Å–æ—Ç–Ω–∏', '—Ç—ã—Å—è—á–∏', '–¥–µ—Å—è—Ç–∫–∏ —Ç—ã—Å—è—á', '—Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á', '–º–∏–ª–ª–∏–æ–Ω—ã', '–¥–µ—Å—è—Ç–∫–∏ –º–∏–ª–ª–∏–æ–Ω–æ–≤', '—Å–æ—Ç–Ω–∏ –º–∏–ª–ª–∏–æ–Ω–æ–≤'][randomPosition]})`);
      } else {
        // combineLevels=true: —Å–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
        for (let position = 0; position < digitCount; position++) {
          const actionsForPosition = this.rule.getAvailableActions(currentState, isFirstAction, position);
          availableActions = availableActions.concat(actionsForPosition);
        }
      }

      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è combineLevels=true)
      if (combineLevels) {
        const highestPosition = digitCount - 1;
        const highestDigitValue = currentState[highestPosition] || 0;

        // –ö–†–ò–¢–ò–ß–ù–û: –¥–ª—è N-–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—à–∏–π —Ä–∞–∑—Ä—è–¥
        // –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–∏–π —Ä–∞–∑—Ä—è–¥ –≤—Å—ë –µ—â—ë 0, —Å–∏–ª—å–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –Ω–µ–≥–æ
        if (highestDigitValue === 0) {
          const highPriorityActions = availableActions.filter(a =>
            typeof a === 'object' && a.position === highestPosition && a.value > 0
          );

          if (highPriorityActions.length > 0) {
            // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: —á–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑—Ä—è–¥–æ–≤ –∏ –ø–æ–∑–∂–µ —à–∞–≥, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            // digitCount=2: 75-95%, digitCount=3: 78-95%, digitCount=4+: 85-99%
            const baseChance = Math.min(0.70 + (digitCount * 0.025), 0.85);
            const progressMultiplier = Math.min(i / stepsCount, 1);
            const priorityChance = baseChance + (progressMultiplier * 0.15);

            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–æ–º–µ–Ω—Ç: –µ—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ 50% —à–∞–≥–æ–≤, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 100%
            const isCritical = i >= Math.floor(stepsCount * 0.5);

            if (isCritical || Math.random() < priorityChance) {
              availableActions = highPriorityActions;
            }
          }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∏ —Å—Ç–∞—Ä—à–∏–µ —Ä–∞–∑—Ä—è–¥—ã
        // —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ N-–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
        if (i >= 2 && highestDigitValue === 0) {
          // –ò—â–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ä—à–∏–µ —Ä–∞–∑—Ä—è–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë 0
          const upperHalfActions = availableActions.filter(a => {
            if (typeof a !== 'object') return false;
            const pos = a.position;
            const posValue = currentState[pos] || 0;
            return pos >= Math.floor(digitCount / 2) && posValue === 0 && a.value > 0;
          });

          // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
          const upperChance = 0.5 + (Math.min(i / stepsCount, 1) * 0.3);
          if (upperHalfActions.length > 0 && Math.random() < upperChance) {
            availableActions = upperHalfActions;
          }
        }

        // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ - –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        // –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä—è–¥—ã –∏ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
        const hasNegativeAction = steps.some(step => {
          const actionValue = typeof step.action === 'object' ? step.action.value : step.action;
          return actionValue < 0;
        });

        if (!hasNegativeAction && i >= 3 && !isFirstAction) {
          // –ò—â–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä—è–¥–∞—Ö
          const negativeActions = availableActions.filter(a => {
            if (typeof a !== 'object') return false;
            return a.value < 0;
          });

          if (negativeActions.length > 0 && Math.random() < 0.4) {
            availableActions = negativeActions;
          }
        }
      }
    } else {
      // Legacy: –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π —Ä–µ–∂–∏–º
      availableActions = this.rule.getAvailableActions(currentState, isFirstAction);
    }

    if (availableActions.length === 0) {
      const stateStr = Array.isArray(currentState) ? `[${currentState.join(', ')}]` : currentState;
      throw new Error(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${stateStr}`);
    }

    // === –ü–û–ü–´–¢–ö–ê –í–°–¢–ê–í–ò–¢–¨ –ë–õ–û–ö –í –°–ï–†–ï–î–ò–ù–ï/–ö–û–ù–¶–ï ===
    if (requireBlock && !blockInserted && this.rule.generateBlock && this.rule.canInsertBlock) {
      const canInsertPositive = this.rule.canInsertBlock(currentState, true);
      const canInsertNegative = this.rule.canInsertBlock(currentState, false);

      // –í—Å—Ç–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 60% –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      if ((canInsertPositive || canInsertNegative) && Math.random() < 0.6) {
        const isPositive = canInsertPositive ? true : false;
        const block = this.rule.generateBlock(currentState, isPositive);

        if (block) {
          console.log(`üì¶ –í—Å—Ç–∞–≤–∫–∞ –±–ª–æ–∫–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ ${steps.length}: [${block.join(', ')}]`);
          for (const action of block) {
            const newState = this.rule.applyAction(currentState, action);
            steps.push({ action, fromState: currentState, toState: newState });
            currentState = newState;
            if (Math.abs(action) === 5) has5Action = true;
          }
          blockInserted = true;
          stepsCount -= block.length; // ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –±–ª–æ–∫–∞
          continue;
        }
      }
    }

    // ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å 5 –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä–∞—Ö –∏ –µ—ë –µ—â—ë –Ω–µ –±—ã–ª–æ - –ø–æ–≤—ã—à–∞–µ–º —à–∞–Ω—Å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    const hasFive = this.rule.config?.hasFive;
    if (hasFive && !has5Action && i >= Math.floor(stepsCount / 3)) {
      const actions5 = availableActions.filter(a => {
        const value = typeof a === 'object' ? a.value : a;
        return Math.abs(value) === 5;
      });
      if (actions5.length > 0 && Math.random() < 0.4) { // 40% —à–∞–Ω—Å –≤–º–µ—Å—Ç–æ 80%
        availableActions = actions5;
      }
    }

    // ‚úÖ –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ –∏–∑–±–µ–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–π, –≤–µ–¥—É—â–∏—Ö –∫ 0 (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö)
    if (isLastAction && typeof currentState === 'number' && currentState <= 4) {
      const nonZeroActions = availableActions.filter(action => {
        const value = typeof action === 'object' ? action.value : action;
        const result = currentState + value;
        return result !== 0;
      });
      if (nonZeroActions.length > 0) {
        availableActions = nonZeroActions;
      }
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    const action = availableActions[Math.floor(Math.random() * availableActions.length)];
    const newState = this.rule.applyAction(currentState, action);

    // –û—Ç–º–µ—á–∞–µ–º –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ¬±5
    const actionValue = typeof action === 'object' ? action.value : action;
    if (Math.abs(actionValue) === 5) {
      has5Action = true;
    }

    steps.push({
      action: action,
      fromState: currentState,
      toState: newState
    });

    currentState = newState;
  }

  // === –í–°–¢–ê–í–ö–ê –ë–õ–û–ö–ê –í –ö–û–ù–ï–¶ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤—Å—Ç–∞–≤–ª–µ–Ω) ===
  if (requireBlock && !blockInserted && this.rule.generateBlock && this.rule.canInsertBlock) {
    const canInsertPositive = this.rule.canInsertBlock(currentState, true);
    const canInsertNegative = this.rule.canInsertBlock(currentState, false);

    if (!canInsertPositive && !canInsertNegative) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –±–ª–æ–∫ ¬±k`);
    }

    const isPositive = canInsertPositive ? true : false;
    const block = this.rule.generateBlock(currentState, isPositive);

    if (block) {
      console.log(`üì¶ –í—Å—Ç–∞–≤–∫–∞ –±–ª–æ–∫–∞ –≤ –∫–æ–Ω–µ—Ü: [${block.join(', ')}]`);
      for (const action of block) {
        const newState = this.rule.applyAction(currentState, action);
        steps.push({ action, fromState: currentState, toState: newState });
        currentState = newState;
        if (Math.abs(action) === 5) has5Action = true;
      }
      blockInserted = true;
      // ‚úÖ –ó–¥–µ—Å—å –Ω–µ —É–º–µ–Ω—å—à–∞–µ–º stepsCount, —Ç–∞–∫ –∫–∞–∫ –±–ª–æ–∫ –≤—Å—Ç–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
    } else {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫ ¬±k`);
    }
  }

  // === REPAIR TO RANGE (–µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã) ===
  if (this.rule.config?.maxFinalState !== undefined && typeof currentState === 'number' && currentState > this.rule.config.maxFinalState) {
    currentState = this._repairToRange(steps, currentState);
  }

  // === –ü–†–û–í–ï–†–ö–ê –ò –†–ï–ú–û–ù–¢ –î–ò–ê–ü–ê–ó–û–ù–ê –î–õ–Ø MULTI-DIGIT ===
  if (digitCount > 1 && Array.isArray(currentState)) {
    const finalNumber = this.rule.stateToNumber(currentState);
    const minFinal = this.rule.getMinFinalNumber();
    const maxFinal = this.rule.getMaxFinalNumber();

    // –ï—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞, –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞
    if (finalNumber < minFinal) {
      console.log(`‚ö†Ô∏è –ß–∏—Å–ª–æ ${finalNumber} < –º–∏–Ω–∏–º—É–º–∞ ${minFinal} (digitCount=${digitCount}, combineLevels=${combineLevels})`);

      // –î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ N-–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—à–∏–π —Ä–∞–∑—Ä—è–¥
      const targetPosition = digitCount - 1;
      const targetDigitValue = currentState[targetPosition] || 0;

      // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–º—É —Ä–∞–∑—Ä—è–¥—É
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ N-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ: 10^(N-1)
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è digitCount=2: minFinal=10, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –¥–µ—Å—è—Ç–∫–∏ >= 1
      const neededValue = Math.max(1, Math.ceil((minFinal - finalNumber) / Math.pow(10, targetPosition)));

      // –ù–æ –Ω–µ –±–æ–ª—å—à–µ —á–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å (0-9)
      const addValue = Math.min(neededValue, 9 - targetDigitValue);

      if (addValue > 0 && targetDigitValue + addValue <= 9) {
        const repairAction = { position: targetPosition, value: addValue };
        const newState = this.rule.applyAction(currentState, repairAction);
        steps.push({
          action: repairAction,
          fromState: currentState,
          toState: newState
        });
        currentState = newState;
        const repairedNumber = this.rule.stateToNumber(currentState);
        console.log(`üîß Repair: –¥–æ–±–∞–≤–ª–µ–Ω–æ +${addValue} –∫ —Ä–∞–∑—Ä—è–¥—É ${targetPosition}, –±—ã–ª–æ ${finalNumber} ‚Üí —Å—Ç–∞–ª–æ ${repairedNumber}`);
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const finalCheck = this.rule.stateToNumber(currentState);
    if (finalCheck < minFinal || finalCheck > maxFinal) {
      throw new Error(`–§–∏–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ${finalCheck} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${minFinal}-${maxFinal}`);
    }
  }

  return {
    start: start,
    steps: steps,
    answer: currentState
  };
}

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è combineLevels=false
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è N-—Ä–∞–∑—Ä—è–¥–Ω—ã–º–∏
   * @param {Object} example - –ü—Ä–∏–º–µ—Ä {start, steps, answer}
   * @returns {boolean} - true –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã
   * @private
   */
  _validateIntermediateStates(example) {
    const digitCount = this.rule.config?.digitCount || 1;
    if (digitCount === 1) return true;

    const minAllowed = this.rule.getMinFinalNumber();
    const maxAllowed = this.rule.getMaxFinalNumber();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const startNumber = this.rule.stateToNumber(example.start);
    if (startNumber < minAllowed || startNumber > maxAllowed) {
      console.warn(`‚ùå –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${startNumber} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [${minAllowed}, ${maxAllowed}]`);
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for (let i = 0; i < example.steps.length; i++) {
      const step = example.steps[i];
      const stateNumber = this.rule.stateToNumber(step.toState);

      if (stateNumber < minAllowed || stateNumber > maxAllowed) {
        console.warn(`‚ùå –®–∞–≥ ${i + 1}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${stateNumber} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [${minAllowed}, ${maxAllowed}]`);
        return false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const answerNumber = this.rule.stateToNumber(example.answer);
    if (answerNumber < minAllowed || answerNumber > maxAllowed) {
      console.warn(`‚ùå –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ${answerNumber} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [${minAllowed}, ${maxAllowed}]`);
      return false;
    }

    return true;
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
   * @param {Array} steps - –ú–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ (–∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
   * @param {number|number[]} currentState - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * @returns {number|number[]} - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * @private
   */
  _repairToRange(steps, currentState) {
    const maxFinal = this.rule.config.maxFinalState;

    const stateStr = Array.isArray(currentState) ? `[${currentState.join(', ')}]` : currentState;
    console.log(`üîß Repair to range: ${stateStr} ‚Üí 0..${maxFinal}`);

    let attempts = 0;
    const maxAttempts = 10;

    // Legacy: —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª
    if (typeof currentState === 'number') {
      while (currentState > maxFinal && attempts < maxAttempts) {
        const isUpperActive = (currentState >= 5);
        const activeLower = isUpperActive ? currentState - 5 : currentState;

        let action;

        // –ü—ã—Ç–∞–µ–º—Å—è -5, –µ—Å–ª–∏ –≤–µ—Ä—Ö–Ω—è—è –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∏–∂–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ
        if (isUpperActive && (currentState - 5 <= maxFinal) && (currentState - 5 >= 0)) {
          action = -5;
        } else if (activeLower > 0) {
          // –ò–Ω–∞—á–µ —Å–Ω–∏–º–∞–µ–º –Ω–∏–∂–Ω–∏–µ (—Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö)
          const needed = Math.min(activeLower, currentState - maxFinal);
          action = -needed;
        } else {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${currentState} –¥–æ ${maxFinal}`);
          break;
        }

        const newState = this.rule.applyAction(currentState, action);
        steps.push({ action, fromState: currentState, toState: newState });
        currentState = newState;
        attempts++;

        console.log(`  üîß –®–∞–≥ ${attempts}: ${this.rule.formatAction(action)} ‚Üí ${currentState}`);
      }
    }
    // TODO: –î–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª repair –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ "–ü—Ä–æ—Å—Ç–æ"

    return currentState;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
   * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ –ø—Ä–∏–º–µ—Ä–æ–≤
   */
  generateMultiple(count) {
    const examples = [];
    for (let i = 0; i < count; i++) {
      examples.push(this.generate());
    }
    return examples;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {Object} example - –ü—Ä–∏–º–µ—Ä {start, steps, answer}
   * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  formatForDisplay(example) {
    const { start, steps, answer } = example;

    const stepsStr = steps
      .map(step => this.rule.formatAction(step.action))
      .join(' ');

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º start –∏ answer –≤ —á–∏—Å–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const startNum = this.rule.stateToNumber(start);
    const answerNum = this.rule.stateToNumber(answer);

    // –ï—Å–ª–∏ —Å—Ç–∞—Ä—Ç = 0, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if (startNum === 0) {
      return `${stepsStr} = ${answerNum}`;
    } else {
      return `${startNum} ${stepsStr} = ${answerNum}`;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è trainer_logic.js
   * @param {Object} example - –ü—Ä–∏–º–µ—Ä {start, steps, answer}
   * @returns {Object} - –ü—Ä–∏–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ {start: number, steps: string[], answer: number}
   */
  toTrainerFormat(example) {
    const digitCount = this.rule.config?.digitCount || 1;
    const combineLevels = this.rule.config?.combineLevels || false;

    // –î–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    if (digitCount > 1 && Array.isArray(example.start)) {
      const formattedSteps = [];
      let previousNumber = this.rule.stateToNumber(example.start); // 0

      for (const step of example.steps) {
        const currentNumber = this.rule.stateToNumber(step.toState);
        const delta = currentNumber - previousNumber;

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–ª—å—Ç—É –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏–µ
        const sign = delta > 0 ? '+' : '';
        formattedSteps.push(`${sign}${delta}`);

        previousNumber = currentNumber;
      }

      const finalAnswer = this.rule.stateToNumber(example.answer);
      const minFinal = this.rule.getMinFinalNumber();
      const maxFinal = this.rule.getMaxFinalNumber();

      console.log(`üìä –ü—Ä–∏–º–µ—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: digitCount=${digitCount}, combineLevels=${combineLevels}, answer=${finalAnswer}, –¥–∏–∞–ø–∞–∑–æ–Ω=${minFinal}-${maxFinal}`);

      return {
        start: this.rule.stateToNumber(example.start),
        steps: formattedSteps,
        answer: finalAnswer
      };
    }

    // Legacy: –¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    return {
      start: this.rule.stateToNumber(example.start),
      steps: example.steps.map(step => this.rule.formatAction(step.action)),
      answer: this.rule.stateToNumber(example.answer)
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä
   * @param {Object} example - –ü—Ä–∏–º–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @returns {boolean}
   */
  validate(example) {
    if (this.rule.validateExample) {
      return this.rule.validateExample(example);
    }
    return true; // –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é
  }
}

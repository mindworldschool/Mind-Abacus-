// ext/core/rules/BrothersRule.js
//
// –ü—Ä–∞–≤–∏–ª–æ "–ë—Ä–∞—Ç—å—è" üë¨
// –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ 5 (–æ–±–º–µ–Ω –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–∏—Ö –±—É—Å–∏–Ω)
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω –±–ª–æ–∫ "–ë—Ä–∞—Ç—å—è" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞.

import { BaseRule } from "./BaseRule.js";

export class BrothersRule extends BaseRule {
  constructor(config = {}) {
    super(config);

    const brothersDigits = Array.isArray(config.selectedDigits)
      ? config.selectedDigits.map(n => parseInt(n, 10)).filter(n => n >= 1 && n <= 4)
      : [4]; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—Ä–µ–Ω–∏—Ä—É–µ–º 4‚Üî5

    this.config = {
      name: "–ë—Ä–∞—Ç—å—è",
      minState: 0,
      maxState: 9,
      minSteps: config.minSteps ?? 3,
      maxSteps: config.maxSteps ?? 7,
      brothersDigits,
      onlyAddition: config.onlyAddition ?? false,
      onlySubtraction: config.onlySubtraction ?? false,
      digitCount: config.digitCount ?? 1,
      combineLevels: config.combineLevels ?? false,
      blocks: config.blocks ?? {},
      ...config
    };

    console.log(
      `üë¨ BrothersRule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: –±—Ä–∞—Ç—å—è=${brothersDigits.join(
        ", "
      )}, onlyAddition=${this.config.onlyAddition}, onlySubtraction=${this.config.onlySubtraction}`
    );

    // –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –æ–±–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä (–≤ –æ–¥–Ω—É –∏ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É)
    // –ö–∞–∂–¥–æ–º—É –±—Ä–∞—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞/–ø–∞—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    this.exchangePairs = this._buildExchangePairs(brothersDigits);
  }

  /** –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±–º–µ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±—Ä–∞—Ç—å–µ–≤ */
  _buildExchangePairs(digits) {
    const pairs = new Set();

    for (const d of digits) {
      switch (d) {
        case 4:
          // –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω 4 <-> 5
          pairs.add("4-5");
          pairs.add("5-4");
          break;
        case 3:
          // 3 <-> 8
          pairs.add("3-8");
          pairs.add("8-3");
          break;
        case 2:
          // 2 <-> 7
          pairs.add("2-7");
          pairs.add("7-2");
          break;
        case 1:
          // 1 <-> 6 –∏ 0 <-> 5
          pairs.add("1-6");
          pairs.add("6-1");
          pairs.add("0-5");
          pairs.add("5-0");
          break;
        default:
          break;
      }
    }

    return pairs;
  }

  /** –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
  generateStartState() {
    return 0;
  }

  /** –°–ª—É—á–∞–π–Ω–∞—è –¥–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏ */
  generateStepsCount() {
    const min = this.config.minSteps;
    const max = this.config.maxSteps;
    return min + Math.floor(Math.random() * (max - min + 1));
  }

  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è */
  isValidState(v) {
    return v >= this.config.minState && v <= this.config.maxState;
  }

  /** –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è */
  getAvailableActions(currentState, isFirstAction = false) {
    const { onlyAddition, onlySubtraction } = this.config;
    const v = currentState;
    const actions = [];

    // –í–æ–∑–º–æ–∂–Ω—ã–µ –±—É–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (0..9)
    for (let v2 = 0; v2 <= 9; v2++) {
      if (v2 === v) continue;

      const delta = v2 - v;
      const direction = delta > 0 ? "up" : "down";

      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ñ–ª–∞–≥–∞–º
      if (onlyAddition && delta < 0) continue;
      if (onlySubtraction && delta > 0) continue;
      if (isFirstAction && delta < 0) continue;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º "–±—Ä–∞—Ç—Å–∫–∏–º" –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º (–æ–±—ã—á–Ω—ã–π)
      if (this.isBrotherGestureTransition(v, v2, direction) || this.isSimpleTransition(v, v2, direction)) {
        actions.push(delta);
      }
    }

    console.log(`üë¨ getAvailableActions(v=${v}) ‚Üí [${actions.join(", ")}]`);
    return actions;
  }

  /** –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–∑–∏–∫–∞ (–∫–∞–∫ –≤ –±–ª–æ–∫–µ "–ü—Ä–æ—Å—Ç–æ"): –±–µ–∑ –æ–±–º–µ–Ω–∞ */
  isSimpleTransition(v, v2, dir) {
    if (v2 < 0 || v2 > 9) return false;
    if (dir === "up" && v2 <= v) return false;
    if (dir === "down" && v2 >= v) return false;

    const wasTop = v >= 5;
    const wasBot = wasTop ? v - 5 : v;
    const isTop = v2 >= 5;
    const isBot = isTop ? v2 - 5 : v2;

    const topChange = (isTop ? 1 : 0) - (wasTop ? 1 : 0);
    const botChange = isBot - wasBot;

    if (dir === "up") {
      if (topChange < 0 || botChange < 0) return false;
      if (topChange === 0 && botChange === 0) return false;
      return true;
    }
    if (dir === "down") {
      if (topChange > 0 || botChange > 0) return false;
      if (topChange === 0 && botChange === 0) return false;
      return true;
    }
    return false;
  }

  /** –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–≥ "–±—Ä–∞—Ç—Å–∫–∏–º" –æ–±–º–µ–Ω–æ–º */
  isBrotherGestureTransition(v, v2, dir) {
    if (v2 < 0 || v2 > 9) return false;

    const key = `${v}-${v2}`;
    if (this.exchangePairs.has(key)) {
      // –ù–∞–ø—Ä–∏–º–µ—Ä 4‚Üí5 –∏–ª–∏ 5‚Üí4, 2‚Üí7 –∏ —Ç.–¥.
      return true;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤—Ä–æ–¥–µ (v,v2) —Å –æ–±–º–µ–Ω–æ–º –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–∏—Ö
    // –Ω–æ –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–±–ª–∏—Ü—ã.
    return false;
  }

  /** –ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–≥ */
  applyAction(currentState, delta) {
    return currentState + delta;
  }

  /** –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–≥–∞ */
  formatAction(a) {
    return a >= 0 ? `+${a}` : `${a}`;
  }

  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–∞ */
  validateExample(example) {
    const { start, steps, answer } = example;
    const { minState, maxState } = this.config;
    let state = start;

    for (const step of steps) {
      const next = this.applyAction(state, step.action);
      if (next < minState || next > maxState) {
        console.error(`‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ ${next} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞`);
        return false;
      }
      state = next;
    }

    return state === answer;
  }
}

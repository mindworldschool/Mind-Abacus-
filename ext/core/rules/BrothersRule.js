// ext/core/rules/BrothersRule.js - –ü—Ä–∞–≤–∏–ª–æ "–ë—Ä–∞—Ç—å—è" (–§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v2)
// 
// –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
// 1. ‚úÖ –£–±—Ä–∞–Ω get name(), –¥–æ–±–∞–≤–ª–µ–Ω this.name
// 2. ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—Ç—Å–∫–∏—Ö —à–∞–≥–æ–≤ (50% –≤–º–µ—Å—Ç–æ 80% - –º–µ–Ω—å—à–µ –ø–æ–≤—Ç–æ—Ä–æ–≤)
// 3. ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ –±—Ä–∞—Ç—å–µ–≤: UI "–±—Ä–∞—Ç N" ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ ¬±N
// 4. ‚úÖ –£–±—Ä–∞–Ω—ã –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã minSteps/maxSteps
// 5. ‚úÖ –§–æ—Ä–º—É–ª—ã –±–µ–∑ source

import { BaseRule } from "./BaseRule.js";

export class BrothersRule extends BaseRule {
  constructor(config = {}) {
    super(config);

    // üî• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –Ω–∞–ø—Ä—è–º—É—é
    this.name = "–ë—Ä–∞—Ç—å—è";

    // –ö–∞–∫–∏–µ "–±—Ä–∞—Ç—å—è" —Ç—Ä–µ–Ω–∏—Ä—É–µ–º –∏–∑ UI: [1,2,3,4]
    // –ù–û! –í UI "–±—Ä–∞—Ç N" –æ–∑–Ω–∞—á–∞–µ—Ç "–ø–µ—Ä–µ—Ö–æ–¥ ¬±N"
    // –ê –≤ –∫–æ–¥–µ n ‚Üí delta = 5-n
    // –ü–æ—ç—Ç–æ–º—É –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: UI_N ‚Üí internal_n = 5-UI_N
    const brothersDigitsFromUI = Array.isArray(config.selectedDigits)
      ? config.selectedDigits.map(n => parseInt(n, 10)).filter(n => n >= 1 && n <= 4)
      : [4];

    // üî• –ò–ù–í–ï–†–°–ò–Ø: UI "–±—Ä–∞—Ç 4" ‚Üí internal n=1 ‚Üí delta=4
    const brothersDigits = brothersDigitsFromUI.map(ui_n => 5 - ui_n);

    // üî• –ù–û–í–û–ï: –ë–µ—Ä–µ–º —Ü–∏—Ñ—Ä—ã –∏–∑ –±–ª–æ–∫–∞ "–ü—Ä–æ—Å—Ç–æ" –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–≥–æ–≤
    console.log("üîç RAW config.blocks?.simple?.digits:", config.blocks?.simple?.digits);
    
    const simpleBlockDigits = Array.isArray(config.blocks?.simple?.digits)
      ? config.blocks.simple.digits
          .map(n => {
            const parsed = typeof n === 'string' ? parseInt(n, 10) : n;
            return Number.isFinite(parsed) ? parsed : null;
          })
          .filter(n => n !== null && n >= 1 && n <= 9)
      : [1, 2, 3, 4, 5, 6, 7, 8, 9]; // –¥–µ—Ñ–æ–ª—Ç - –≤—Å–µ —Ü–∏—Ñ—Ä—ã

    console.log("üë¨ BrothersRule: –º–∞–ø–ø–∏–Ω–≥ –±—Ä–∞—Ç—å–µ–≤ UI‚Üíinternal:", 
      brothersDigitsFromUI.map((ui, i) => `UI=${ui} ‚Üí n=${brothersDigits[i]} ‚Üí Œî=${ui}`).join(", ")
    );
    console.log("üìò BrothersRule: —Ü–∏—Ñ—Ä—ã –∏–∑ –±–ª–æ–∫–∞ –ü—Ä–æ—Å—Ç–æ:", simpleBlockDigits);

    // üî• –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ø—Ä–æ—Ü–µ–Ω—Ç –±—Ä–∞—Ç—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:
    // –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã (2-4 —à–∞–≥–∞): 30% –±—Ä–∞—Ç—Å–∫–∏—Ö
    // –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–∏–º–µ—Ä—ã (5-7 —à–∞–≥–æ–≤): 40-50% –±—Ä–∞—Ç—Å–∫–∏—Ö
    // –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (8+ —à–∞–≥–æ–≤): 50-70% –±—Ä–∞—Ç—Å–∫–∏—Ö
    const maxSteps = config.maxSteps ?? 8;
    const basePriority = 0.3; // –º–∏–Ω–∏–º—É–º 30%
    const scaleFactor = Math.min(0.4, maxSteps / 20); // –¥–æ +40%
    const brotherPriority = basePriority + scaleFactor;
    
    this.config = {
      ...this.config,
      name: "–ë—Ä–∞—Ç—å—è",
      minState: 0,
      maxState: 9,
      // üî• –£–ë–†–ê–ù–´ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ config!
      minSteps: config.minSteps ?? 2,
      maxSteps: maxSteps,
      brothersDigits,                    // internal [4,3,2,1] –¥–ª—è UI [1,2,3,4]
      brothersDigitsUI: brothersDigitsFromUI,  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º UI –≤–µ—Ä—Å–∏—é –¥–ª—è –ª–æ–≥–æ–≤
      simpleBlockDigits,                  // üî• –ù–û–í–û–ï: —Ü–∏—Ñ—Ä—ã –∏–∑ –±–ª–æ–∫–∞ "–ü—Ä–æ—Å—Ç–æ"
      onlyAddition: config.onlyAddition ?? false,
      onlySubtraction: config.onlySubtraction ?? false,
      digitCount: config.digitCount ?? 1,
      combineLevels: config.combineLevels ?? false,
      brotherPriority: brotherPriority,  // üî• –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ø—Ä–æ—Ü–µ–Ω—Ç
      blocks: config.blocks ?? {}
    };

    console.log(
      `üë¨ BrothersRule init: –±—Ä–∞—Ç—å—è UI=[${brothersDigitsFromUI.join(", ")}],` +
      ` internal=[${brothersDigits.join(", ")}],` +
      ` –ø—Ä–æ—Å—Ç—ã–µ —Ü–∏—Ñ—Ä—ã=[${simpleBlockDigits.join(", ")}],` +
      ` minSteps=${this.config.minSteps}, maxSteps=${this.config.maxSteps},` +
      ` brotherPriority=${(brotherPriority * 100).toFixed(0)}%,` +
      ` onlyAdd=${this.config.onlyAddition}, onlySub=${this.config.onlySubtraction}`
    );

    // –ü–æ—Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É –±—Ä–∞—Ç—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    this.brotherPairs = this._buildBrotherPairs(brothersDigits);

    // –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –±—Ä–∞—Ç—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    console.log("üìä –¢–∞–±–ª–∏—Ü–∞ –±—Ä–∞—Ç—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:");
    const transitions = {};
    for (const pairKey of this.brotherPairs) {
      const [from, to, brotherInfo] = pairKey.split('-');
      if (!transitions[from]) transitions[from] = [];
      transitions[from].push(`${to} (${brotherInfo})`);
    }
    for (const [from, toList] of Object.entries(transitions).sort((a, b) => parseInt(a[0]) - parseInt(b[0]))) {
      console.log(`  –ò–∑ ${from} ‚Üí [${toList.join(', ')}]`);
    }
  }

  // ===== –ü–æ–º–æ—â–Ω–∏–∫–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ –æ–¥–Ω–æ–π —Å—Ç–æ–π–∫–∏ S‚àà[0..9] =====
  _U(S) { return S >= 5 ? 1 : 0; }
  _L(S) { return S >= 5 ? S - 5 : S; }

  _canMinusLower(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    return L >= v && (S - v) >= 0;
  }
  
  _canPlusLower(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    return L + v <= 4 && (S + v) <= 9;
  }
  
  _canPlusUpper(S) {
    return S <= 4;
  }
  
  _canMinusUpper(S) {
    return S >= 5;
  }
  
  _canPlusLowerAfter(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    return this._U(S) === 0 && (L + v) <= 4 && (S + v) <= 9;
  }

  /**
   * –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ —Å—Ç—Ä–æ–∏–º –≤—Å–µ –ø–∞—Ä—ã v->v2, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É–µ–º—ã –ë–†–ê–¢–°–ö–ò–ú –æ–±–º–µ–Ω–æ–º
   * @param {number[]} digits - internal n (–Ω–µ UI –≤–µ—Ä—Å–∏—è!)
   */
  _buildBrotherPairs(digits) {
    const set = new Set();

    for (let v = 0; v <= 9; v++) {
      for (const n of digits) {
        const delta = 5 - n;

        // –í–≤–µ—Ä—Ö (+delta)
        if (this._U(v) === 0 && this._canMinusLower(v, n) && this._canPlusUpper(v - n)) {
          const v2 = v - n + 5;
          if (v2 >= 0 && v2 <= 9) {
            set.add(`${v}-${v2}-brother${n}`);
          }
        }

        // –í–Ω–∏–∑ (-delta)
        if (this._U(v) === 1 && this._canMinusUpper(v)) {
          const vMid = v - 5;
          if (this._canPlusLowerAfter(vMid, n)) {
            const v2 = vMid + n;
            if (v2 >= 0 && v2 <= 9) {
              set.add(`${v}-${v2}-brother${n}`);
            }
          }
        }
      }
    }
    return set;
  }

  generateStartState() {
    return 0;
  }

  generateStepsCount() {
    const { minSteps, maxSteps } = this.config;
    const steps = minSteps + Math.floor(Math.random() * (maxSteps - minSteps + 1));
    console.log(`üìè BrothersRule.generateStepsCount: ${steps} (–¥–∏–∞–ø–∞–∑–æ–Ω ${minSteps}-${maxSteps})`);
    return steps;
  }

  isValidState(v) {
    return v >= this.config.minState && v <= this.config.maxState;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ò –±—Ä–∞—Ç—Å–∫–∏–µ, –ò –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏
   * 
   * –õ–û–ì–ò–ö–ê "–¢–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω–∏–µ/–≤—ã—á–∏—Ç–∞–Ω–∏–µ":
   * - –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫ –±—Ä–∞—Ç—Å–∫–∏–º —à–∞–≥–∞–º (–≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä—É–µ–º–æ–π —Ü–∏—Ñ—Ä–µ)
   * - –ü—Ä–æ—Å—Ç—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –í–°–ï–ì–î–ê –¥–æ—Å—Ç—É–ø–Ω—ã —Å –ª—é–±—ã–º –∑–Ω–∞–∫–æ–º
   */
  getAvailableActions(currentState, isFirstAction = false, position = 0) {
    const { onlyAddition, onlySubtraction, brothersDigits, simpleBlockDigits } = this.config;
    const v = currentState;
    const brotherActions = [];
    const simpleActions = [];

    // === –ë–†–ê–¢–°–ö–ò–ï –®–ê–ì–ò (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–Ω–∞–∫–∞) ===
    for (let v2 = 0; v2 <= 9; v2++) {
      if (v2 === v) continue;
      const delta = v2 - v;
      const dir = delta > 0 ? "up" : "down";

      // üî• –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–Ø–Æ–¢–°–Ø –¢–û–õ–¨–ö–û –ö –ë–†–ê–¢–°–ö–ò–ú –®–ê–ì–ê–ú!
      if (onlyAddition && delta < 0) continue;
      if (onlySubtraction && delta > 0) continue;
      if (isFirstAction && delta < 0) continue;

      let brotherN = null;
      for (const n of brothersDigits) {
        if (this.brotherPairs.has(`${v}-${v2}-brother${n}`)) {
          brotherN = n;
          break;
        }
      }

      if (brotherN != null) {
        const formula = this._buildBrotherFormula(v, v2, brotherN, dir);
        if (formula) {
          brotherActions.push({
            label: `—á–µ—Ä–µ–∑ 5 (–±—Ä–∞—Ç ${5-brotherN})`,
            value: delta,
            isBrother: true,
            brotherN: 5 - brotherN,
            formula
          });
        }
      }
    }

    // === –ü–†–û–°–¢–´–ï –®–ê–ì–ò (–ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–Ω–∞–∫–∞ - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ!) ===
    const L = this._L(v);
    const U = this._U(v);

    // ‚úÖ –°–õ–û–ñ–ï–ù–ò–ï: –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç onlyAddition/onlySubtraction)
    for (const digit of simpleBlockDigits) {
      if (isFirstAction && digit <= 0) continue; // –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
      
      // –¶–∏—Ñ—Ä—ã 1-4: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∂–Ω–∏–µ –±—É—Å–∏–Ω—ã
      if (digit >= 1 && digit <= 4) {
        if (this._canPlusLower(v, digit)) {
          simpleActions.push(digit);
        }
      }
      // –¶–∏—Ñ—Ä–∞ 5: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É
      else if (digit === 5) {
        if (U === 0 && v <= 4) {
          simpleActions.push(5);
        }
      }
      // –¶–∏—Ñ—Ä—ã 6-9: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤–µ—Ä—Ö–Ω–µ–π + –Ω–∏–∂–Ω–∏—Ö
      else if (digit >= 6 && digit <= 9) {
        const lower = digit - 5;
        if (U === 0 && this._canPlusLower(v, lower) && v + digit <= 9) {
          simpleActions.push(digit);
        }
      }
    }

    // ‚úÖ –í–´–ß–ò–¢–ê–ù–ò–ï: –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç onlyAddition/onlySubtraction)
    if (!isFirstAction) {
      for (const digit of simpleBlockDigits) {
        // –¶–∏—Ñ—Ä—ã 1-4: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∂–Ω–∏–µ –±—É—Å–∏–Ω—ã
        if (digit >= 1 && digit <= 4) {
          if (this._canMinusLower(v, digit)) {
            simpleActions.push(-digit);
          }
        }
        // –¶–∏—Ñ—Ä–∞ 5: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É
        else if (digit === 5) {
          if (U === 1 && v >= 5) {
            simpleActions.push(-5);
          }
        }
        // –¶–∏—Ñ—Ä—ã 6-9: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤–µ—Ä—Ö–Ω–µ–π + –Ω–∏–∂–Ω–∏—Ö
        else if (digit >= 6 && digit <= 9) {
          const lower = digit - 5;
          if (U === 1 && this._canMinusLower(v, lower) && v - digit >= 0) {
            simpleActions.push(-digit);
          }
        }
      }
    }

    // üî• –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
    if (brotherActions.length > 0 && Math.random() < this.config.brotherPriority) {
      console.log(`üë¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±—Ä–∞—Ç—Å–∫–∏–º —à–∞–≥–∞–º –∏–∑ ${v} (–¥–æ—Å—Ç—É–ø–Ω–æ ${brotherActions.length})`);
      return brotherActions;
    }

    const allActions = [...brotherActions, ...simpleActions];
    console.log(`üé≤ –°–æ—Å—Ç–æ—è–Ω–∏–µ ${v}: –±—Ä–∞—Ç—Å–∫–∏—Ö=${brotherActions.length}, –ø—Ä–æ—Å—Ç—ã—Ö=${simpleActions.length}, –≤—Å–µ–≥–æ=${allActions.length}`);
    return allActions;
  }

  /**
   * –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞—Ç—Å–∫–æ–≥–æ —à–∞–≥–∞ –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
   */
  _buildBrotherFormula(v, v2, n, dir) {
    if (dir === "up") {
      return [
        { op: "+", val: 5 },
        { op: "-", val: n }
      ];
    } else {
      return [
        { op: "-", val: 5 },
        { op: "+", val: n }
      ];
    }
  }

  applyAction(currentState, action) {
    const delta = typeof action === "object" ? action.value : action;
    return currentState + delta;
  }

  formatAction(action) {
    const val = typeof action === "object" ? action.value : action;
    return val >= 0 ? `+${val}` : `${val}`;
  }

  stateToNumber(state) {
    return typeof state === 'number' ? state : 0;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ö–æ—Ç—è –±—ã 1 –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥
   */
  validateExample(example) {
    const { start, steps, answer } = example;
    const { minState, maxState } = this.config;

    if (!steps || steps.length < 1) {
      console.warn("‚ùå validateExample: –Ω–µ—Ç —à–∞–≥–æ–≤");
      return false;
    }

    let s = start;
    let hasBrother = false;

    for (const step of steps) {
      const act = step.action ?? step;
      s = this.applyAction(s, act);
      if (s < minState || s > maxState) {
        console.warn(`‚ùå validateExample: –≤—ã—Ö–æ–¥ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω [${minState}, ${maxState}]: ${s}`);
        return false;
      }
      if (typeof act === "object" && act.isBrother) hasBrother = true;
    }

    if (s !== answer) {
      console.warn(`‚ùå validateExample: –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${s} !== ${answer}`);
      return false;
    }

    if (!hasBrother) {
      console.warn("‚ùå validateExample: –Ω–µ—Ç –±—Ä–∞—Ç—Å–∫–∏—Ö —à–∞–≥–æ–≤");
      return false;
    }

    console.log(`‚úÖ validateExample: –ø—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–Ω—ã–π (${steps.length} —à–∞–≥–æ–≤, –µ—Å—Ç—å –±—Ä–∞—Ç—Å–∫–∏–µ)`);
    return true;
  }
}

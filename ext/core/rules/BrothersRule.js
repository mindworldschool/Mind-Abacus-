// ext/core/rules/BrothersRule.js (–ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–û)
// –ü—Ä–∞–≤–∏–ª–æ "–ë—Ä–∞—Ç—å—è" üë¨ ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —à–∞–≥–∏ —á–µ—Ä–µ–∑ 5 —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.
// –ö–ª—é—á–µ–≤—ã–µ –æ—Ç–ª–∏—á–∏—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏:
// 1) –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç—Ä–æ–∏—Ç—Å—è –ü–†–û–ì–†–ê–ú–ú–ù–û –¥–ª—è –≤—Å–µ—Ö S‚àà[0..9] –∏ n‚ààselectedDigits,
//    –∞ –Ω–µ —á–µ—Ä–µ–∑ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–±–∏—Ç—ã–µ –≤—Ä—É—á–Ω—É—é –ø–∞—Ä—ã ‚Äî —ç—Ç–æ –∏—Å–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏/–æ—à–∏–±–∫–∏.
// 2) –ö–∞–∂–¥—ã–π –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º—É–ª—É –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å–æ—Ä–æ–±–∞–Ω–µ (–º–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö
//    –ø–æ–¥-–æ–ø–µ—Ä–∞—Ü–∏–π), —á—Ç–æ–±—ã UI –º–æ–≥ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–º–µ–Ω–Ω–æ –æ–±–º–µ–Ω —á–µ—Ä–µ–∑ 5.
// 3) –ü—Ä–∏–º–µ—Ä –æ–±—è–∑–∞–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ‚â•1 –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥ (validateExample).

import { BaseRule } from "./BaseRule.js";

export class BrothersRule extends BaseRule {
  constructor(config = {}) {
    super(config);

    // –ö–∞–∫–∏–µ "–±—Ä–∞—Ç—å—è" —Ç—Ä–µ–Ω–∏—Ä—É–µ–º: –∏–∑ {1,2,3,4}
    const brothersDigits = Array.isArray(config.selectedDigits)
      ? config.selectedDigits.map(n => parseInt(n, 10)).filter(n => n >= 1 && n <= 4)
      : [4];

    this.config = {
      preferBrothersOnly: (config.preferBrothersOnly ?? true),
      name: "–ë—Ä–∞—Ç—å—è",
      minState: 0,
      maxState: 9,
      minSteps: config.minSteps ?? 3,
      maxSteps: config.maxSteps ?? 7,
      brothersDigits,
      onlyAddition: config.onlyAddition ?? false,
      onlySubtraction: config.onlySubtraction ?? false,
      digitCount: config.digitCount ?? 1,
      combineLevels: config.combineLevels ?? false,
      blocks: config.blocks ?? {},
      ...config
    };

    console.log(
      `üë¨ BrothersRule init: –±—Ä–∞—Ç—å—è=[${brothersDigits.join(", ")}],` +
      ` onlyAdd=${this.config.onlyAddition}, onlySub=${this.config.onlySubtraction}`
    );

    // –ü–æ—Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –±—Ä–∞—Ç—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ
    this.brotherPairs = this._buildBrotherPairs(brothersDigits);

    // –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –±—Ä–∞—Ç—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log("üìä –¢–∞–±–ª–∏—Ü–∞ –±—Ä–∞—Ç—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:");
    const transitions = {};
    for (const pairKey of this.brotherPairs) {
      const [from, to, brotherInfo] = pairKey.split('-');
      if (!transitions[from]) transitions[from] = [];
      transitions[from].push(`${to} (${brotherInfo})`);
    }
    for (const [from, toList] of Object.entries(transitions).sort((a, b) => parseInt(a[0]) - parseInt(b[0]))) {
      console.log(`  –ò–∑ ${from} ‚Üí [${toList.join(', ')}]`);
    }
  }

  // ===== –ü–æ–º–æ—â–Ω–∏–∫–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ –æ–¥–Ω–æ–π —Å—Ç–æ–π–∫–∏ S‚àà[0..9] =====
  _U(S) { return S >= 5 ? 1 : 0; }         // –≤–µ—Ä—Ö–Ω—è—è –∞–∫—Ç–∏–≤–Ω–∞?
  _L(S) { return S >= 5 ? S - 5 : S; }      // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏–∂–Ω–∏—Ö –±—É—Å–∏–Ω

  _canMinusLower(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    return L >= v && (S - v) >= 0;
  }
  _canPlusUpper(S) {
    // –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –≤–µ—Ä—Ö–Ω—è—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    return S <= 4;
  }
  _canMinusUpper(S) {
    // –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –≤–µ—Ä—Ö–Ω—è—è –∞–∫—Ç–∏–≤–Ω–∞
    return S >= 5;
  }
  _canPlusLowerAfter(S, v) {
    // –¥–æ–±–∞–≤–∏—Ç—å v –Ω–∏–∂–Ω–∏—Ö –±–µ–∑ –≤—ã—Ö–æ–¥–∞ –∑–∞ 4 –Ω–∏–∂–Ω–∏—Ö (–∫–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω—è—è –ù–ï –∞–∫—Ç–∏–≤–Ω–∞)
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    return this._U(S) === 0 && (L + v) <= 4 && (S + v) <= 9;
  }

  /**
   * –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ —Å—Ç—Ä–æ–∏–º –≤—Å–µ –ø–∞—Ä—ã v->v2, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É–µ–º—ã –ë–†–ê–¢–°–ö–ò–ú –æ–±–º–µ–Ω–æ–º
   * —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ n (1..4).
   *
   * n = —á–∏—Å–ª–æ –Ω–∏–∂–Ω–∏—Ö –±—É—Å–∏–Ω –≤ –æ–±–º–µ–Ω–µ.
   * "–í–≤–µ—Ä—Ö" (+delta, delta = 5-n):  [-n, +5]  –≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä–∏ L(S) ‚â• n –∏ U=0
   * "–í–Ω–∏–∑"  (-delta):                [-5, +n]  –≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä–∏ U=1
   */
  _buildBrotherPairs(digits) {
    const set = new Set();

    for (let v = 0; v <= 9; v++) {
      for (const n of digits) {
        const delta = 5 - n;

        // –í–≤–µ—Ä—Ö (+delta): —É–±—Ä–∞—Ç—å n –Ω–∏–∂–Ω–∏—Ö, –æ–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é
        if (this._U(v) === 0 && this._canMinusLower(v, n) && this._canPlusUpper(v - n)) {
          const v2 = v - n + 5;
          if (v2 >= 0 && v2 <= 9) {
            set.add(`${v}-${v2}-brother${n}`);
          }
        }

        // –í–Ω–∏–∑ (-delta): —É–±—Ä–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é, –¥–æ–±–∞–≤–∏—Ç—å n –Ω–∏–∂–Ω–∏—Ö
        if (this._U(v) === 1 && this._canMinusUpper(v)) {
          const vMid = v - 5;
          if (this._canPlusLowerAfter(vMid, n)) {
            const v2 = vMid + n;
            if (v2 >= 0 && v2 <= 9) {
              set.add(`${v}-${v2}-brother${n}`);
            }
          }
        }
      }
    }
    // console.log("brotherPairs:", [...set]);
    return set;
  }

  /** –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–π–∫–∏ */
  generateStartState() {
    return 0;
  }

  /** –î–ª–∏–Ω–∞ –ø—Ä–∏–º–µ—Ä–∞ */
  generateStepsCount() {
    const { minSteps, maxSteps } = this.config;
    return minSteps + Math.floor(Math.random() * (maxSteps - minSteps + 1));
  }

  isValidState(v) {
    return v >= this.config.minState && v <= this.config.maxState;
  }

  /**
   * –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è v.
   * üî• –¢–û–õ–¨–ö–û –ë–†–ê–¢–°–ö–ò–ï –®–ê–ì–ò! –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–æ—Å—Ç—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
   * –î–ª—è –±—Ä–∞—Ç—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ formula: –º–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
   */
  getAvailableActions(currentState, isFirstAction = false, position = 0) {
    const { onlyAddition, onlySubtraction, brothersDigits } = this.config;
    const v = currentState;
    const brotherActions = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for (let v2 = 0; v2 <= 9; v2++) {
      if (v2 === v) continue;
      const delta = v2 - v;
      const dir = delta > 0 ? "up" : "down";

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      if (onlyAddition && delta < 0) continue;
      if (onlySubtraction && delta > 0) continue;
      if (isFirstAction && delta < 0) continue; // –ø–µ—Ä–≤—ã–π —à–∞–≥ –Ω–µ –¥–µ–ª–∞–µ–º –º–∏–Ω—É—Å

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—Ç—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –ª—é–±–æ–º—É n
      let brotherN = null;
      for (const n of brothersDigits) {
        if (this.brotherPairs.has(`${v}-${v2}-brother${n}`)) {
          brotherN = n;
          break;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –±—Ä–∞—Ç—Å–∫–∏–µ —à–∞–≥–∏
      if (brotherN != null) {
        const formula = this._buildBrotherFormula(v, v2, brotherN, dir);
        if (formula) {
          brotherActions.push({
            label: `—á–µ—Ä–µ–∑ 5 (–±—Ä–∞—Ç ${brotherN})`,
            value: delta,
            isBrother: true,
            brotherN,
            formula
          });
        }
      }
      // –ü—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º!
    }

    console.log(`üé≤ –°–æ—Å—Ç–æ—è–Ω–∏–µ ${v}: –¥–æ—Å—Ç—É–ø–Ω–æ ${brotherActions.length} –±—Ä–∞—Ç—Å–∫–∏—Ö —à–∞–≥–æ–≤`);
    return brotherActions;
  }

  /**
   * –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞—Ç—Å–∫–æ–≥–æ —à–∞–≥–∞ –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
   * up:   [-n (lower), +5 (upper)]
   * down: [-5 (upper), +n (lower)]
   */
  _buildBrotherFormula(v, v2, n, dir) {
    if (dir === "up") {
      // –ü—Ä–æ–≤–µ—Ä–∫–∏ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–∞—Ä—ã
      return [
        { op: "-", val: n, source: "lower" },
        { op: "+", val: 5, source: "upper" }
      ];
    } else {
      return [
        { op: "-", val: 5, source: "upper" },
        { op: "+", val: n, source: "lower" }
      ];
    }
  }

  /** "–ü—Ä–æ—Å—Ç–æ–π" –ø–µ—Ä–µ—Ö–æ–¥ –±–µ–∑ –æ–±–º–µ–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π/–Ω–∏–∂–Ω–∏—Ö */
  _isSimpleTransition(v, v2, dir) {
    if (v2 < 0 || v2 > 9) return false;
    if (dir === "up" && v2 <= v) return false;
    if (dir === "down" && v2 >= v) return false;

    const wasTop = v >= 5;
    const wasBot = wasTop ? v - 5 : v;
    const isTop = v2 >= 5;
    const isBot = isTop ? v2 - 5 : v2;

    const topChange = (isTop ? 1 : 0) - (wasTop ? 1 : 0);
    const botChange = isBot - wasBot;

    if (dir === "up") {
      if (topChange < 0 || botChange < 0) return false;
      if (topChange === 0 && botChange === 0) return false;
      return true;
    }
    if (dir === "down") {
      if (topChange > 0 || botChange > 0) return false;
      if (topChange === 0 && botChange === 0) return false;
      return true;
    }
    return false;
  }

  applyAction(currentState, action) {
    const delta = typeof action === "object" ? action.value : action;
    return currentState + delta;
  }

  formatAction(action) {
    const val = typeof action === "object" ? action.value : action;
    return val >= 0 ? `+${val}` : `${val}`;
  }

  validateExample(example) {
    const { start, steps, answer } = example;
    const { minState, maxState } = this.config;

    let s = start;
    let hasBrother = false;

    for (const step of steps) {
      const act = step.action ?? step; // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      s = this.applyAction(s, act);
      if (s < minState || s > maxState) return false;
      if (typeof act === "object" && act.isBrother) hasBrother = true;
    }

    if (s !== answer) return false;
    if (!hasBrother) return false;
    return true;
  }
}

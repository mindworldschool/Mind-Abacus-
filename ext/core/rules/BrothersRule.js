// ext/core/rules/BrothersRule.js - –ü—Ä–∞–≤–∏–ª–æ "–ë—Ä–∞—Ç—å—è" (–§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï)
// 
// –ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
// 1. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ò –±—Ä–∞—Ç—Å–∫–∏–µ, –ò –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞—Ç—å)
// 2. –ü–†–ò–û–†–ò–¢–ò–ó–ò–†–£–ï–¢ –±—Ä–∞—Ç—Å–∫–∏–µ —à–∞–≥–∏ (80% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞)
// 3. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ö–æ—Ç—è –±—ã 1 –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥ —á–µ—Ä–µ–∑ validateExample
// 4. –§–æ—Ä–º—É–ª—ã –±–µ–∑ source (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ)
// 5. –£–±—Ä–∞–Ω get name() - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ this.name

import { BaseRule } from "./BaseRule.js";

export class BrothersRule extends BaseRule {
  constructor(config = {}) {
    super(config);

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –Ω–∞–ø—Ä—è–º—É—é, –ë–ï–ó getter
    this.name = "–ë—Ä–∞—Ç—å—è";

    // –ö–∞–∫–∏–µ "–±—Ä–∞—Ç—å—è" —Ç—Ä–µ–Ω–∏—Ä—É–µ–º: –∏–∑ {1,2,3,4}
    const brothersDigits = Array.isArray(config.selectedDigits)
      ? config.selectedDigits.map(n => parseInt(n, 10)).filter(n => n >= 1 && n <= 4)
      : [4];

    this.config = {
      ...this.config,  // üî• –Ω–∞—Å–ª–µ–¥—É–µ–º config –æ—Ç BaseRule
      name: "–ë—Ä–∞—Ç—å—è",
      minState: 0,
      maxState: 9,
      minSteps: config.minSteps ?? 3,
      maxSteps: config.maxSteps ?? 6,
      brothersDigits,
      onlyAddition: config.onlyAddition ?? false,
      onlySubtraction: config.onlySubtraction ?? false,
      digitCount: config.digitCount ?? 1,
      combineLevels: config.combineLevels ?? false,
      brotherPriority: 0.8,  // üî• 80% —à–∞–Ω—Å –≤—ã–±—Ä–∞—Ç—å –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥
      blocks: config.blocks ?? {}
    };

    console.log(
      `üë¨ BrothersRule init: –±—Ä–∞—Ç—å—è=[${brothersDigits.join(", ")}],` +
      ` onlyAdd=${this.config.onlyAddition}, onlySub=${this.config.onlySubtraction}`
    );

    // –ü–æ—Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –±—Ä–∞—Ç—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    this.brotherPairs = this._buildBrotherPairs(brothersDigits);

    // –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É –±—Ä–∞—Ç—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    console.log("üìä –¢–∞–±–ª–∏—Ü–∞ –±—Ä–∞—Ç—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:");
    const transitions = {};
    for (const pairKey of this.brotherPairs) {
      const [from, to, brotherInfo] = pairKey.split('-');
      if (!transitions[from]) transitions[from] = [];
      transitions[from].push(`${to} (${brotherInfo})`);
    }
    for (const [from, toList] of Object.entries(transitions).sort((a, b) => parseInt(a[0]) - parseInt(b[0]))) {
      console.log(`  –ò–∑ ${from} ‚Üí [${toList.join(', ')}]`);
    }
  }

  // üî• –£–ë–†–ê–ù get name() - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

  // ===== –ü–æ–º–æ—â–Ω–∏–∫–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ –æ–¥–Ω–æ–π —Å—Ç–æ–π–∫–∏ S‚àà[0..9] =====
  _U(S) { return S >= 5 ? 1 : 0; }         // –≤–µ—Ä—Ö–Ω—è—è –∞–∫—Ç–∏–≤–Ω–∞?
  _L(S) { return S >= 5 ? S - 5 : S; }      // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏–∂–Ω–∏—Ö –±—É—Å–∏–Ω

  _canMinusLower(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    return L >= v && (S - v) >= 0;
  }
  
  _canPlusLower(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    return L + v <= 4 && (S + v) <= 9;
  }
  
  _canPlusUpper(S) {
    return S <= 4;
  }
  
  _canMinusUpper(S) {
    return S >= 5;
  }
  
  _canPlusLowerAfter(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    return this._U(S) === 0 && (L + v) <= 4 && (S + v) <= 9;
  }

  /**
   * –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ —Å—Ç—Ä–æ–∏–º –≤—Å–µ –ø–∞—Ä—ã v->v2, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É–µ–º—ã –ë–†–ê–¢–°–ö–ò–ú –æ–±–º–µ–Ω–æ–º
   */
  _buildBrotherPairs(digits) {
    const set = new Set();

    for (let v = 0; v <= 9; v++) {
      for (const n of digits) {
        const delta = 5 - n;

        // –í–≤–µ—Ä—Ö (+delta): —É–±—Ä–∞—Ç—å n –Ω–∏–∂–Ω–∏—Ö, –æ–ø—É—Å—Ç–∏—Ç—å –≤–µ—Ä—Ö–Ω—é—é
        if (this._U(v) === 0 && this._canMinusLower(v, n) && this._canPlusUpper(v - n)) {
          const v2 = v - n + 5;
          if (v2 >= 0 && v2 <= 9) {
            set.add(`${v}-${v2}-brother${n}`);
          }
        }

        // –í–Ω–∏–∑ (-delta): —É–±—Ä–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é, –¥–æ–±–∞–≤–∏—Ç—å n –Ω–∏–∂–Ω–∏—Ö
        if (this._U(v) === 1 && this._canMinusUpper(v)) {
          const vMid = v - 5;
          if (this._canPlusLowerAfter(vMid, n)) {
            const v2 = vMid + n;
            if (v2 >= 0 && v2 <= 9) {
              set.add(`${v}-${v2}-brother${n}`);
            }
          }
        }
      }
    }
    return set;
  }

  generateStartState() {
    return 0;
  }

  generateStepsCount() {
    const { minSteps, maxSteps } = this.config;
    return minSteps + Math.floor(Math.random() * (maxSteps - minSteps + 1));
  }

  isValidState(v) {
    return v >= this.config.minState && v <= this.config.maxState;
  }

  /**
   * üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ò –±—Ä–∞—Ç—Å–∫–∏–µ, –ò –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏
   */
  getAvailableActions(currentState, isFirstAction = false, position = 0) {
    const { onlyAddition, onlySubtraction, brothersDigits } = this.config;
    const v = currentState;
    const brotherActions = [];
    const simpleActions = [];

    // === –ë–†–ê–¢–°–ö–ò–ï –®–ê–ì–ò ===
    for (let v2 = 0; v2 <= 9; v2++) {
      if (v2 === v) continue;
      const delta = v2 - v;
      const dir = delta > 0 ? "up" : "down";

      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      if (onlyAddition && delta < 0) continue;
      if (onlySubtraction && delta > 0) continue;
      if (isFirstAction && delta < 0) continue;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—Ç—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
      let brotherN = null;
      for (const n of brothersDigits) {
        if (this.brotherPairs.has(`${v}-${v2}-brother${n}`)) {
          brotherN = n;
          break;
        }
      }

      if (brotherN != null) {
        const formula = this._buildBrotherFormula(v, v2, brotherN, dir);
        if (formula) {
          brotherActions.push({
            label: `—á–µ—Ä–µ–∑ 5 (–±—Ä–∞—Ç ${brotherN})`,
            value: delta,
            isBrother: true,
            brotherN,
            formula
          });
        }
      }
    }

    // === –ü–†–û–°–¢–´–ï –®–ê–ì–ò (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç—É–ø–∏–∫–æ–≤) ===
    const L = this._L(v);
    const U = this._U(v);

    // –ü—Ä–æ—Å—Ç—ã–µ +1..+4 (—Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω–∏–µ)
    if (!onlySubtraction) {
      for (let n = 1; n <= 4; n++) {
        if (!isFirstAction || n > 0) {  // –ø–µ—Ä–≤—ã–π —à–∞–≥ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
          if (this._canPlusLower(v, n)) {
            simpleActions.push(n);
          }
        }
      }
      // +5 (–≤–µ—Ä—Ö–Ω—è—è)
      if (U === 0 && v <= 4) {
        simpleActions.push(5);
      }
    }

    // –ü—Ä–æ—Å—Ç—ã–µ -1..-4 (—Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω–∏–µ)
    if (!onlyAddition && !isFirstAction) {
      for (let n = 1; n <= 4; n++) {
        if (this._canMinusLower(v, n)) {
          simpleActions.push(-n);
        }
      }
      // -5 (–≤–µ—Ä—Ö–Ω—è—è)
      if (U === 1 && v >= 5) {
        simpleActions.push(-5);
      }
    }

    // üî• –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø: –µ—Å–ª–∏ –µ—Å—Ç—å –±—Ä–∞—Ç—Å–∫–∏–µ —à–∞–≥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö —Å 80% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    if (brotherActions.length > 0 && Math.random() < this.config.brotherPriority) {
      console.log(`üë¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±—Ä–∞—Ç—Å–∫–∏–º —à–∞–≥–∞–º –∏–∑ ${v} (–¥–æ—Å—Ç—É–ø–Ω–æ ${brotherActions.length})`);
      return brotherActions;
    }

    // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const allActions = [...brotherActions, ...simpleActions];
    console.log(`üé≤ –°–æ—Å—Ç–æ—è–Ω–∏–µ ${v}: –±—Ä–∞—Ç—Å–∫–∏—Ö=${brotherActions.length}, –ø—Ä–æ—Å—Ç—ã—Ö=${simpleActions.length}, –≤—Å–µ–≥–æ=${allActions.length}`);
    return allActions;
  }

  /**
   * –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞—Ç—Å–∫–æ–≥–æ —à–∞–≥–∞ –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
   * üî• –ë–ï–ó source (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ)
   */
  _buildBrotherFormula(v, v2, n, dir) {
    if (dir === "up") {
      return [
        { op: "+", val: 5 },
        { op: "-", val: n }
      ];
    } else {
      return [
        { op: "-", val: 5 },
        { op: "+", val: n }
      ];
    }
  }

  applyAction(currentState, action) {
    const delta = typeof action === "object" ? action.value : action;
    return currentState + delta;
  }

  formatAction(action) {
    const val = typeof action === "object" ? action.value : action;
    return val >= 0 ? `+${val}` : `${val}`;
  }

  stateToNumber(state) {
    return typeof state === 'number' ? state : 0;
  }

  /**
   * üî• –í–∞–ª–∏–¥–∞—Ü–∏—è: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ö–æ—Ç—è –±—ã 1 –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥
   */
  validateExample(example) {
    const { start, steps, answer } = example;
    const { minState, maxState } = this.config;

    if (!steps || steps.length < 1) {
      console.warn("‚ùå validateExample: –Ω–µ—Ç —à–∞–≥–æ–≤");
      return false;
    }

    let s = start;
    let hasBrother = false;

    for (const step of steps) {
      const act = step.action ?? step;
      s = this.applyAction(s, act);
      if (s < minState || s > maxState) {
        console.warn(`‚ùå validateExample: –≤—ã—Ö–æ–¥ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω [${minState}, ${maxState}]: ${s}`);
        return false;
      }
      if (typeof act === "object" && act.isBrother) hasBrother = true;
    }

    if (s !== answer) {
      console.warn(`‚ùå validateExample: –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${s} !== ${answer}`);
      return false;
    }

    if (!hasBrother) {
      console.warn("‚ùå validateExample: –Ω–µ—Ç –±—Ä–∞—Ç—Å–∫–∏—Ö —à–∞–≥–æ–≤");
      return false;
    }

    console.log(`‚úÖ validateExample: –ø—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–Ω—ã–π (${steps.length} —à–∞–≥–æ–≤, –µ—Å—Ç—å –±—Ä–∞—Ç—Å–∫–∏–µ)`);
    return true;
  }
}

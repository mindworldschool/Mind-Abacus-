// ext/core/rules/BrothersRule.js - –ü—Ä–∞–≤–∏–ª–æ "–ë—Ä–∞—Ç—å—è" (–ø–∞—Ä—ã –∫ 5)

import { BaseRule } from './BaseRule.js';

export class BrothersRule extends BaseRule {
  constructor(config = {}) {
    super();
    
    this.config = {
      brothersDigitsAllowed: config.brothersDigitsAllowed || [1, 2, 3, 4],
      onlyAddition: config.onlyAddition || false,
      onlySubtraction: config.onlySubtraction || false,
      minSteps: config.minSteps || 3,
      maxSteps: config.maxSteps || 6,
      digitCount: 1,
      brotherPriority: 0.8  // üî• 80% —à–∞–Ω—Å –≤—ã–±—Ä–∞—Ç—å –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    };
    
    console.log('üéØ BrothersRule —Å–æ–∑–¥–∞–Ω:', this.config);
  }

  get name() {
    return '–ë—Ä–∞—Ç—å—è';
  }

  generateStartState() {
    return Math.floor(Math.random() * 10);
  }

  generateStepsCount() {
    const min = this.config.minSteps;
    const max = this.config.maxSteps;
    return min + Math.floor(Math.random() * (max - min + 1));
  }

  /**
   * üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—Ç—Å–∫–∏–µ —à–∞–≥–∏
   */
  getAvailableActions(currentState, isFirstStep = false, position = 0) {
    const allActions = this._getAllPossibleActions(currentState, isFirstStep);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –±—Ä–∞—Ç—Å–∫–∏–µ –∏ –æ–±—ã—á–Ω—ã–µ
    const brotherActions = allActions.filter(a => 
      typeof a === 'object' && a.isBrother
    );
    const simpleActions = allActions.filter(a => 
      typeof a === 'number' || (typeof a === 'object' && !a.isBrother)
    );
    
    // üî• –ï—Å–ª–∏ –µ—Å—Ç—å –±—Ä–∞—Ç—Å–∫–∏–µ —à–∞–≥–∏ - –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –∏—Ö
    if (brotherActions.length > 0) {
      // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é brotherPriority –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–û–õ–¨–ö–û –±—Ä–∞—Ç—Å–∫–∏–µ
      if (Math.random() < this.config.brotherPriority) {
        console.log(`üë¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±—Ä–∞—Ç—Å–∫–∏–º —à–∞–≥–∞–º (–¥–æ—Å—Ç—É–ø–Ω–æ ${brotherActions.length})`);
        return brotherActions;
      }
    }
    
    // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    return allActions;
  }

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥: –ø–æ–ª—É—á–∏—Ç—å –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
   */
  _getAllPossibleActions(currentState, isFirstStep) {
    const actions = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞–∫–∏
    let allowedSigns = [];
    if (this.config.onlyAddition) {
      allowedSigns = [+1];
    } else if (this.config.onlySubtraction) {
      allowedSigns = [-1];
    } else {
      allowedSigns = isFirstStep ? [+1] : [+1, -1];
    }
    
    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ = 0, —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
    if (currentState === 0) {
      allowedSigns = [+1];
    }
    
    const { U, L } = this._decomposeState(currentState);
    
    for (const sign of allowedSigns) {
      if (sign > 0) {
        // === –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===
        
        // –ü—Ä–æ—Å—Ç—ã–µ +1..+4 (—Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω–∏–µ)
        for (let n = 1; n <= 4; n++) {
          if (L + n <= 4) {
            const newState = currentState + n;
            if (newState >= 0 && newState <= 9) {
              actions.push(n);
            }
          }
        }
        
        // +5 (–≤–µ—Ä—Ö–Ω—è—è)
        if (U === 0 && currentState <= 4) {
          actions.push(5);
        }
        
        // üî• –ë—Ä–∞—Ç—Å–∫–∏–µ +1..+4 —á–µ—Ä–µ–∑ +5
        for (const n of this.config.brothersDigitsAllowed) {
          if (this._canApplyBrotherStep(currentState, n, +1)) {
            actions.push(this._createBrotherAction(n, +1));
          }
        }
        
      } else {
        // === –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ===
        
        // –ü—Ä–æ—Å—Ç—ã–µ -1..-4 (—Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω–∏–µ)
        for (let n = 1; n <= 4; n++) {
          if (L >= n) {
            const newState = currentState - n;
            if (newState >= 0 && newState <= 9) {
              actions.push(-n);
            }
          }
        }
        
        // -5 (–≤–µ—Ä—Ö–Ω—è—è)
        if (U === 1 && currentState >= 5) {
          actions.push(-5);
        }
        
        // üî• –ë—Ä–∞—Ç—Å–∫–∏–µ -1..-4 —á–µ—Ä–µ–∑ -5
        for (const n of this.config.brothersDigitsAllowed) {
          if (this._canApplyBrotherStep(currentState, n, -1)) {
            actions.push(this._createBrotherAction(n, -1));
          }
        }
      }
    }
    
    return actions;
  }

  applyAction(currentState, action) {
    // –û–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if (typeof action === 'number') {
      return currentState + action;
    }
    
    // –ë—Ä–∞—Ç—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if (action.isBrother && action.formula) {
      let state = currentState;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –º–∏–∫—Ä–æ—à–∞–≥
      for (const microStep of action.formula) {
        const delta = microStep.op === '+' ? microStep.val : -microStep.val;
        state += delta;
        
        if (state < 0 || state > 9) {
          throw new Error(
            `–ë—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${state} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ [0..9]`
          );
        }
      }
      
      return state;
    }
    
    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: ${JSON.stringify(action)}`);
  }

  formatAction(action) {
    if (typeof action === 'number') {
      return action > 0 ? `+${action}` : `${action}`;
    }
    
    if (action.isBrother) {
      const val = action.value;
      return val > 0 ? `+${val}` : `${val}`;
    }
    
    return String(action);
  }

  stateToNumber(state) {
    return typeof state === 'number' ? state : 0;
  }

  /**
   * üî• –£–°–ò–õ–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
   */
  validateExample(example) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥?
    let hasBrotherStep = false;
    let usedBrotherNumbers = new Set();
    
    for (const step of example.steps) {
      const action = step.action;
      if (action && typeof action === 'object' && action.isBrother === true) {
        hasBrotherStep = true;
        if (action.brotherN) {
          usedBrotherNumbers.add(action.brotherN);
        }
      }
    }
    
    if (!hasBrotherStep) {
      console.warn('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ—Ç –±—Ä–∞—Ç—Å–∫–∏—Ö —à–∞–≥–æ–≤');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1.5: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –†–ê–ó–†–ï–®–Å–ù–ù–´–ô –±—Ä–∞—Ç?
    const hasAllowedBrother = Array.from(usedBrotherNumbers).some(n => 
      this.config.brothersDigitsAllowed.includes(n)
    );
    
    if (!hasAllowedBrother) {
      console.warn('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ—Ç –±—Ä–∞—Ç—Å–∫–∏—Ö —à–∞–≥–æ–≤ –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö', {
        –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: Array.from(usedBrotherNumbers),
        —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: this.config.brothersDigitsAllowed
      });
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è [0..9]
    for (let i = 0; i < example.steps.length; i++) {
      const state = example.steps[i].toState;
      if (state < 0 || state > 9) {
        console.warn(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ ${i + 1} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω (${state})`);
        return false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç [0..9]
    if (example.answer < 0 || example.answer > 9) {
      console.warn(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ${example.answer} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ [0..9]`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–Ω–∞–∫–∏
    if (this.config.onlyAddition || this.config.onlySubtraction) {
      for (const step of example.steps) {
        const action = step.action;
        const value = typeof action === 'number' 
          ? action 
          : (action.value || 0);
        
        if (this.config.onlyAddition && value < 0) {
          console.warn('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥ –ø—Ä–∏ onlyAddition');
          return false;
        }
        
        if (this.config.onlySubtraction && value > 0) {
          console.warn('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–≥ –ø—Ä–∏ onlySubtraction');
          return false;
        }
      }
    }
    
    console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –±—Ä–∞—Ç—å—è: [${Array.from(usedBrotherNumbers).join(', ')}]`);
    return true;
  }

  // ==================== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ====================

  _decomposeState(state) {
    const U = state >= 5 ? 1 : 0;
    const L = state % 5;
    return { U, L };
  }

  _canApplyBrotherStep(currentState, n, sign) {
    const brotherValue = 5 - n;
    const { U, L } = this._decomposeState(currentState);
    
    if (sign > 0) {
      // +N = +5 - brotherValue
      
      // –®–∞–≥ 1: –º–æ–∂–Ω–æ –ª–∏ +5?
      if (U === 1) return false;
      if (currentState > 4) return false;
      
      const afterAdd5 = currentState + 5;
      const { L: L1 } = this._decomposeState(afterAdd5);
      
      // –®–∞–≥ 2: –º–æ–∂–Ω–æ –ª–∏ -brotherValue?
      if (L1 < brotherValue) return false;
      
      const finalState = afterAdd5 - brotherValue;
      if (finalState < 0 || finalState > 9) return false;
      
      return true;
      
    } else {
      // -N = -5 + brotherValue
      
      // –®–∞–≥ 1: –º–æ–∂–Ω–æ –ª–∏ -5?
      if (U === 0) return false;
      if (currentState < 5) return false;
      
      const afterSub5 = currentState - 5;
      const { L: L1 } = this._decomposeState(afterSub5);
      
      // –®–∞–≥ 2: –º–æ–∂–Ω–æ –ª–∏ +brotherValue?
      if (L1 + brotherValue > 4) return false;
      
      const finalState = afterSub5 + brotherValue;
      if (finalState < 0 || finalState > 9) return false;
      
      return true;
    }
  }

  _createBrotherAction(n, sign) {
    const brotherValue = 5 - n;
    
    if (sign > 0) {
      // +N = +5 - brotherValue
      return {
        value: n,
        isBrother: true,
        brotherN: n,
        formula: [
          { op: '+', val: 5 },
          { op: '-', val: brotherValue }
        ]
      };
    } else {
      // -N = -5 + brotherValue
      return {
        value: -n,
        isBrother: true,
        brotherN: n,
        formula: [
          { op: '-', val: 5 },
          { op: '+', val: brotherValue }
        ]
      };
    }
  }
}

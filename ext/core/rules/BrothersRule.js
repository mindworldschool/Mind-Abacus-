// ext/core/rules/BrothersRule.js (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
//
// –ü—Ä–∞–≤–∏–ª–æ "–ë—Ä–∞—Ç—å—è" üë¨
// –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ 5 (–æ–±–º–µ–Ω –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–∏—Ö –±—É—Å–∏–Ω)
// –ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –û–ë–Ø–ó–ê–ù —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω "–±—Ä–∞—Ç—Å–∫–∏–π" –ø–µ—Ä–µ—Ö–æ–¥

import { BaseRule } from "./BaseRule.js";

export class BrothersRule extends BaseRule {
  constructor(config = {}) {
    super(config);

    // –ö–∞–∫–∏–µ –ø–∞—Ä—ã "–±—Ä–∞—Ç—å–µ–≤" —Ç—Ä–µ–Ω–∏—Ä—É–µ–º (1,2,3,4)
    const brothersDigits = Array.isArray(config.selectedDigits)
      ? config.selectedDigits.map(n => parseInt(n, 10)).filter(n => n >= 1 && n <= 4)
      : [4]; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ 4‚Üî5

    this.config = {
      name: "–ë—Ä–∞—Ç—å—è",
      minState: 0,
      maxState: 9,
      minSteps: config.minSteps ?? 3,
      maxSteps: config.maxSteps ?? 7,
      brothersDigits,
      onlyAddition: config.onlyAddition ?? false,
      onlySubtraction: config.onlySubtraction ?? false,
      digitCount: config.digitCount ?? 1,
      combineLevels: config.combineLevels ?? false,
      blocks: config.blocks ?? {},
      ...config
    };

    console.log(
      `üë¨ BrothersRule: –±—Ä–∞—Ç—å—è=[${brothersDigits.join(", ")}], ` +
      `onlyAdd=${this.config.onlyAddition}, onlySub=${this.config.onlySubtraction}`
    );

    // –¢–∞–±–ª–∏—Ü–∞ "–±—Ä–∞—Ç—Å–∫–∏—Ö" –ø–∞—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.brotherPairs = this._buildBrotherPairs(brothersDigits);
  }

  /** –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä */
  _buildBrotherPairs(digits) {
    const pairs = new Set();
    
    for (const d of digits) {
      switch (d) {
        case 4: // 4‚Üî5: –ø–µ—Ä–µ—Ö–æ–¥—ã 4‚Üí5, 5‚Üí4, 0‚Üí5, 5‚Üí0, 1‚Üí6, 6‚Üí1, ...
          for (let s = 0; s <= 9; s++) {
            // +1 —á–µ—Ä–µ–∑ (+5‚àí4): 0‚Üí1, 1‚Üí2, 2‚Üí3, 3‚Üí4
            if (s <= 3) pairs.add(`${s}-${s+1}-brother4`);
            // ‚àí1 —á–µ—Ä–µ–∑ (‚àí5+4): 9‚Üí8, 8‚Üí7, 7‚Üí6, 6‚Üí5, 5‚Üí4
            if (s >= 5) pairs.add(`${s}-${s-1}-brother4`);
          }
          break;
        case 3: // 3‚Üî8
          // +2 —á–µ—Ä–µ–∑ (+5‚àí3): 0‚Üí2, 1‚Üí3, 2‚Üí4
          for (let s = 0; s <= 2; s++) pairs.add(`${s}-${s+2}-brother3`);
          // ‚àí2 —á–µ—Ä–µ–∑ (‚àí5+3): 9‚Üí7, 8‚Üí6, 7‚Üí5
          for (let s = 7; s <= 9; s++) pairs.add(`${s}-${s-2}-brother3`);
          break;
        case 2: // 2‚Üî7
          // +3 —á–µ—Ä–µ–∑ (+5‚àí2): 0‚Üí3, 1‚Üí4
          for (let s = 0; s <= 1; s++) pairs.add(`${s}-${s+3}-brother2`);
          // ‚àí3 —á–µ—Ä–µ–∑ (‚àí5+2): 9‚Üí6, 8‚Üí5
          for (let s = 8; s <= 9; s++) pairs.add(`${s}-${s-3}-brother2`);
          break;
        case 1: // 1‚Üî6
          // +4 —á–µ—Ä–µ–∑ (+5‚àí1): 0‚Üí4
          pairs.add(`0-4-brother1`);
          // ‚àí4 —á–µ—Ä–µ–∑ (‚àí5+1): 9‚Üí5
          pairs.add(`9-5-brother1`);
          break;
      }
    }
    
    return pairs;
  }

  /** –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
  generateStartState() {
    return 0;
  }

  /** –°–ª—É—á–∞–π–Ω–∞—è –¥–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏ */
  generateStepsCount() {
    const min = this.config.minSteps;
    const max = this.config.maxSteps;
    return min + Math.floor(Math.random() * (max - min + 1));
  }

  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è */
  isValidState(v) {
    return v >= this.config.minState && v <= this.config.maxState;
  }

  /** 
   * –ö–õ–Æ–ß–ï–í–û–ô –ú–ï–¢–û–î: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ currentState
   * –ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ = –æ–±—ä–µ–∫—Ç { value: number, isBrother: boolean, formula?: [...] }
   */
  getAvailableActions(currentState, isFirstAction = false, position = 0) {
    const { onlyAddition, onlySubtraction } = this.config;
    const v = currentState;
    const actions = [];

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (0..9)
    for (let v2 = 0; v2 <= 9; v2++) {
      if (v2 === v) continue; // –Ω–µ —Å—Ç–æ–∏–º –Ω–∞ –º–µ—Å—Ç–µ

      const delta = v2 - v;
      const direction = delta > 0 ? "up" : "down";

      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–∂–∏–º—É (—Ç–æ–ª—å–∫–æ + / —Ç–æ–ª—å–∫–æ ‚àí)
      if (onlyAddition && delta < 0) continue;
      if (onlySubtraction && delta > 0) continue;
      if (isFirstAction && delta < 0) continue; // –ø–µ—Ä–≤—ã–π —à–∞–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∏–Ω—É—Å–æ–º

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ "–±—Ä–∞—Ç—Å–∫–∏–º"
      const brotherKey = `${v}-${v2}-brother`;
      let isBrotherTransition = false;
      let brotherN = null;

      for (const n of this.config.brothersDigits) {
        if (this.brotherPairs.has(`${v}-${v2}-brother${n}`)) {
          isBrotherTransition = true;
          brotherN = n;
          break;
        }
      }

      if (isBrotherTransition) {
        // –≠—Ç–æ –ë–†–ê–¢–°–ö–ò–ô —à–∞–≥ - –¢–û–õ–¨–ö–û —Ç–∞–∫–∏–µ —à–∞–≥–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ –±–ª–æ–∫–µ "–ë—Ä–∞—Ç—å—è"
        const formula = this._buildBrotherFormula(v, v2, brotherN, direction);
        if (formula) {
          actions.push({
            value: delta,
            isBrother: true,
            brotherN,
            formula
          });
        }
      }
      // ‚ùå –í –±–ª–æ–∫–µ "–ë—Ä–∞—Ç—å—è" –ù–ï–¢ –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤!
      // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –¢–û–õ–¨–ö–û –ø–µ—Ä–µ—Ö–æ–¥—ã —á–µ—Ä–µ–∑ 5 (–æ–±–º–µ–Ω –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–∏—Ö –±—É—Å–∏–Ω)
    }

    console.log(`üë¨ getAvailableActions(v=${v}): –Ω–∞—à–ª–∏ ${actions.length} –¥–µ–π—Å—Ç–≤–∏–π`);
    return actions;
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –±—Ä–∞—Ç—Å–∫–æ–≥–æ —à–∞–≥–∞
   * –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è +1 —á–µ—Ä–µ–∑ –±—Ä–∞—Ç–∞ 4: [+5, ‚àí4]
   */
  _buildBrotherFormula(v, v2, n, dir) {
    const brother = 5 - n; // –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ–µ —á–∏—Å–ª–æ
    
    if (dir === "up") {
      // +n = +5 ‚àí brother
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∑–∏–∫—É
      if (!this._canPlus5(v)) return null;
      const vMid = v + 5;
      if (!this._canMinusLower(vMid, brother)) return null;
      
      return [
        { op: "+", val: 5, source: "upper" },
        { op: "-", val: brother, source: "lower" }
      ];
    } else {
      // ‚àín = ‚àí5 + brother
      if (!this._canMinus5(v)) return null;
      const vMid = v - 5;
      if (!this._canPlusLower(vMid, brother)) return null;
      
      return [
        { op: "-", val: 5, source: "upper" },
        { op: "+", val: brother, source: "lower" }
      ];
    }
  }

  /** –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–∑–∏–∫–∞ (–∫–∞–∫ –≤ –±–ª–æ–∫–µ "–ü—Ä–æ—Å—Ç–æ"): –±–µ–∑ –æ–±–º–µ–Ω–∞ */
  isSimpleTransition(v, v2, dir) {
    if (v2 < 0 || v2 > 9) return false;
    if (dir === "up" && v2 <= v) return false;
    if (dir === "down" && v2 >= v) return false;

    const wasTop = v >= 5;
    const wasBot = wasTop ? v - 5 : v;
    const isTop = v2 >= 5;
    const isBot = isTop ? v2 - 5 : v2;

    const topChange = (isTop ? 1 : 0) - (wasTop ? 1 : 0);
    const botChange = isBot - wasBot;

    if (dir === "up") {
      if (topChange < 0 || botChange < 0) return false;
      if (topChange === 0 && botChange === 0) return false;
      return true;
    }
    if (dir === "down") {
      if (topChange > 0 || botChange > 0) return false;
      if (topChange === 0 && botChange === 0) return false;
      return true;
    }
    return false;
  }

  /** –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é */
  applyAction(currentState, action) {
    // action –º–æ–∂–µ—Ç –±—ã—Ç—å: —á–∏—Å–ª–æ, –∏–ª–∏ –æ–±—ä–µ–∫—Ç {value, isBrother, formula}
    const delta = typeof action === "object" ? action.value : action;
    return currentState + delta;
  }

  /** –§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–≥–∞ */
  formatAction(action) {
    const val = typeof action === "object" ? action.value : action;
    return val >= 0 ? `+${val}` : `${val}`;
  }

  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–∞ */
  validateExample(example) {
    const { start, steps, answer } = example;
    const { minState, maxState } = this.config;
    let state = start;

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥
    for (const step of steps) {
      const next = this.applyAction(state, step.action);
      if (next < minState || next > maxState) {
        console.error(`‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ ${next} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [${minState}..${maxState}]`);
        return false;
      }
      state = next;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (state !== answer) {
      console.error(`‚ùå –§–∏–Ω–∞–ª ${state} ‚â† answer ${answer}`);
      return false;
    }

    // 3. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–±—Ä–∞—Ç—Å–∫–∏–º"
    const hasBrother = steps.some(step => 
      typeof step.action === "object" && step.action.isBrother
    );
    
    if (!hasBrother) {
      console.error(`‚ùå –ü—Ä–∏–º–µ—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—Ä–∞—Ç—Å–∫–∏—Ö —à–∞–≥–æ–≤!`);
      return false;
    }

    return true;
  }

  // ===== –§–∏–∑–∏–∫–∞ —Å–æ—Ä–æ–±–∞–Ω–∞ (–æ–¥–Ω–∞ —Å—Ç–æ–π–∫–∞ 0..9) =====

  _U(S) { return S >= 5 ? 1 : 0; }  // –≤–µ—Ä—Ö–Ω—è—è –±—É—Å–∏–Ω–∞
  _L(S) { return S >= 5 ? S - 5 : S; }  // –Ω–∏–∂–Ω–∏–µ –±—É—Å–∏–Ω—ã

  _canPlus5(S) {
    return (S <= 4) && (S + 5 <= 9);
  }

  _canMinus5(S) {
    return (S >= 5) && (S - 5 >= 0);
  }

  _canPlusLower(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    const U = this._U(S);
    return (S + v <= 9) && ((U === 0 && L + v <= 4) || (U === 1 && (S + v) <= 9));
  }

  _canMinusLower(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    return (S - v >= 0) && (L >= v);
  }
}

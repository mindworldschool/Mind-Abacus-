// ext/core/rules/BrothersRule.js - –ü—Ä–∞–≤–∏–ª–æ "–ë—Ä–∞—Ç—å—è" —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤

import { BaseRule } from "./BaseRule.js";

export class BrothersRule extends BaseRule {
  constructor(config = {}) {
    super(config);

    // üî• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –Ω–∞–ø—Ä—è–º—É—é
    this.name = "–ë—Ä–∞—Ç—å—è";

    // –ö–∞–∫–∏–µ "–±—Ä–∞—Ç—å—è" —Ç—Ä–µ–Ω–∏—Ä—É–µ–º: [1,2,3,4]
    const brothersDigits = Array.isArray(config.selectedDigits)
      ? config.selectedDigits.map(n => parseInt(n, 10)).filter(n => n >= 1 && n <= 4)
      : [4]; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ 4

    // –ö–∞–∫–∏–µ —Ü–∏—Ñ—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ –±–ª–æ–∫–µ "–ü—Ä–æ—Å—Ç–æ" –¥–ª—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
    const simpleBlockDigits = config.blocks?.simple?.digits
      ? config.blocks.simple.digits.map(n => parseInt(n, 10)).filter(n => n >= 1 && n <= 9)
      : [1, 2, 3, 4, 5]; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1-5

    this.config = {
      ...this.config,
      name: "–ë—Ä–∞—Ç—å—è",
      minState: 0,
      maxState: 9,
      minSteps: config.minSteps ?? 3,
      maxSteps: config.maxSteps ?? 7,
      brothersDigits,
      simpleBlockDigits,
      onlyAddition: config.onlyAddition ?? false,
      onlySubtraction: config.onlySubtraction ?? false,
      digitCount: config.digitCount ?? 1,
      combineLevels: config.combineLevels ?? false,
      brotherPriority: 0.5,  // 50% –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±—Ä–∞—Ç—Å–∫–∏–º —à–∞–≥–∞–º
      blocks: config.blocks ?? {}
    };

    console.log(
      `üë¨ BrothersRule: –±—Ä–∞—Ç—å—è=[${brothersDigits.join(", ")}], ` +
      `–ø—Ä–æ—Å—Ç—ã–µ=[${simpleBlockDigits.join(", ")}], ` +
      `onlyAdd=${this.config.onlyAddition}, onlySub=${this.config.onlySubtraction}`
    );

    // –¢–∞–±–ª–∏—Ü–∞ "–±—Ä–∞—Ç—Å–∫–∏—Ö" –ø–∞—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.brotherPairs = this._buildBrotherPairs(brothersDigits);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä
   * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ "–±—Ä–∞—Ç–∞ N" —Å–æ–∑–¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —á–µ—Ä–µ–∑ 5
   */
  _buildBrotherPairs(digits) {
    const pairs = new Set();
    
    for (const n of digits) {
      const brother = 5 - n; // –±—Ä–∞—Ç –¥–ª—è n
      
      // –ü–µ—Ä–µ—Ö–æ–¥—ã "–≤–≤–µ—Ä—Ö": v ‚Üí v+n —á–µ—Ä–µ–∑ +5-brother
      for (let v = 0; v <= 9; v++) {
        const vNext = v + n;
        if (vNext >= 0 && vNext <= 9) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ 5
          const U = v >= 5 ? 1 : 0;
          const L = v >= 5 ? v - 5 : v;
          
          // +n —á–µ—Ä–µ–∑ +5-brother –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å–ª–∏:
          // - –≤–µ—Ä—Ö–Ω—è—è –±—É—Å–∏–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ (U=0)
          // - –ø–æ—Å–ª–µ +5 –º–æ–∂–µ–º —É–±—Ä–∞—Ç—å brother –Ω–∏–∂–Ω–∏—Ö
          if (U === 0 && L + 5 >= brother) {
            pairs.add(`${v}-${vNext}-brother${n}`);
          }
        }
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥—ã "–≤–Ω–∏–∑": v ‚Üí v-n —á–µ—Ä–µ–∑ -5+brother
      for (let v = 0; v <= 9; v++) {
        const vNext = v - n;
        if (vNext >= 0 && vNext <= 9) {
          const U = v >= 5 ? 1 : 0;
          const L = v >= 5 ? v - 5 : v;
          
          // -n —á–µ—Ä–µ–∑ -5+brother –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å–ª–∏:
          // - –≤–µ—Ä—Ö–Ω—è—è –±—É—Å–∏–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ (U=1)
          // - –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å brother –Ω–∏–∂–Ω–∏—Ö –ø–æ—Å–ª–µ -5
          if (U === 1 && L + brother <= 4) {
            pairs.add(`${v}-${vNext}-brother${n}`);
          }
        }
      }
    }
    
    console.log(`üìä –°–æ–∑–¥–∞–Ω–æ ${pairs.size} –±—Ä–∞—Ç—Å–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤`);
    return pairs;
  }

  // ===== –ü–æ–º–æ—â–Ω–∏–∫–∏ –ø–æ —Ñ–∏–∑–∏–∫–µ –æ–¥–Ω–æ–π —Å—Ç–æ–π–∫–∏ S‚àà[0..9] =====
  _U(S) { return S >= 5 ? 1 : 0; }
  _L(S) { return S >= 5 ? S - 5 : S; }

  _canPlusLower(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    const U = this._U(S);
    if (U === 0) {
      return L + v <= 4; // –Ω–∏–∂–Ω–∏–µ –±—É—Å–∏–Ω—ã –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ 4
    } else {
      return S + v <= 9; // –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ 9
    }
  }

  _canMinusLower(S, v) {
    if (v < 1 || v > 4) return false;
    const L = this._L(S);
    return L >= v; // –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∏–∂–Ω–∏—Ö –±—É—Å–∏–Ω
  }

  /** –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */
  generateStartState() {
    return 0;
  }

  /** –°–ª—É—á–∞–π–Ω–∞—è –¥–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏ */
  generateStepsCount() {
    const min = this.config.minSteps;
    const max = this.config.maxSteps;
    return min + Math.floor(Math.random() * (max - min + 1));
  }

  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è */
  isValidState(v) {
    return v >= this.config.minState && v <= this.config.maxState;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ò –±—Ä–∞—Ç—Å–∫–∏–µ, –ò –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏
   * 
   * –õ–û–ì–ò–ö–ê "–¢–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω–∏–µ/–≤—ã—á–∏—Ç–∞–Ω–∏–µ":
   * - –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫ –±—Ä–∞—Ç—Å–∫–∏–º —à–∞–≥–∞–º (–≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä—É–µ–º–æ–π —Ü–∏—Ñ—Ä–µ)
   * - –ü—Ä–æ—Å—Ç—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –í–°–ï–ì–î–ê –¥–æ—Å—Ç—É–ø–Ω—ã —Å –ª—é–±—ã–º –∑–Ω–∞–∫–æ–º
   * 
   * –õ–û–ì–ò–ö–ê "–ò–∑–±–µ–∂–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–æ–≤":
   * - –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —á–∏—Å–ª–æ –ø–æ–¥—Ä—è–¥ (–æ—Å–æ–±–µ–Ω–Ω–æ —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º –∑–Ω–∞–∫–æ–º)
   * - –ú–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥—Ä—É–≥–∏–µ —á–∏—Å–ª–∞
   * 
   * @param {number} currentState - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (0-9)
   * @param {boolean} isFirstAction - –≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥?
   * @param {Array} previousSteps - –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤
   */
  getAvailableActions(currentState, isFirstAction = false, previousSteps = []) {
    const { onlyAddition, onlySubtraction, brothersDigits, simpleBlockDigits } = this.config;
    const v = currentState;
    const brotherActions = [];
    const simpleActions = [];

    // üî• –ù–û–í–û–ï: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —à–∞–≥–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
    const lastStep = previousSteps.length > 0 ? 
      previousSteps[previousSteps.length - 1] : null;
    const prevStep = previousSteps.length > 1 ? 
      previousSteps[previousSteps.length - 2] : null;
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —à–∞–≥–æ–≤
    const getStepValue = (step) => {
      if (!step) return null;
      const action = step.action ?? step;
      if (typeof action === 'object') {
        return action.value; // –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥ –∏–ª–∏ –æ–±—ä–µ–∫—Ç
      }
      return action; // –ø—Ä–æ—Å—Ç–æ–π —á–∏—Å–ª–æ–≤–æ–π —à–∞–≥
    };
    
    const lastValue = getStepValue(lastStep);
    const prevValue = getStepValue(prevStep);
    
    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏: –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ?
    const canUseNumber = (num) => {
      // –ü–µ—Ä–≤—ã–π —à–∞–≥ - –º–æ–∂–Ω–æ –≤—Å—ë
      if (previousSteps.length === 0) return true;
      
      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¢–û–ß–ù–û —Ç–æ –∂–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ä—è–¥
      if (lastValue === num) {
        console.log(`üö´ –§–∏–ª—å—Ç—Ä –ø–æ–≤—Ç–æ—Ä–æ–≤: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${num} (–±—ã–ª–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ)`);
        return false;
      }
      
      // –ù–µ –¥–µ–ª–∞–µ–º +N —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ -N (–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
      if (lastValue === -num) {
        console.log(`üö´ –§–∏–ª—å—Ç—Ä –ø–æ–≤—Ç–æ—Ä–æ–≤: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${num} (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ ${lastValue} –±—ã–ª–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ)`);
        return false;
      }
      
      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –æ–¥–Ω–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ —á–∏—Å–ª–æ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥
      // –ù–∞–ø—Ä–∏–º–µ—Ä: +4, -4, +4 ‚Üê —Ç—Ä–µ—Ç–∏–π —Ä–∞–∑ 4 –Ω–µ–ª—å–∑—è
      if (prevValue !== null) {
        const absLast = Math.abs(lastValue);
        const absPrev = Math.abs(prevValue);
        const absNum = Math.abs(num);
        
        if (absLast === absNum && absPrev === absNum) {
          console.log(`üö´ –§–∏–ª—å—Ç—Ä –ø–æ–≤—Ç–æ—Ä–æ–≤: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ${num} (–∞–±—Å. –∑–Ω–∞—á–µ–Ω–∏–µ ${absNum} —É–∂–µ –±—ã–ª–æ 2 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥)`);
          return false;
        }
      }
      
      return true;
    };

    // === –ë–†–ê–¢–°–ö–ò–ï –®–ê–ì–ò (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–Ω–∞–∫–∞) ===
    for (let v2 = 0; v2 <= 9; v2++) {
      if (v2 === v) continue;
      const delta = v2 - v;
      const dir = delta > 0 ? "up" : "down";

      // üî• –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–Ø–Æ–¢–°–Ø –¢–û–õ–¨–ö–û –ö –ë–†–ê–¢–°–ö–ò–ú –®–ê–ì–ê–ú!
      if (onlyAddition && delta < 0) continue;
      if (onlySubtraction && delta > 0) continue;
      if (isFirstAction && delta < 0) continue;
      
      // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—ã –¥–ª—è –ë–†–ê–¢–°–ö–ò–• —à–∞–≥–æ–≤
      if (!canUseNumber(delta)) continue;

      // –ò—â–µ–º, –µ—Å—Ç—å –ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –±—Ä–∞—Ç—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞
      let brotherN = null;
      for (const n of brothersDigits) {
        if (this.brotherPairs.has(`${v}-${v2}-brother${n}`)) {
          brotherN = n;
          break;
        }
      }

      if (brotherN != null) {
        const formula = this._buildBrotherFormula(v, v2, brotherN, dir);
        if (formula) {
          brotherActions.push({
            label: `—á–µ—Ä–µ–∑ 5 (–±—Ä–∞—Ç ${brotherN})`,
            value: delta,
            isBrother: true,
            brotherN: brotherN,
            formula
          });
        }
      }
    }

    // === –ü–†–û–°–¢–´–ï –®–ê–ì–ò (–ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–Ω–∞–∫–∞ - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ!) ===
    const L = this._L(v);
    const U = this._U(v);

    // ‚úÖ –°–õ–û–ñ–ï–ù–ò–ï: –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
    for (const digit of simpleBlockDigits) {
      if (isFirstAction && digit <= 0) continue;
      
      // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—ã –¥–ª—è –ü–†–û–°–¢–´–• —à–∞–≥–æ–≤
      if (!canUseNumber(digit)) continue;
      
      // –¶–∏—Ñ—Ä—ã 1-4: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∂–Ω–∏–µ –±—É—Å–∏–Ω—ã
      if (digit >= 1 && digit <= 4) {
        if (this._canPlusLower(v, digit)) {
          simpleActions.push(digit);
        }
      }
      // –¶–∏—Ñ—Ä–∞ 5: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É
      else if (digit === 5) {
        if (U === 0 && v <= 4) {
          simpleActions.push(5);
        }
      }
      // –¶–∏—Ñ—Ä—ã 6-9: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤–µ—Ä—Ö–Ω–µ–π + –Ω–∏–∂–Ω–∏—Ö
      else if (digit >= 6 && digit <= 9) {
        const lower = digit - 5;
        if (U === 0 && this._canPlusLower(v, lower) && v + digit <= 9) {
          simpleActions.push(digit);
        }
      }
    }

    // ‚úÖ –í–´–ß–ò–¢–ê–ù–ò–ï: –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
    if (!isFirstAction) {
      for (const digit of simpleBlockDigits) {
        // üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—ã –¥–ª—è –ü–†–û–°–¢–´–• —à–∞–≥–æ–≤ –≤—ã—á–∏—Ç–∞–Ω–∏—è
        if (!canUseNumber(-digit)) continue;
        
        // –¶–∏—Ñ—Ä—ã 1-4: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∂–Ω–∏–µ –±—É—Å–∏–Ω—ã
        if (digit >= 1 && digit <= 4) {
          if (this._canMinusLower(v, digit)) {
            simpleActions.push(-digit);
          }
        }
        // –¶–∏—Ñ—Ä–∞ 5: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É
        else if (digit === 5) {
          if (U === 1 && v >= 5) {
            simpleActions.push(-5);
          }
        }
        // –¶–∏—Ñ—Ä—ã 6-9: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤–µ—Ä—Ö–Ω–µ–π + –Ω–∏–∂–Ω–∏—Ö
        else if (digit >= 6 && digit <= 9) {
          const lower = digit - 5;
          if (U === 1 && this._canMinusLower(v, lower) && v - digit >= 0) {
            simpleActions.push(-digit);
          }
        }
      }
    }

    // üî• –ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç
    if (brotherActions.length > 0 && Math.random() < this.config.brotherPriority) {
      console.log(`üë¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±—Ä–∞—Ç—Å–∫–∏–º —à–∞–≥–∞–º –∏–∑ ${v} (–¥–æ—Å—Ç—É–ø–Ω–æ ${brotherActions.length})`);
      return brotherActions;
    }

    const allActions = [...brotherActions, ...simpleActions];
    console.log(`üé≤ –°–æ—Å—Ç–æ—è–Ω–∏–µ ${v}: –±—Ä–∞—Ç—Å–∫–∏—Ö=${brotherActions.length}, –ø—Ä–æ—Å—Ç—ã—Ö=${simpleActions.length}, –≤—Å–µ–≥–æ=${allActions.length}`);
    return allActions;
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –±—Ä–∞—Ç—Å–∫–æ–≥–æ —à–∞–≥–∞
   */
  _buildBrotherFormula(from, to, brotherN, direction) {
    const delta = to - from;
    const brother = 5 - brotherN;
    
    if (direction === "up") {
      // +n —á–µ—Ä–µ–∑ +5-brother
      return [
        { op: "+", val: 5 },
        { op: "-", val: brother }
      ];
    } else {
      // -n —á–µ—Ä–µ–∑ -5+brother
      return [
        { op: "-", val: 5 },
        { op: "+", val: brother }
      ];
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
   */
  applyAction(currentState, action) {
    const delta = typeof action === "object" ? action.value : action;
    return currentState + delta;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatAction(action) {
    const val = typeof action === "object" ? action.value : action;
    return val >= 0 ? `+${val}` : `${val}`;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —á–∏—Å–ª–æ
   */
  stateToNumber(state) {
    return typeof state === 'number' ? state : 0;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ö–æ—Ç—è –±—ã 1 –±—Ä–∞—Ç—Å–∫–∏–π —à–∞–≥
   */
  validateExample(example) {
    const { start, steps, answer } = example;
    const { minState, maxState } = this.config;

    if (!steps || steps.length < 1) {
      console.warn("‚ùå validateExample: –Ω–µ—Ç —à–∞–≥–æ–≤");
      return false;
    }

    let s = start;
    let hasBrother = false;

    for (const step of steps) {
      const act = step.action ?? step;
      s = this.applyAction(s, act);
      if (s < minState || s > maxState) {
        console.warn(`‚ùå validateExample: –≤—ã—Ö–æ–¥ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω [${minState}, ${maxState}]: ${s}`);
        return false;
      }
      if (typeof act === "object" && act.isBrother) hasBrother = true;
    }

    if (s !== answer) {
      console.warn(`‚ùå validateExample: –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${s} !== ${answer}`);
      return false;
    }

    if (!hasBrother) {
      console.warn("‚ùå validateExample: –Ω–µ—Ç –±—Ä–∞—Ç—Å–∫–∏—Ö —à–∞–≥–æ–≤");
      return false;
    }

    console.log(`‚úÖ validateExample: –ø—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–Ω—ã–π (${steps.length} —à–∞–≥–æ–≤, –µ—Å—Ç—å –±—Ä–∞—Ç—Å–∫–∏–µ)`);
    return true;
  }
}

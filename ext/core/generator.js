// ext/core/generator.js
//
// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞.
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
//  - —á—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ UI,
//  - –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª,
//  - –≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞,
//  - –≤—ã–∑–æ–≤ ExampleGenerator –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥ trainer_logic.js.
//
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
//  - UnifiedSimpleRule (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ "–ü—Ä–æ—Å—Ç–æ"),
//  - ExampleGenerator (—Å—Ç—Ä–æ–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∞–≥–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª—É).

import { UnifiedSimpleRule } from "./rules/UnifiedSimpleRule.js";
import { ExampleGenerator } from "./ExampleGenerator.js";

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –≤–Ω–µ—à–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ trainer_logic.js –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.
 * @param {Object} settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–∏—à–µ–¥—à–∏–µ –∏–∑ UI
 * @returns {Object} { start:number, steps:string[], answer:number }
 *          –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π trainer_logic.js —É–∂–µ —É–º–µ–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
 */
export function generateExample(settings = {}) {
  console.log("üß† [generator] –≤—Ö–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", settings);

  // 1. –°—á–∏—Ç—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const digitCount = parseInt(settings.digits, 10) || 1; // —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å: 1..9
  const combineLevels = settings.combineLevels === true; // true -> –º–Ω–æ–≥–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–π —à–∞–≥ —Å—Ä–∞–∑—É –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º
  const actionsCfg = settings.actions || {};
  const blocks = settings.blocks || {};

  // 2. –®–∞–≥–∏ (–∫–æ–ª-–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ–¥–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ)
  //
  // –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω "–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π" —Ä–µ–∂–∏–º (actions.infinite === true),
  // –º—ã –Ω–µ –∂—ë—Å—Ç–∫–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–ª–∏–Ω—É; –∏–Ω–∞—á–µ count —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–∏–Ω/–º–∞–∫—Å.
  const minStepsRaw = actionsCfg.infinite
    ? 2
    : (actionsCfg.min ?? actionsCfg.count ?? 2);
  const maxStepsRaw = actionsCfg.infinite
    ? 12
    : (actionsCfg.max ?? actionsCfg.count ?? 4);

  // –î–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –±–µ–∑ combineLevels (—Ç–æ –µ—Å—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥ –≥–µ–Ω–µ—Ä–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ,
  // –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—â–∏–π —à–∞–≥), –¥–ª–∏–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ —Å–ª–æ–∂–Ω–µ–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å,
  // –ø–æ—ç—Ç–æ–º—É –º—ã –º—è–≥–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞–ª.
  let minSteps = minStepsRaw;
  let maxSteps = maxStepsRaw;
  if (digitCount > 1 && !combineLevels) {
    minSteps = Math.min(minStepsRaw, 4);
    maxSteps = Math.min(maxStepsRaw, 4);
  }

  // 3. –ë–ª–æ–∫ "–ü—Ä–æ—Å—Ç–æ" ‚Äî –∫–∞–∫–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–µ–ª—å—Ç—ã (+N / -N) —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ä–µ–±—ë–Ω–∫—É
  //
  // –≠—Ç–æ –ö–†–ò–¢–ò–ß–ï–°–ö–û.
  //
  // –†–∞–Ω—å—à–µ –º—ã –¥–µ–ª–∞–ª–∏ "–º–∞–≥–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ" –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä:
  //   7 -> –¥–æ–±–∞–≤—å 5 –∏ 2, 9 -> –¥–æ–±–∞–≤—å 5 –∏ 4, ...
  // –ø–æ—Ç–æ–º—É —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —É–º–µ–ª —Å—Ä–∞–∑—É –¥–∞–≤–∞—Ç—å +7.
  //
  // –¢–ï–ü–ï–†–¨ –≠–¢–û –ù–ï –ù–£–ñ–ù–û.
  //
  // –ü–æ—Å–ª–µ –Ω–∞—à–µ–π –ø—Ä–∞–≤–∫–∏ UnifiedSimpleRule.getAvailableActions():
  // - —à–∞–≥–∏ —Ç–∏–ø–∞ +6, +7, +8, +9 –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –æ–¥–∏–Ω –∂–µ—Å—Ç,
  //   –Ω–æ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –¥–µ–ª—å—Ç—ã –≤–æ–æ–±—â–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
  //
  // –ó–Ω–∞—á–∏—Ç:
  //   selectedDigits = –†–û–í–ù–û —Ç–µ —Ü–∏—Ñ—Ä—ã, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–ª–æ–∫–µ ¬´–ü—Ä–æ—Å—Ç–æ¬ª.
  //
  // –ù–∏–∫–∞–∫–æ–≥–æ –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏—è 5+2 —Ä–∞–¥–∏ —Å–µ–º—ë—Ä–∫–∏. –ï—Å–ª–∏ —Å–µ–º—ë—Ä–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –Ω–µ —Ç—Ä–µ–Ω–∏—Ä—É–µ–º 7.
  //
  const originalDigits = Array.isArray(blocks?.simple?.digits)
    ? blocks.simple.digits
        .map(n => parseInt(n, 10))
        .filter(n => !Number.isNaN(n))
    : [1, 2, 3, 4];

  // –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ –≤—Å—è–∫–∏–π.
  const selectedDigits = Array.from(new Set(originalDigits)).sort((a, b) => a - b);

  // 4. includeFive —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º–æ–º "–ü—Ä–æ—Å—Ç–æ 4" vs "–ü—Ä–æ—Å—Ç–æ 5"
  //
  // –°–º—ã—Å–ª:
  //  - –ï—Å–ª–∏ includeFive=false, —Ç–æ –≤–µ—Ä—Ö–Ω—è—è –∫–æ—Å—Ç–æ—á–∫–∞ "5" –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞.
  //    –ó–Ω–∞—á–∏—Ç –∏–∑ getAvailableActions() –±—É–¥—É—Ç –≤—ã—Ä–µ–∑–∞–Ω—ã –ª—é–±—ã–µ —à–∞–≥–∏ —Å –º–æ–¥—É–ª–µ–º 5.
  //
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞:
  //   1) blocks.simple.includeFive
  //   2) settings.includeFive
  //   3) —Å–∞–º —Ñ–∞–∫—Ç, —á—Ç–æ —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä –µ—Å—Ç—å 5
  //
  const includeFive =
    (blocks?.simple?.includeFive ??
      settings.includeFive ??
      selectedDigits.includes(5)) === true;

  // 5. –¢–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω–∏–µ / —Ç–æ–ª—å–∫–æ –≤—ã—á–∏—Ç–∞–Ω–∏–µ
  const onlyAddition =
    (blocks?.simple?.onlyAddition ?? settings.onlyAddition ?? false) === true;

  const onlySubtraction =
    (blocks?.simple?.onlySubtraction ??
      settings.onlySubtraction ??
      false) === true;

  // 6. –°–ø–µ—Ü-–±–ª–æ–∫–∏ –º–µ—Ç–æ–¥–∏–∫–∏ (–ø–æ–∑–∂–µ –±—É–¥—É—Ç —Å–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞)
  const brothersActive = blocks?.brothers?.active === true;
  const friendsActive = blocks?.friends?.active === true;
  const mixActive = blocks?.mix?.active === true;

  // 7. –°–æ–±–∏—Ä–∞–µ–º ruleConfig
  //
  // –≠—Ç–æ —Ç–æ, —á—Ç–æ —É–π–¥—ë—Ç –≤ UnifiedSimpleRule.
  // UnifiedSimpleRule —Ç–µ–ø–µ—Ä—å:
  //  - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç selectedDigits –∫–∞–∫ "—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–µ–ª—å—Ç—ã"
  //    (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ [1,2,7,9], —Ç–æ —à–∞–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å +1, -2, +7, -9 –∏ —Ç.–¥., –µ—Å–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç–∏–∂–∏–º–æ),
  //  - —É—á–∏—Ç—ã–≤–∞–µ—Ç includeFive (–º–æ–∂–Ω–æ –ª–∏ –≤–æ–æ–±—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—è—Ç—ë—Ä–∫—É),
  //  - —É—á–∏—Ç—ã–≤–∞–µ—Ç onlyAddition / onlySubtraction,
  //  - –∑–Ω–∞–µ—Ç digitCount –∏ combineLevels,
  //  - –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ "–ø–µ—Ä–≤—ã–π —à–∞–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∏–Ω—É—Å–æ–º".
  //
  const ruleConfig = {
    // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–±–∞–∫—É—Å–∞ / –ø—Ä–∏–º–µ—Ä–∞
    digitCount: digitCount,          // 1..9
    combineLevels: combineLevels,    // true = –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–≥ –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º —Å—Ä–∞–∑—É

    // –¥–ª–∏–Ω–∞ –ø—Ä–∏–º–µ—Ä–∞
    minSteps: minSteps,
    maxSteps: maxSteps,

    // —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã —à–∞–≥–æ–≤ –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞
    selectedDigits: selectedDigits,

    // —Ä–µ–∂–∏–º –ü—Ä–æ—Å—Ç–æ 4 / –ü—Ä–æ—Å—Ç–æ 5
    includeFive: includeFive,
    hasFive: includeFive, // –∞–ª–∏–∞—Å –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏

    // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    onlyAddition: onlyAddition,
    onlySubtraction: onlySubtraction,

    // "–±–ª–æ–∫–∏ –º–µ—Ç–æ–¥–∏–∫–∏" (–ø–æ–∑–∂–µ –±—É–¥–µ–º —Ä–∞–∑–≤–µ—Ç–≤–ª—è—Ç—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞)
    brothersActive: brothersActive,
    friendsActive: friendsActive,
    mixActive: mixActive,

    // –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    firstActionMustBePositive: true,

    // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã (–µ—â—ë –Ω–µ –≤–∫–ª—é—á–∞–µ–º)
    requireBlock: false,
    blockPlacement: "auto",

    // –∏—Å—Ö–æ–¥–Ω—ã–µ –±–ª–æ–∫–∏ —Ü–µ–ª–∏–∫–æ–º, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª–æ –º–æ–≥–ª–æ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    blocks: blocks
  };

  console.log(
    "üß© [generator] ruleConfig:",
    JSON.stringify(
      {
        digitCount: ruleConfig.digitCount,
        combineLevels: ruleConfig.combineLevels,
        minSteps: ruleConfig.minSteps,
        maxSteps: ruleConfig.maxSteps,
        selectedDigits: ruleConfig.selectedDigits,
        includeFive: ruleConfig.includeFive,
        onlyAddition: ruleConfig.onlyAddition,
        onlySubtraction: ruleConfig.onlySubtraction,
        brothersActive: ruleConfig.brothersActive,
        friendsActive: ruleConfig.friendsActive,
        mixActive: ruleConfig.mixActive
      },
      null,
      2
    )
  );

  // 8. –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª–∞
  //
  // –°–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ UnifiedSimpleRule.
  // –í –±—É–¥—É—â–µ–º:
  //  - brothersActive ‚Üí BrothersRule
  //  - friendsActive  ‚Üí FriendsRule
  //  - mixActive      ‚Üí —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
  //
  const rule = new UnifiedSimpleRule(ruleConfig);

  // 9. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ ExampleGenerator
  const gen = new ExampleGenerator(rule);
  const rawExample = gen.generate();

  // 10. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–∞–∂—ë—Ä
  const formatted = gen.toTrainerFormat(rawExample);

  console.log(
    "‚úÖ [generator] –ø—Ä–∏–º–µ—Ä –≥–æ—Ç–æ–≤:",
    JSON.stringify(formatted, null, 2)
  );

  return formatted;
}

// ext/core/generator.js
//
// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞.
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
//  - —á—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ UI,
//  - –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª–∞,
//  - –≤—ã–∑–æ–≤ ExampleGenerator,
//  - –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞.
//
// –†–∞–±–æ—Ç–∞–µ—Ç —Å–µ–π—á–∞—Å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ü—Ä–æ—Å—Ç–æ":
//   - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –≤–∏–¥–∞ +3, +1, -4 ...
//   - –±–µ–∑ "–±—Ä–∞—Ç—å–µ–≤", "–¥—Ä—É–∑–µ–π", "—á–µ—Ä–µ–∑ 5"
//   - –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞ –º–µ–∂–¥—É —Å—Ç–æ–ª–±—Ü–∞–º–∏ (–∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü –∂–∏–≤—ë—Ç —Å–∞–º –ø–æ —Å–µ–±–µ)
//
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
//  - UnifiedSimpleRule ‚Äî –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —à–∞–≥–∏ (+N / -N), —Ñ–∏–∑–∏–∫—É –∞–±–∞–∫—É—Å–∞,
//    —É—á–∏—Ç—ã–≤–∞–µ—Ç includeFive (–ü—Ä–æ—Å—Ç–æ 4 / –ü—Ä–æ—Å—Ç–æ 5), –∑–∞–ø—Ä–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –º–∏–Ω—É—Å–∞ –∏ —Ç.–¥.
//  - ExampleGenerator ‚Äî —Å—Ç—Ä–æ–∏—Ç —Å–∞–º—É —Ü–µ–ø–æ—á–∫—É —à–∞–≥–æ–≤, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–∞–≤–∏–ª–æ

import { UnifiedSimpleRule } from "./rules/UnifiedSimpleRule.js";
import { ExampleGenerator } from "./ExampleGenerator.js";
import { BrothersRule } from "./rules/BrothersRule.js";

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –≤–Ω–µ—à–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ trainer_logic.js –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.
 *
 * @param {Object} settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
 * @returns {{ start:number, steps:string[], answer:number }}
 *          –ü—Ä–∏–º–µ—Ä –≤ –≥–æ—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞.
 */
export function generateExample(settings = {}) {
  console.log("üß† [generator] –≤—Ö–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", settings);

  //
  // 1. –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å
  //
  // digits = —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –∞–±–∞–∫—É—Å–∞ –º—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
  // –î–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ "–ü—Ä–æ—Å—Ç–æ" —ç—Ç–æ 1.
  //
  const digitCountRaw = parseInt(settings.digits, 10);
  const digitCount =
    Number.isFinite(digitCountRaw) && digitCountRaw > 0
      ? digitCountRaw
      : 1;

  // combineLevels:
  // true  ‚Üí –æ–¥–∏–Ω —à–∞–≥ –¥–≤–∏–≥–∞–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä—è–¥—ã —Å—Ä–∞–∑—É (–æ–±—â–∏–π –≤–µ–∫—Ç–æ—Ä),
  // false ‚Üí –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ (–∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å–∞–º –ø–æ —Å–µ–±–µ).
  const combineLevels = settings.combineLevels === true;

  //
  // 2. –î–ª–∏–Ω–∞ –ø—Ä–∏–º–µ—Ä–∞ (—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
  //
  // settings.actions —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤:
  //   - count: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞
  //   - min / max: –¥–∏–∞–ø–∞–∑–æ–Ω
  //   - infinite: "–∏–≥—Ä–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ", —Ç–æ–≥–¥–∞ –º—ã –ø—Ä–æ—Å—Ç–æ –±–µ—Ä—ë–º —Ä–∞–∑—É–º–Ω—ã–π –∫–æ—Ä–∏–¥–æ—Ä
  //
  const actionsCfg = settings.actions || {};
  const minStepsRaw = actionsCfg.infinite
    ? 2
    : (actionsCfg.min ?? actionsCfg.count ?? 2);
  const maxStepsRaw = actionsCfg.infinite
    ? 12
    : (actionsCfg.max ?? actionsCfg.count ?? 4);

  let minSteps = minStepsRaw;
  let maxSteps = maxStepsRaw;

  // –ï—Å–ª–∏ –º–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–æ–≤ –∏ —ç—Ç–æ –Ω–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –∂–µ—Å—Ç,
  // —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ç—è–∂–µ–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ —Ç—É–ø–∏–∫–∞ ‚Üí –º—è–≥–∫–æ —Ä–µ–∂–µ–º.
  if (digitCount > 1 && !combineLevels) {
    minSteps = Math.min(minSteps, 4);
    maxSteps = Math.min(maxSteps, 4);
  }

  //
  // 3. –ö–∞–∫–∏–µ —Ü–∏—Ñ—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ä–µ–±—ë–Ω–∫—É –≤ –±–ª–æ–∫–µ "–ü—Ä–æ—Å—Ç–æ"
  //
  // –≠—Ç–æ –ö–õ–Æ–ß–ï–í–û.
  //
  // –ú—ã –±–æ–ª—å—à–µ –ù–ï —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ "7 = 5+2".
  // –°–µ–π—á–∞—Å –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø—Ä–∏–º–µ—Ä–µ ‚Äî —ç—Ç–æ —Å—Ä–∞–∑—É ¬±d,
  // –∏ d –¥–æ–ª–∂–µ–Ω –í –ü–†–Ø–ú–£–Æ –≤—Ö–æ–¥–∏—Ç—å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
  //
  // –ü—Ä–∏–º–µ—Ä—ã:
  //   digits=[3]          ‚Üí –º–æ–∂–Ω–æ +3, -3
  //   digits=[2,5,7]      ‚Üí –º–æ–∂–Ω–æ +2,-2,+5,-5,+7,-7
  //   digits=[1..9]       ‚Üí –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞
  //
  const blocks = settings.blocks || {};
  const originalDigits = Array.isArray(blocks?.simple?.digits)
    ? blocks.simple.digits
        .map(n => parseInt(n, 10))
        .filter(n => Number.isFinite(n))
    : [1, 2, 3, 4]; // –¥–µ—Ñ–æ–ª—Ç –µ—Å–ª–∏ UI –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –Ω–∏—á–µ–≥–æ

  // –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  const selectedDigits = Array.from(new Set(originalDigits)).sort(
    (a, b) => a - b
  );

  //
  // 4. includeFive ‚Äî –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π —Ñ–ª–∞–≥.
  //
  // –ï—Å–ª–∏ includeFive === false:
  //   - –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É,
  //   - —Å—Ç–æ–π–∫–∞ –∂–∏–≤—ë—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0..4,
  //   - –º—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–ª—å—Ç—É ¬±5.
  //
  // –ï—Å–ª–∏ includeFive === true:
  //   - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é –±—É—Å–∏–Ω—É,
  //   - —Å—Ç–æ–π–∫–∞ –∂–∏–≤—ë—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0..9,
  //   - –≤–æ–∑–º–æ–∂–Ω—ã —Ö–æ–¥—ã —Å –≤–µ—Ä—Ö–Ω–µ–π.
  //
  const includeFive =
    (blocks?.simple?.includeFive ??
      settings.includeFive ??
      selectedDigits.includes(5)) === true;

  //
  // 5. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
  //    onlyAddition = "—Ç—Ä–µ–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω–∏–µ"
  //    onlySubtraction = "—Ç—Ä–µ–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—á–∏—Ç–∞–Ω–∏–µ"
  //
  const onlyAddition =
    (blocks?.simple?.onlyAddition ??
      settings.onlyAddition ??
      false) === true;
  const onlySubtraction =
    (blocks?.simple?.onlySubtraction ??
      settings.onlySubtraction ??
      false) === true;

  //
  // 6. –§–ª–∞–≥–∏ –±—É–¥—É—â–∏—Ö –º–µ—Ç–æ–¥–∏–∫ (–æ–Ω–∏ –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Ç –ø—Ä–∞–≤–∏–ª–æ,
  // –Ω–æ –º—ã –∏—Ö –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥).
  //
  const brothersActive = blocks?.brothers?.active === true;
  const friendsActive = blocks?.friends?.active === true;
  const mixActive = blocks?.mix?.active === true;

  //
  // 7. –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è UnifiedSimpleRule.
  //
  // UnifiedSimpleRule:
  //   - —Å—á–∏—Ç–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–æ–¥—ã —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (getAvailableActions),
  //     —Å —É—á—ë—Ç–æ–º —Ñ–∏–∑–∏–∫–∏ —Å—Ç–æ–µ–∫ –∏ includeFive;
  //   - —Å–ª–µ–¥–∏—Ç, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–π –∂–µ—Å—Ç
  //     (–Ω–∞–ø—Ä–∏–º–µ—Ä +4 –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è 4 –±–µ–∑ –≤–µ—Ä—Ö–Ω–µ–π –±—É—Å–∏–Ω—ã);
  //   - –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å –º–∏–Ω—É—Å–æ–º;
  //   - –Ω–µ –¥–∞—ë—Ç –≤—ã–π—Ç–∏ –∑–∞ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω (0..4 –∏–ª–∏ 0..9);
  //   - –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.
  //
  const ruleConfig = {
    // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–∏—Å–ª–∞
    digitCount: digitCount,
    combineLevels: combineLevels,

    // –∂–µ–ª–∞–µ–º–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–∏–º–µ—Ä–∞
    minSteps: minSteps,
    maxSteps: maxSteps,

    // –∫–∞–∫–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ —à–∞–≥–∏ –≤–æ–æ–±—â–µ –º–æ–∂–Ω–æ –¥–∞–≤–∞—Ç—å —Ä–µ–±—ë–Ω–∫—É (+d / -d)
    selectedDigits: selectedDigits,

    // –¥–æ—Å—Ç—É–ø –∫ –≤–µ—Ä—Ö–Ω–µ–π –±—É—Å–∏–Ω–µ (—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º "–ü—Ä–æ—Å—Ç–æ 4" vs "–ü—Ä–æ—Å—Ç–æ 5")
    includeFive: includeFive,
    hasFive: includeFive, // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º

    // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    onlyAddition: onlyAddition,
    onlySubtraction: onlySubtraction,

    // –±—É–¥—É—â–∏–µ —Ä–µ–∂–∏–º—ã
    brothersActive: brothersActive,
    friendsActive: friendsActive,
    mixActive: mixActive,

    // –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ –±–ª–æ–∫–∞ "–ü—Ä–æ—Å—Ç–æ":
    firstActionMustBePositive: true,

    // —ç—Ç–∏ –¥–≤–∞ –ø–æ–ª—è —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ "–ü—Ä–æ—Å—Ç–æ",
    // –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω–∏–π –∫–æ–¥ –Ω–µ –ø–∞–¥–∞–ª
    requireBlock: false,
    blockPlacement: "auto",

    // –ø–µ—Ä–µ–¥–∞—ë–º –∏—Å—Ö–æ–¥–Ω—ã–π –±–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–µ–ª–∏–∫–æ–º (UI),
    // —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–≥–ª–æ –ø–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏
    blocks: blocks
  };

  console.log(
    "üß© [generator] ruleConfig:",
    JSON.stringify(
      {
        digitCount: ruleConfig.digitCount,
        combineLevels: ruleConfig.combineLevels,
        minSteps: ruleConfig.minSteps,
        maxSteps: ruleConfig.maxSteps,
        selectedDigits: ruleConfig.selectedDigits,
        includeFive: ruleConfig.includeFive,
        onlyAddition: ruleConfig.onlyAddition,
        onlySubtraction: ruleConfig.onlySubtraction,
        brothersActive: ruleConfig.brothersActive,
        friendsActive: ruleConfig.friendsActive,
        mixActive: ruleConfig.mixActive
      },
      null,
      2
    )
  );

  //
  // 8. –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª–æ.
  //
  // UnifiedSimpleRule –æ–±—è–∑–∞–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:
  //  - generateStartState()  ‚Üí —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (0 –∏–ª–∏ [0,0,...])
  //  - generateStepsCount()  ‚Üí –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
  //  - getAvailableActions() ‚Üí –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–π–∫–∏
  //  - applyAction()         ‚Üí –ø—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–≥
  //  - validateExample()     ‚Üí –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
  //
  let rule;

// –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–ª–æ–∫ "–ë—Ä–∞—Ç—å—è" ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º BrothersRule
if (ruleConfig.brothersActive === true) {
  console.log("üéØ [generator] –†–µ–∂–∏–º –ë–†–ê–¢–¨–Ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
  console.log("   –í—ã–±—Ä–∞–Ω–Ω—ã–µ –±—Ä–∞—Ç—å—è:", ruleConfig.blocks?.brothers?.digits);
  
  rule = new BrothersRule({
    selectedDigits: ruleConfig.blocks?.brothers?.digits || [4],
    onlyAddition: ruleConfig.blocks?.brothers?.onlyAddition ?? false,
    onlySubtraction: ruleConfig.blocks?.brothers?.onlySubtraction ?? false,
    minSteps: ruleConfig.minSteps,
    maxSteps: ruleConfig.maxSteps,
    digitCount: ruleConfig.digitCount,
    combineLevels: ruleConfig.combineLevels,
    blocks: ruleConfig.blocks,
  });
} else {
  console.log("üéØ [generator] –†–µ–∂–∏–º –ü–†–û–°–¢–û");
  rule = new UnifiedSimpleRule(ruleConfig);
}
  
  //
  // 9. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä.
  //
  const gen = new ExampleGenerator(rule);
  const rawExample = gen.generate(); // { start, steps:[{action,fromState,toState}], answer }

  //
  // 10. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –∂–¥—ë—Ç UI/trainer_logic:
  // {
  //    start: 0,
  //    steps: ["+3","+1","-4", ...],
  //    answer: 0
  // }
  //
  const formatted = gen.toTrainerFormat(rawExample);

  console.log(
    "‚úÖ [generator] –ø—Ä–∏–º–µ—Ä –≥–æ—Ç–æ–≤:",
    JSON.stringify(formatted, null, 2)
  );

  return formatted;
}

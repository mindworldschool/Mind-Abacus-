// ext/core/generator.js
//
// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞.
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
//  - —á—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ UI,
//  - –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª,
//  - –≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞,
//  - –≤—ã–∑–æ–≤ ExampleGenerator –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥ trainer_logic.js.
//
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
//  - UnifiedSimpleRule (–ª–æ–≥–∏–∫–∞ —Ä–µ–∂–∏–º–∞ "–ü—Ä–æ—Å—Ç–æ"),
//  - ExampleGenerator (—Å—Ç—Ä–æ–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∞–≥–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª—É).

import { UnifiedSimpleRule } from "./rules/UnifiedSimpleRule.js";
import { ExampleGenerator } from "./ExampleGenerator.js";

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –≤–Ω–µ—à–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ trainer_logic.js –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.
 *
 * @param {Object} settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI
 * @returns {Object} formatted example:
 *          {
 *            start: number,
 *            steps: string[], // ["+3","+1","+5","-7","+6","-8"]
 *            answer: number
 *          }
 */
export function generateExample(settings = {}) {
  console.log("üß† [generator] –≤—Ö–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", settings);

  // 1. –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å (—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –∞–±–∞–∫—É—Å–∞ —É—á–∞—Å—Ç–≤—É–µ—Ç)
  const digitCount = parseInt(settings.digits, 10) || 1; // 1..9
  const combineLevels = settings.combineLevels === true; // true ‚Üí –æ–¥–∏–Ω –æ–±—â–∏–π —à–∞–≥ –¥–≤–∏–≥–∞–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä—è–¥—ã

  // 2. –î–ª–∏–Ω–∞ –ø—Ä–∏–º–µ—Ä–∞ (–∫–æ–ª-–≤–æ —à–∞–≥–æ–≤)
  const actionsCfg = settings.actions || {};
  const minStepsRaw = actionsCfg.infinite
    ? 2
    : (actionsCfg.min ?? actionsCfg.count ?? 2);
  const maxStepsRaw = actionsCfg.infinite
    ? 12
    : (actionsCfg.max ?? actionsCfg.count ?? 4);

  let minSteps = minStepsRaw;
  let maxSteps = maxStepsRaw;

  // –î–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –±–µ–∑ combineLevels –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É,
  // —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞—Å—Ç—Ä–µ–≤–∞–ª.
  if (digitCount > 1 && !combineLevels) {
    minSteps = Math.min(minStepsRaw, 4);
    maxSteps = Math.min(maxStepsRaw, 4);
  }

  // 3. –ö–∞–∫–∏–µ —Ü–∏—Ñ—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ä–µ–±—ë–Ω–∫—É –≤ –±–ª–æ–∫–µ "–ü—Ä–æ—Å—Ç–æ"
  //    –≠—Ç–æ –¢–û–õ–¨–ö–û —Ç–µ —Ü–∏—Ñ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω—ã –≤ UI.
  //    –ú—ã –±–æ–ª—å—à–µ –Ω–µ —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º 7 –Ω–∞ (5+2) –∏ —Ç.–¥.
  //    –ï—Å–ª–∏ [3,7] ‚Üí —à–∞–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å ¬±3 –∏ ¬±7. –ï—Å–ª–∏ [1..9] ‚Üí –≤—Å—ë.
  const blocks = settings.blocks || {};
  const originalDigits = Array.isArray(blocks?.simple?.digits)
    ? blocks.simple.digits
        .map(n => parseInt(n, 10))
        .filter(n => !Number.isNaN(n))
    : [1, 2, 3, 4];

  const selectedDigits = Array.from(new Set(originalDigits)).sort((a, b) => a - b);

  // 4. includeFive —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ "–ø—è—Ç—ë—Ä–∫–∞".
  //    –ï—Å–ª–∏ includeFive=false ‚Üí –≤ UnifiedSimpleRule –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã—Ä–µ–∂–µ–º —à–∞–≥–∏ —Å –º–æ–¥—É–ª–µ–º 5.
  const includeFive =
    (blocks?.simple?.includeFive ??
      settings.includeFive ??
      selectedDigits.includes(5)) === true;

  // 5. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (—Ç–æ–ª—å–∫–æ –ø–ª—é—Å / —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Å)
  const onlyAddition =
    (blocks?.simple?.onlyAddition ?? settings.onlyAddition ?? false) === true;
  const onlySubtraction =
    (blocks?.simple?.onlySubtraction ?? settings.onlySubtraction ?? false) === true;

  // 6. –§–ª–∞–≥–∏ –±—É–¥—É—â–∏—Ö –º–µ—Ç–æ–¥–∏–∫ (–ø–æ–∫–∞ –Ω–µ –≤–µ—Ç–≤–∏–º –ø–æ –Ω–∏–º –ø—Ä–∞–≤–∏–ª–æ)
  const brothersActive = blocks?.brothers?.active === true;
  const friendsActive = blocks?.friends?.active === true;
  const mixActive = blocks?.mix?.active === true;

  // 7. –ì–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∞–≤–∏–ª–∞
  const ruleConfig = {
    // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–±–∞–∫—É—Å–∞ / –ø—Ä–∏–º–µ—Ä–∞
    digitCount: digitCount,
    combineLevels: combineLevels,

    // –¥–ª–∏–Ω–∞ –ø—Ä–∏–º–µ—Ä–∞
    minSteps: minSteps,
    maxSteps: maxSteps,

    // —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –¥–ª—è —à–∞–≥–∞
    selectedDigits: selectedDigits,

    // —Ä–µ–∂–∏–º "–ü—Ä–æ—Å—Ç–æ 4" / "–ü—Ä–æ—Å—Ç–æ 5"
    includeFive: includeFive,
    hasFive: includeFive, // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º

    // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    onlyAddition: onlyAddition,
    onlySubtraction: onlySubtraction,

    // –±—É–¥—É—â–∏–µ —Ç–∏–ø—ã —Ä–µ–∂–∏–º–æ–≤
    brothersActive: brothersActive,
    friendsActive: friendsActive,
    mixActive: mixActive,

    // –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    firstActionMustBePositive: true,

    // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã (–≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
    requireBlock: false,
    blockPlacement: "auto",

    // –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ UI
    blocks: blocks
  };

  console.log(
    "üß© [generator] ruleConfig:",
    JSON.stringify(
      {
        digitCount: ruleConfig.digitCount,
        combineLevels: ruleConfig.combineLevels,
        minSteps: ruleConfig.minSteps,
        maxSteps: ruleConfig.maxSteps,
        selectedDigits: ruleConfig.selectedDigits,
        includeFive: ruleConfig.includeFive,
        onlyAddition: ruleConfig.onlyAddition,
        onlySubtraction: ruleConfig.onlySubtraction,
        brothersActive: ruleConfig.brothersActive,
        friendsActive: ruleConfig.friendsActive,
        mixActive: ruleConfig.mixActive
      },
      null,
      2
    )
  );

  // 8. –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª–æ
  // –í–ê–ñ–ù–û: UnifiedSimpleRule –î–û–õ–ñ–ï–ù —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å:
  //    - getAvailableActions(state, isFirstAction, position?)
  //    - applyAction(state, action)
  //    - validateExample(example)
  //    - generateStepsCount()        <-- —Å–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∏–∂–µ
  //    - generateStartState()        <-- —Å–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∏–∂–µ
  //
  // generateStepsCount() –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –¥–ª–∏–Ω—É —à–∞–≥–∞ –º–µ–∂–¥—É minSteps –∏ maxSteps.
  // generateStartState() –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 0 (–∏–ª–∏ –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π –¥–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–≥–æ —Å–ª—É—á–∞—è).
  //
  const rule = new UnifiedSimpleRule(ruleConfig);

  // 9. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ ExampleGenerator
  const gen = new ExampleGenerator(rule);
  const rawExample = gen.generate();

  // 10. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è trainer_logic.js / UI
  const formatted = gen.toTrainerFormat(rawExample);

  console.log(
    "‚úÖ [generator] –ø—Ä–∏–º–µ—Ä –≥–æ—Ç–æ–≤:",
    JSON.stringify(formatted, null, 2)
  );

  return formatted;
}

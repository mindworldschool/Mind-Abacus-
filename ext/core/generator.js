// ext/core/generator.js
//
// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞.
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
//  - —á—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ UI,
//  - –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª,
//  - –≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞,
//  - –≤—ã–∑–æ–≤ ExampleGenerator –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥ trainer_logic.js.
//
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
//  - UnifiedSimpleRule (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ "–ü—Ä–æ—Å—Ç–æ"),
//  - ExampleGenerator (—Å—Ç—Ä–æ–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∞–≥–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª—É).

import { UnifiedSimpleRule } from "./rules/UnifiedSimpleRule.js";
import { ExampleGenerator } from "./ExampleGenerator.js";

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –≤–Ω–µ—à–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ trainer_logic.js –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.
 * @param {Object} settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–∏—à–µ–¥—à–∏–µ –∏–∑ UI
 * @returns {Object} { start:number, steps:string[], answer:number }
 *          –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π trainer_logic.js —É–∂–µ —É–º–µ–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
 */
export function generateExample(settings = {}) {
  console.log("üß† [generator] –≤—Ö–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", settings);

  // 1. –°—á–∏—Ç—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const digitCount = parseInt(settings.digits, 10) || 1; // —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å: 1..9
  const combineLevels = settings.combineLevels === true; // true -> –º–Ω–æ–≥–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–π —à–∞–≥ —Å—Ä–∞–∑—É –ø–æ –≤—Å–µ–º —Ä–∞–∑—Ä—è–¥–∞–º
  const actionsCfg = settings.actions || {};
  const blocks = settings.blocks || {};

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤ (–¥–µ–π—Å—Ç–≤–∏–π):
  //  - –µ—Å–ª–∏ —Ä–µ–∂–∏–º "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ" –Ω–µ –≤–∫–ª—é—á—ë–Ω, —Ç–æ actions.count –∑–∞–¥–∞—ë—Ç –∏ min, –∏ max
  const minStepsRaw = actionsCfg.infinite
    ? 2
    : (actionsCfg.min ?? actionsCfg.count ?? 2);
  const maxStepsRaw = actionsCfg.infinite
    ? 12
    : (actionsCfg.max ?? actionsCfg.count ?? 4);

  // –î–ª—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –±–µ–∑ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à–∞–≥–∞ (combineLevels=false)
  // –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—É –≤—Å—ë –µ—â—ë —Ç—è–∂–µ–ª–æ —Å—Ç—Ä–æ–∏—Ç—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏.
  // –ß—Ç–æ–±—ã –Ω–µ —Å—ã–ø–∞—Ç—å—Å—è –≤ "300 –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å", –º—ã –ø–æ–¥—Ä–µ–∂–µ–º –¥–ª–∏–Ω—É.
  let minSteps = minStepsRaw;
  let maxSteps = maxStepsRaw;
  if (digitCount > 1 && !combineLevels) {
    minSteps = Math.min(minStepsRaw, 4);
    maxSteps = Math.min(maxStepsRaw, 4);
  }

  // 2. –ß–∏—Ç–∞–µ–º –±–ª–æ–∫ "–ü—Ä–æ—Å—Ç–æ" (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
  //    –ü—Ä–∏–º–µ—Ä: [1,2,3,4,5] –∏–ª–∏ [1,2,3] –∏ —Ç.–¥.
  const originalDigits = Array.isArray(blocks?.simple?.digits)
    ? blocks.simple.digits
        .map(n => parseInt(n, 10))
        .filter(n => !Number.isNaN(n))
    : [1, 2, 3, 4];

  // includeFive —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∂–∏–º–æ–º "–ü—Ä–æ—Å—Ç–æ 4" vs "–ü—Ä–æ—Å—Ç–æ 5"
  // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
  //  1) settings.blocks.simple.includeFive,
  //  2) settings.includeFive,
  //  3) —Å–∞–º —Ñ–∞–∫—Ç, —á—Ç–æ —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä –µ—Å—Ç—å 5
  const includeFive =
    (blocks?.simple?.includeFive ??
      settings.includeFive ??
      originalDigits.includes(5)) === true;

  // –¢–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω–∏–µ / —Ç–æ–ª—å–∫–æ –≤—ã—á–∏—Ç–∞–Ω–∏–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
  const onlyAddition =
    (blocks?.simple?.onlyAddition ?? settings.onlyAddition ?? false) === true;
  const onlySubtraction =
    (blocks?.simple?.onlySubtraction ??
      settings.onlySubtraction ??
      false) === true;

  // –°–ø–µ—Ü-–±–ª–æ–∫–∏ (–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã)
  const brothersActive = blocks?.brothers?.active === true;
  const friendsActive = blocks?.friends?.active === true;
  const mixActive = blocks?.mix?.active === true;

  // 3. –ì–æ—Ç–æ–≤–∏–º final selectedDigits
  //
  // –õ–æ–≥–∏–∫–∞:
  //  - –ï—Å–ª–∏ digitCount === 1 (–æ–¥–∏–Ω —Ä–∞–∑—Ä—è–¥), –∏ –≤—ã–±—Ä–∞–Ω—ã —á–∏—Å–ª–∞ 6,7,8,9,
  //    –Ω–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ —ç—Ç–∏—Ö —á–∏—Å–µ–ª
  //    (7 => 5 –∏ 2, 9 => 5 –∏ 4 –∏ —Ç.–¥.), —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª–æ —É–º–µ–ª–æ —Å—Ç—Ä–æ–∏—Ç—å —ç—Ç–∏ —à–∞–≥–∏.
  //
  //  - –ï—Å–ª–∏ digitCount > 1 (–º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞),
  //    –º—ã –ù–ò–ß–ï–ì–û –Ω–µ —Ä–∞—Å—à–∏—Ä—è–µ–º. –ë–µ—Ä—ë–º –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
  //
  let selectedDigits = [...originalDigits];

  if (digitCount === 1) {
    const digitsToAdd = new Set(selectedDigits);

    // 6 = 5+1
    if (selectedDigits.includes(6)) {
      digitsToAdd.add(5);
      digitsToAdd.add(1);
    }

    // 7 = 5+2
    if (selectedDigits.includes(7)) {
      digitsToAdd.add(5);
      digitsToAdd.add(2);
    }

    // 8 = 5+3
    if (selectedDigits.includes(8)) {
      digitsToAdd.add(5);
      digitsToAdd.add(3);
    }

    // 9 = 5+4
    if (selectedDigits.includes(9)) {
      digitsToAdd.add(5);
      digitsToAdd.add(4);
    }

    selectedDigits = Array.from(digitsToAdd).sort((a, b) => a - b);
  } else {
    console.log(
      `‚ÑπÔ∏è [generator] –ú–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–π —Ä–µ–∂–∏–º (${digitCount}-—Ä–∞–∑—Ä—è–¥–Ω—ã–µ): –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã [${selectedDigits.join(
        ", "
      )}]`
    );
  }

  // 4. –°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º ruleConfig
  //
  // –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –≤ UnifiedSimpleRule.
  // –û–Ω –æ–ø–∏—Å—ã–≤–∞–µ—Ç –í–°–Æ –º–µ—Ç–æ–¥–∏–∫—É –ø—Ä–∏–º–µ—Ä–∞.
  //
  const ruleConfig = {
    // --- —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ä–æ–±–∞–Ω–∞ / –ø—Ä–∏–º–µ—Ä–æ–≤ ---
    digitCount: digitCount,          // 1..9
    combineLevels: combineLevels,    // –µ—Å–ª–∏ true ‚Äî —à–∞–≥ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å—Ä–∞–∑—É –≤—Å–µ —Ä–∞–∑—Ä—è–¥—ã

    // --- –¥–ª–∏–Ω–∞ –ø—Ä–∏–º–µ—Ä–∞ ---
    minSteps: minSteps,
    maxSteps: maxSteps,

    // --- –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–≥–∏ (—Ü–∏—Ñ—Ä—ã –∏–∑ –±–ª–æ–∫–∞ –ü—Ä–æ—Å—Ç–æ) ---
    selectedDigits: selectedDigits,

    // --- —Ä–µ–∂–∏–º –ü—Ä–æ—Å—Ç–æ 4 / –ü—Ä–æ—Å—Ç–æ 5 ---
    includeFive: includeFive,
    hasFive: includeFive, // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π

    // --- –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤ UI –≤–∫–ª—é—á–∏–ª–∏ "—Ç–æ–ª—å–∫–æ –ø–ª—é—Å" –∏–ª–∏ "—Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Å") ---
    onlyAddition: onlyAddition,
    onlySubtraction: onlySubtraction,

    // --- –±–ª–æ–∫–∏ –º–µ—Ç–æ–¥–∏–∫ (–±—Ä–∞—Ç—å—è / –¥—Ä—É–∑—å—è / –º–∏–∫—Å) ---
    brothersActive: brothersActive,
    friendsActive: friendsActive,
    mixActive: mixActive,

    // --- –ø—Ä–æ—á–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª–æ/–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ---
    firstActionMustBePositive: true,

    // —Ñ–ª–∞–≥–∏ –¥–ª—è –±–ª–æ–∫–æ–≤ —Å "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –≤—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–æ—Ä–º—É–ª—ã"
    // –ø–æ–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª–æ–º–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–¥
    requireBlock: false,
    blockPlacement: "auto",

    // –∏—Å—Ö–æ–¥–Ω—ã–µ –±–ª–æ–∫–∏ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª–æ –º–æ–≥–ª–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
    blocks: blocks
  };

  console.log(
    "üß© [generator] ruleConfig:",
    JSON.stringify(
      {
        digitCount: ruleConfig.digitCount,
        combineLevels: ruleConfig.combineLevels,
        minSteps: ruleConfig.minSteps,
        maxSteps: ruleConfig.maxSteps,
        selectedDigits: ruleConfig.selectedDigits,
        includeFive: ruleConfig.includeFive,
        onlyAddition: ruleConfig.onlyAddition,
        onlySubtraction: ruleConfig.onlySubtraction,
        brothersActive: ruleConfig.brothersActive,
        friendsActive: ruleConfig.friendsActive,
        mixActive: ruleConfig.mixActive
      },
      null,
      2
    )
  );

  // 5. –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª–∞
  //
  // –ù–∞ –±—É–¥—É—â–µ–µ:
  // - –µ—Å–ª–∏ brothersActive === true ‚Üí –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å BrothersRule
  // - –µ—Å–ª–∏ friendsActive === true ‚Üí FriendsRule
  // - –µ—Å–ª–∏ mixActive === true ‚Üí —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
  //
  // –ü–æ–∫–∞ (–ø–æ —Ç–≤–æ–µ–º—É —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é): –≤—Å–µ–≥–¥–∞ –±–∞–∑–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ UnifiedSimpleRule.
  //
  const rule = new UnifiedSimpleRule(ruleConfig);

  // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ ExampleGenerator
  const gen = new ExampleGenerator(rule);
  const rawExample = gen.generate();

  // 7. –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ —Ñ–æ—Ä–º–∞—Ç—É, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤ UI
  const formatted = gen.toTrainerFormat(rawExample);

  console.log(
    "‚úÖ [generator] –ø—Ä–∏–º–µ—Ä –≥–æ—Ç–æ–≤:",
    JSON.stringify(formatted, null, 2)
  );

  return formatted;
}

// ext/core/MultiDigitGenerator.js - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤

/**
 * MultiDigitGenerator - –∫–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤.
 * 
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–µ –ø—Ä–∞–≤–∏–ª–æ (SimpleRule, BrothersRule, FriendsRule...) –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç
 * –µ–≥–æ –∫ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä—è–¥—É –ù–ï–ó–ê–í–ò–°–ò–ú–û, —Ñ–æ—Ä–º–∏—Ä—É—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞.
 * 
 * –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
 * 1. –ö–∞–∂–¥—ã–π —Ä–∞–∑—Ä—è–¥ –∂–∏–≤—ë—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ (—Ñ–∏–∑–∏–∫–∞ –∞–±–∞–∫—É—Å–∞)
 * 2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –í–´–ë–†–ê–ù–ù–´–ï –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ü–∏—Ñ—Ä—ã (selectedDigits –∏–∑ config)
 * 3. –¶–∏—Ñ—Ä—ã –≤ –æ–¥–Ω–æ–º —á–∏—Å–ª–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä +21 ‚úÖ, +22 —Ä–µ–¥–∫–æ)
 * 4. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏ (+389-27+164)
 * 5. –ò–∑–±–µ–≥–∞–Ω–∏–µ –Ω—É–ª–µ–≤—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤ (+20 –º–∞–∫—Å–∏–º—É–º 1 —Ä–∞–∑)
 * 
 * –ü–†–ò–ú–ï–† 1 (–≤—ã–±—Ä–∞–Ω–æ [1,2,3,4,5]):
 * –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å: 2
 * –†–µ–∑—É–ª—å—Ç–∞—Ç: +21+34-12+51 = 94
 * 
 * –ü–†–ò–ú–ï–† 2 (–≤—ã–±—Ä–∞–Ω–æ [1,2,3,4,5,6,7,8,9]):
 * –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å: 2
 * –†–µ–∑—É–ª—å—Ç–∞—Ç: +19-76+82+34 = 59
 */

export class MultiDigitGenerator {
  /**
   * @param {Class} RuleClass - –∫–ª–∞—Å—Å –ø—Ä–∞–≤–∏–ª–∞ (UnifiedSimpleRule, BrothersRule...)
   * @param {number} maxDigitCount - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ (2-9)
   * @param {Object} config - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
   */
  constructor(RuleClass, maxDigitCount, config = {}) {
    // –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    // selectedDigits –±–µ—Ä—É—Ç—Å—è –∏–∑ config - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏—Ö –≤ UI
    this.baseRule = new RuleClass(config);
    
    // –í–ê–ñ–ù–û: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ –≤ –ü–†–ò–ú–ï–†–ï (—á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    this.displayDigitCount = Math.max(1, Math.min(9, maxDigitCount));
    
    // –í–ê–ñ–ù–û: –ê–±–∞–∫—É—Å –≤—Å–µ–≥–¥–∞ –Ω–∞ 1 —Ä–∞–∑—Ä—è–¥ –ë–û–õ–¨–®–ï –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞!
    this.maxDigitCount = this.displayDigitCount + 1;
    
    console.log(`üìä –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å: –ø—Ä–∏–º–µ—Ä=${this.displayDigitCount}, –∞–±–∞–∫—É—Å=${this.maxDigitCount}`);
    
    this.config = {
      ...config,
      maxDigitCount: this.maxDigitCount,
      
      // –†–µ–∂–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤ UI)
      // true: +123-12+56 (—Ä–∞–∑–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∏—Å–µ–ª)
      // false: +123+456-789 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞)
      variableDigitCounts: config.variableDigitCounts ?? false,
      
      // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ü–∏—Ñ—Ä (+22, +33) - —Ä–µ–¥–∫–æ!
      duplicateDigitProbability: 0.1, // 10% —à–∞–Ω—Å
      
      // –ú–∞–∫—Å–∏–º—É–º –Ω—É–ª–µ–≤—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤ –≤ –ø—Ä–∏–º–µ—Ä–µ (+20, +100)
      maxZeroDigits: 1,
      
      // –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–µ–¥–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
      _duplicatesUsed: 0,
      _zeroDigitsUsed: 0
    };
    
    // –ò–º—è –¥–ª—è –ª–æ–≥–æ–≤
    this.name = `${this.baseRule.name} (Multi-Digit ${this.displayDigitCount})`;
    
    // –ü–æ–ª—É—á–∞–µ–º selectedDigits –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
    const selectedDigits = this.baseRule.config?.selectedDigits || [];
    
    console.log(`üî¢ MultiDigitGenerator —Å–æ–∑–¥–∞–Ω:
  –ë–∞–∑–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ: ${this.baseRule.name}
  –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–∞: ${this.displayDigitCount}
  –†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –∞–±–∞–∫—É—Å–∞: ${this.maxDigitCount} (+1 –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞)
  –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã: [${selectedDigits.join(', ')}]
  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å: ${this.config.variableDigitCounts}
  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${this.config.duplicateDigitProbability * 100}%
  –ú–∞–∫—Å. –Ω—É–ª–µ–≤—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤: ${this.config.maxZeroDigits}`);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
   * @returns {Array<number>} - [0, 0, 0, ...] (–º–ª–∞–¥—à–∏–π —Ä–∞–∑—Ä—è–¥ –ø–µ—Ä–≤—ã–π)
   */
  generateStartState() {
    return Array(this.maxDigitCount).fill(0);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–º—É –ø—Ä–∞–≤–∏–ª—É)
   * @returns {number}
   */
  generateStepsCount() {
    return this.baseRule.generateStepsCount();
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–∞
   * @returns {Object} { start: [0,0,...], steps: [...], answer: [n,n,...] }
   */
  generateExample() {
    const states = this.generateStartState();
    const stepsCount = this.generateStepsCount();
    const steps = [];
    
    console.log(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞: ${stepsCount} —à–∞–≥–æ–≤, —Ä–∞–∑—Ä—è–¥–æ–≤: ${this.displayDigitCount} (–∞–±–∞–∫—É—Å: ${this.maxDigitCount})`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ —Ä–µ–¥–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    this.config._duplicatesUsed = 0;
    this.config._zeroDigitsUsed = 0;
    
    // –í–ê–ñ–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤!
    let attempts = 0;
    const maxTotalAttempts = 1000; // –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    
    while (steps.length < stepsCount && attempts < maxTotalAttempts) {
      attempts++;
      const isFirst = steps.length === 0;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
      const multiDigitAction = this._generateMultiDigitAction(states, isFirst, steps);
      
      if (!multiDigitAction) {
        // –ù–µ —É–¥–∞–ª–æ—Å—å - –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
        if (attempts % 50 === 0) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempts}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥ ${steps.length + 1}`);
        }
        continue;
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä—è–¥—É
      const newStates = [...states];
      for (let pos = 0; pos < this.maxDigitCount; pos++) {
        const digitAction = multiDigitAction.digits[pos] || 0;
        newStates[pos] += digitAction;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
      let allValid = true;
      for (let pos = 0; pos < this.maxDigitCount; pos++) {
        if (newStates[pos] < 0 || newStates[pos] > 9) {
          allValid = false;
          console.warn(`‚ö†Ô∏è –†–∞–∑—Ä—è–¥ ${pos}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ ${newStates[pos]} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ 0-9`);
          break;
        }
      }
      
      if (!allValid) {
        // –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
        continue;
      }
      
      steps.push({
        action: multiDigitAction.value,
        states: [...newStates],
        digits: multiDigitAction.digits
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
      for (let pos = 0; pos < this.maxDigitCount; pos++) {
        states[pos] = newStates[pos];
      }
      
      console.log(`  ‚úÖ –®–∞–≥ ${steps.length}/${stepsCount}: ${multiDigitAction.sign > 0 ? '+' : ''}${multiDigitAction.value}, —Å–æ—Å—Ç–æ—è–Ω–∏—è: [${states.slice(0, this.displayDigitCount + 1).join(', ')}]`);
    }
    
    if (steps.length < stepsCount) {
      console.warn(`‚ö†Ô∏è –£–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ ${steps.length} –∏–∑ ${stepsCount} —à–∞–≥–æ–≤ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫`);
    }
    
    return {
      start: this.generateStartState(),
      steps,
      answer: [...states]
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä +21, -345)
   * @param {Array<number>} states - —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑—Ä—è–¥–æ–≤
   * @param {boolean} isFirst - —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥?
   * @param {Array} previousSteps - –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
   * @returns {Object|null} { value: 21, sign: 1, digits: [1, 2] }
   */
  _generateMultiDigitAction(states, isFirst, previousSteps) {
    const maxAttempts = 100; // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 50 –¥–æ 100
    
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞
        const digitCount = this._chooseDigitCount(isFirst);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
        const result = this._generateDigits(states, digitCount, isFirst, previousSteps);
        
        if (!result) continue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if (this._validateMultiDigitAction(result, states, isFirst)) {
          return result;
        }
      } catch (error) {
        if (attempt % 20 === 0) {
          console.warn(`  –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: ${error.message}`);
        }
      }
    }
    
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫, —Å–æ—Å—Ç–æ—è–Ω–∏—è: [${states.join(', ')}]`);
    return null;
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞
   * @param {boolean} isFirst - –ø–µ—Ä–≤—ã–π —à–∞–≥?
   * @returns {number} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤ (1..displayDigitCount)
   */
  _chooseDigitCount(isFirst) {
    // –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤—Å–µ–≥–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
    if (isFirst) {
      return this.displayDigitCount;
    }
    
    // –†–µ–∂–∏–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏
    if (!this.config.variableDigitCounts) {
      return this.displayDigitCount;
    }
    
    // –†–µ–∂–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–∏: —Å–ª—É—á–∞–π–Ω–æ –æ—Ç 1 –¥–æ displayDigitCount
    // –° –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ–º –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–µ–π
    const weights = [];
    for (let i = 1; i <= this.displayDigitCount; i++) {
      // –ë–æ–ª—å—à–µ –≤–µ—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç–µ–π
      const weight = i * i; // 1, 4, 9, 16, ...
      weights.push({ count: i, weight });
    }
    
    const totalWeight = weights.reduce((sum, w) => sum + w.weight, 0);
    let random = Math.random() * totalWeight;
    
    for (const w of weights) {
      random -= w.weight;
      if (random <= 0) {
        return w.count;
      }
    }
    
    return this.displayDigitCount;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–∏—Ñ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
   * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê:
   * 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∑–Ω–∞–∫—É
   * 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å –æ–±–æ–∏–º–∏ –∑–Ω–∞–∫–∞–º–∏
   * 3. –í—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ç –∑–Ω–∞–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç
   * 4. –ß–µ—Ä–µ–¥—É–µ–º –∑–Ω–∞–∫–∏ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
   * 
   * @param {Array<number>} states - —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * @param {number} digitCount - —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑—Ä—è–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
   * @param {boolean} isFirst - –ø–µ—Ä–≤—ã–π —à–∞–≥?
   * @param {Array} previousSteps - –∏—Å—Ç–æ—Ä–∏—è —à–∞–≥–æ–≤
   * @returns {Object|null}
   */
  _generateDigits(states, digitCount, isFirst, previousSteps) {
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ü–∏—Ñ—Ä (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ä—à–∏–π —Ä–∞–∑—Ä—è–¥ –ø–µ—Ä–µ–Ω–æ—Å–∞)
    const digits = Array(this.maxDigitCount).fill(0);
    const usedDigits = new Set();
    let hasNonZero = false;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ñ–ï–õ–ê–ï–ú–´–ô –∑–Ω–∞–∫ (—á–µ—Ä–µ–¥—É–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º)
    let desiredSign = 1;
    if (!isFirst && previousSteps.length > 0) {
      const lastStep = previousSteps[previousSteps.length - 1];
      if (lastStep && lastStep.action) {
        const lastSign = Math.sign(lastStep.action);
        desiredSign = -lastSign; // –ß–µ—Ä–µ–¥—É–µ–º
      }
    }
    
    console.log(`  üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${digitCount}-–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞, –∂–µ–ª–∞–µ–º—ã–π –∑–Ω–∞–∫: ${desiredSign > 0 ? '+' : '-'}`);
    
    // –ü–æ–∑–≤–æ–ª—è–µ–º –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —ç—Ç–æ–º —á–∏—Å–ª–µ?
    const allowDuplicates = Math.random() < this.config.duplicateDigitProbability
      && this.config._duplicatesUsed < 1;
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
    const candidates = []; // [{pos, absValue, canPlus, canMinus}, ...]
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º –æ—Ç —Å—Ç–∞—Ä—à–µ–≥–æ –∫ –º–ª–∞–¥—à–µ–º—É
    for (let pos = this.displayDigitCount - 1; pos >= 0; pos--) {
      const currentState = states[pos];
      const isFirstForDigit = isFirst && pos === this.displayDigitCount - 1;
      
      let availableActions = this.baseRule.getAvailableActions(
        currentState,
        isFirstForDigit,
        previousSteps
      );
      
      if (!availableActions || availableActions.length === 0) {
        console.log(`  ‚ö†Ô∏è –†–∞–∑—Ä—è–¥ ${pos}: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è ${currentState}`);
        continue;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ usedDigits!
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏–º–µ–Ω–∏–º –ø–æ–∑–∂–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
      const absActions = [];
      for (const action of availableActions) {
        const value = this._getActionValue(action);
        const absValue = Math.abs(value);
        if (absValue > 0) {
          absActions.push(absValue);
        }
      }
      
      if (absActions.length === 0) continue;
      
      // –î–ª—è –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –µ—ë –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å + –∏/–∏–ª–∏ -
      for (const absValue of absActions) {
        const canPlus = (currentState + absValue) <= 9;
        const canMinus = (currentState - absValue) >= 0;
        
        if (canPlus || canMinus) {
          candidates.push({ pos, absValue, canPlus, canMinus });
        }
      }
    }
    
    if (candidates.length === 0) {
      console.log(`  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`);
      return null;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–Ω–∞–∫
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π –∑–Ω–∞–∫
    const canUseDesiredSign = candidates.some(c => 
      (desiredSign > 0 && c.canPlus) || (desiredSign < 0 && c.canMinus)
    );
    
    const finalSign = canUseDesiredSign ? desiredSign : -desiredSign;
    
    console.log(`  ‚úì –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–Ω–∞–∫: ${finalSign > 0 ? '+' : '-'} (–∂–µ–ª–∞–µ–º—ã–π: ${desiredSign > 0 ? '+' : '-'}, –≤–æ–∑–º–æ–∂–µ–Ω: ${canUseDesiredSign})`);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º
    const validCandidates = candidates.filter(c =>
      (finalSign > 0 && c.canPlus) || (finalSign < 0 && c.canMinus)
    );
    
    if (validCandidates.length === 0) {
      console.log(`  ‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∑–Ω–∞–∫–∞ ${finalSign > 0 ? '+' : '-'}`);
      return null;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
    const byPosition = {};
    for (const c of validCandidates) {
      if (!byPosition[c.pos]) byPosition[c.pos] = [];
      byPosition[c.pos].push(c.absValue);
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
    for (const posStr in byPosition) {
      const pos = parseInt(posStr);
      const values = byPosition[pos];
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      let availableValues = values;
      if (!allowDuplicates) {
        availableValues = values.filter(v => !usedDigits.has(v));
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±—ã–µ
      if (availableValues.length === 0) {
        availableValues = values;
      }
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ñ—Ä—É
      const absValue = this._chooseRandom(availableValues);
      
      digits[pos] = finalSign * absValue;
      usedDigits.add(absValue);
      hasNonZero = true;
      
      const newState = states[pos] + digits[pos];
      console.log(`  ‚úì –†–∞–∑—Ä—è–¥ ${pos}: ${states[pos]} ${finalSign > 0 ? '+' : ''}${digits[pos]} ‚Üí ${newState}`);
      
      // –û—Ç–º–µ—á–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      if (allowDuplicates && Array.from(usedDigits).filter(d => d === absValue).length > 1) {
        this.config._duplicatesUsed++;
      }
    }
    
    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–µ–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if (!hasNonZero) {
      console.log(`  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã`);
      return null;
    }
    
    // –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞
    let value = 0;
    for (let pos = 0; pos < this.displayDigitCount; pos++) {
      value += Math.abs(digits[pos]) * Math.pow(10, pos);
    }
    
    console.log(`  ‚úì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–∏—Å–ª–æ: ${finalSign > 0 ? '+' : ''}${value}`);
    
    return {
      value,
      sign: finalSign,
      digits,
      digitCount,
      usedDigits: Array.from(usedDigits)
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
   */
  _validateMultiDigitAction(result, states, isFirst) {
    const { digits, value, sign } = result;
    
    // 1. –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0
    if (value === 0) {
      return false;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–≤—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤ (—Å–º—è–≥—á–∞–µ–º - —Ä–∞–∑—Ä–µ—à–∞–µ–º –±–æ–ª—å—à–µ)
    const zeroCount = digits.filter(d => d === 0).length;
    if (zeroCount > 0 && zeroCount >= this.displayDigitCount - 1) {
      // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω—É–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä +00 –≤ –¥–≤—É–∑–Ω–∞—á–Ω–æ–º)
      if (this.config._zeroDigitsUsed >= this.config.maxZeroDigits) {
        return false;
      }
      this.config._zeroDigitsUsed++;
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã
    for (let pos = 0; pos < this.maxDigitCount; pos++) {
      const newState = states[pos] + digits[pos];
      if (newState < 0 || newState > 9) {
        return false;
      }
    }
    
    return true;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
   */
  _getActionValue(action) {
    if (typeof action === 'object' && action !== null) {
      return action.value ?? 0;
    }
    return action;
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
   */
  _chooseRandom(array) {
    if (!array || array.length === 0) return null;
    return array[Math.floor(Math.random() * array.length)];
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
   * @param {Array<number>} state - –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑—Ä—è–¥–æ–≤
   * @param {number|Object} action - –¥–µ–π—Å—Ç–≤–∏–µ (–º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
   * @returns {Array<number>}
   */
  applyAction(state, action) {
    if (typeof action === 'object' && action.digits) {
      // –û–±—ä–µ–∫—Ç —Å digits (–∏–∑ generateExample)
      const newState = [...state];
      for (let pos = 0; pos < this.maxDigitCount; pos++) {
        newState[pos] += (action.digits[pos] || 0);
      }
      return newState;
    }
    
    // –ï—Å–ª–∏ —á–∏—Å–ª–æ - —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
    const absValue = Math.abs(action);
    const sign = Math.sign(action);
    const digits = this._numberToDigits(absValue);
    
    const newState = [...state];
    for (let pos = 0; pos < this.maxDigitCount; pos++) {
      newState[pos] += sign * (digits[pos] || 0);
    }
    return newState;
  }

  /**
   * –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –Ω–∞ —Ä–∞–∑—Ä—è–¥—ã
   * @param {number} num - —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 123)
   * @returns {Array<number>} - [3, 2, 1] (–º–ª–∞–¥—à–∏–π —Ä–∞–∑—Ä—è–¥ –ø–µ—Ä–≤—ã–π)
   */
  _numberToDigits(num) {
    const digits = [];
    let n = Math.abs(num);
    
    for (let i = 0; i < this.maxDigitCount; i++) {
      digits.push(n % 10);
      n = Math.floor(n / 10);
    }
    
    return digits;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —á–∏—Å–ª–æ
   * @param {Array<number>} state - –º–∞—Å—Å–∏–≤ —Ä–∞–∑—Ä—è–¥–æ–≤ [3, 2, 1, 0] (–º–ª–∞–¥—à–∏–π –ø–µ—Ä–≤—ã–π + —Ä–∞–∑—Ä—è–¥ –ø–µ—Ä–µ–Ω–æ—Å–∞)
   * @returns {number} - —á–∏—Å–ª–æ 123 (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–∞–∑—Ä—è–¥–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞)
   */
  stateToNumber(state) {
    if (!Array.isArray(state)) return 0;
    
    // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ displayDigitCount —Ä–∞–∑—Ä—è–¥–æ–≤ (–±–µ–∑ —Å—Ç–∞—Ä—à–µ–≥–æ —Ä–∞–∑—Ä—è–¥–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞)
    let result = 0;
    for (let i = 0; i < this.displayDigitCount && i < state.length; i++) {
      result += state[i] * Math.pow(10, i);
    }
    
    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * @param {Array<number>} state
   * @returns {boolean}
   */
  isValidState(state) {
    if (!Array.isArray(state)) return false;
    return state.every(digit => digit >= 0 && digit <= 9);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è UI
   * @param {number|Object} action
   * @returns {string}
   */
  formatAction(action) {
    const value = typeof action === 'object' ? action.value : action;
    return value >= 0 ? `+${value}` : `${value}`;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
   * @param {Object} example
   * @returns {boolean}
   */
  validateExample(example) {
    const { start, steps, answer } = example;
    
    // 1. –°—Ç–∞—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –Ω—É–ª–µ–π
    if (!Array.isArray(start) || start.some(s => s !== 0)) {
      console.error('‚ùå MultiDigit: —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å [0,0,...]');
      return false;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥
    let currentStates = [...start];
    for (let i = 0; i < steps.length; i++) {
      const step = steps[i];
      
      // –ü–µ—Ä–≤—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
      if (i === 0 && step.action < 0) {
        console.error('‚ùå MultiDigit: –ø–µ—Ä–≤—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º');
        return false;
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–≥
      currentStates = this.applyAction(currentStates, step);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
      if (!this.isValidState(currentStates)) {
        console.error(`‚ùå MultiDigit: —à–∞–≥ ${i + 1} –ø—Ä–∏–≤—ë–ª –∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é [${currentStates.join(', ')}]`);
        return false;
      }
    }
    
    // 3. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ç–≤–µ—Ç–æ–º
    const finalNumber = this.stateToNumber(currentStates);
    const answerNumber = this.stateToNumber(answer);
    
    if (finalNumber !== answerNumber) {
      console.error(`‚ùå MultiDigit: —Ñ–∏–Ω–∞–ª ${finalNumber} ‚â† –æ—Ç–≤–µ—Ç ${answerNumber}`);
      return false;
    }
    
    console.log(`‚úÖ MultiDigit: –ø—Ä–∏–º–µ—Ä –≤–∞–ª–∏–¥–µ–Ω (${steps.length} —à–∞–≥–æ–≤, —Ñ–∏–Ω–∞–ª ${finalNumber})`);
    return true;
  }
}

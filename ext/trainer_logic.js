// ext/trainer_logic.js ‚Äî Trainer logic (retry –æ—Ç–∫–ª—é—á—ë–Ω)
import { ExampleView } from "./components/ExampleView.js";
import { Abacus } from "./components/AbacusNew.js";
import { generateExample } from "./core/generator.js";
import { startAnswerTimer, stopAnswerTimer } from "../js/utils/timer.js";
import { BigStepOverlay } from "../ui/components/BigStepOverlay.js";
import { playSound } from "../js/utils/sound.js";
import { logger } from "../core/utils/logger.js";
import { UI, FONT_SIZE, DEFAULTS } from "../core/utils/constants.js";
import { eventBus, EVENTS } from "../core/utils/events.js";
import toast from "../ui/components/Toast.js";

const CONTEXT = "Trainer";

/**
 * Create layout structure using createElement (secure)
 */
function createTrainerLayout(displayMode, exampleCount) {
  const layout = document.createElement("div");
  layout.className = `mws-trainer mws-trainer--${displayMode}`;

  // Main area
  const trainerMain = document.createElement("div");
  trainerMain.className = `trainer-main trainer-main--${displayMode}`;

  const exampleArea = document.createElement("div");
  exampleArea.id = "area-example";
  exampleArea.className = "example-view";
  trainerMain.appendChild(exampleArea);

  // Controls panel
  const panelControls = document.createElement("div");
  panelControls.id = "panel-controls";

  // Answer section
  const answerSection = document.createElement("div");
  answerSection.className = "answer-section-panel";

  const answerLabel = document.createElement("div");
  answerLabel.className = "answer-label";
  answerLabel.textContent = "–û—Ç–≤–µ—Ç:";

  const answerInput = document.createElement("input");
  answerInput.type = "number";
  answerInput.id = "answer-input";
  answerInput.placeholder = "";

  const submitBtn = document.createElement("button");
  submitBtn.className = "btn btn--primary";
  submitBtn.id = "btn-submit";
  submitBtn.textContent = "–û—Ç–≤–µ—Ç–∏—Ç—å";

  answerSection.append(answerLabel, answerInput, submitBtn);

  // Results capsule
  const resultsCapsuleExt = createResultsCapsule(exampleCount);

  // Progress container
  const progressContainer = createProgressContainer();

  // Timer
  const timerContainer = document.createElement("div");
  timerContainer.id = "answer-timer";
  const timerBar = document.createElement("div");
  timerBar.className = "bar";
  timerContainer.appendChild(timerBar);

  const timerText = document.createElement("div");
  timerText.id = "answerTimerText";
  timerText.className = "answer-timer__text";

  // Abacus toggle
  const panelCard = document.createElement("div");
  panelCard.className = "panel-card panel-card--compact";
  const abacusBtn = document.createElement("button");
  abacusBtn.className = "btn btn--secondary btn--fullwidth";
  abacusBtn.id = "btn-show-abacus";
  abacusBtn.textContent = "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";
  panelCard.appendChild(abacusBtn);

  panelControls.append(
    answerSection,
    resultsCapsuleExt,
    progressContainer,
    timerContainer,
    timerText,
    panelCard
  );

  layout.append(trainerMain, panelControls);
  return layout;
}

function createResultsCapsule(exampleCount) {
  const container = document.createElement("div");
  container.className = "results-capsule-extended";

  const header = document.createElement("div");
  header.className = "results-capsule-extended__header";

  const label = document.createElement("span");
  label.className = "results-capsule-extended__label";
  label.textContent = "–ü—Ä–∏–º–µ—Ä—ã:";

  const counter = document.createElement("span");
  counter.className = "results-capsule-extended__counter";

  const completed = document.createElement("span");
  completed.id = "stats-completed";
  completed.textContent = "0";

  const total = document.createElement("span");
  total.id = "stats-total";
  total.textContent = String(exampleCount);

  counter.append(completed, " / ", total);
  header.append(label, counter);

  const capsule = document.createElement("div");
  capsule.className = "results-capsule";

  // Correct side
  const correctSide = document.createElement("div");
  correctSide.className = "results-capsule__side results-capsule__side--correct";
  const correctIcon = document.createElement("div");
  correctIcon.className = "results-capsule__icon";
  correctIcon.textContent = "‚úì";
  const correctValue = document.createElement("div");
  correctValue.className = "results-capsule__value";
  correctValue.id = "stats-correct";
  correctValue.textContent = "0";
  correctSide.append(correctIcon, correctValue);

  const divider = document.createElement("div");
  divider.className = "results-capsule__divider";

  // Incorrect side
  const incorrectSide = document.createElement("div");
  incorrectSide.className = "results-capsule__side results-capsule__side--incorrect";
  const incorrectIcon = document.createElement("div");
  incorrectIcon.className = "results-capsule__icon";
  incorrectIcon.textContent = "‚úó";
  const incorrectValue = document.createElement("div");
  incorrectValue.className = "results-capsule__value";
  incorrectValue.id = "stats-incorrect";
  incorrectValue.textContent = "0";
  incorrectSide.append(incorrectIcon, incorrectValue);

  capsule.append(correctSide, divider, incorrectSide);
  container.append(header, capsule);
  return container;
}

function createProgressContainer() {
  const container = document.createElement("div");
  container.className = "progress-container";

  const progressBar = document.createElement("div");
  progressBar.className = "progress-bar";

  const correctBar = document.createElement("div");
  correctBar.className = "progress-bar__correct";
  correctBar.id = "progress-correct";
  correctBar.style.width = "0%";

  const incorrectBar = document.createElement("div");
  incorrectBar.className = "progress-bar__incorrect";
  incorrectBar.id = "progress-incorrect";
  incorrectBar.style.width = "0%";

  progressBar.append(correctBar, incorrectBar);

  const labels = document.createElement("div");
  labels.className = "progress-label";

  const correctLabel = document.createElement("span");
  correctLabel.className = "progress-label__correct";
  correctLabel.textContent = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ";
  const correctPercent = document.createElement("strong");
  correctPercent.id = "percent-correct";
  correctPercent.textContent = "0%";
  correctLabel.appendChild(correctPercent);

  const incorrectLabel = document.createElement("span");
  incorrectLabel.className = "progress-label__incorrect";
  incorrectLabel.textContent = "–û—à–∏–±–∫–∏: ";
  const incorrectPercent = document.createElement("strong");
  incorrectPercent.id = "percent-incorrect";
  incorrectPercent.textContent = "0%";
  incorrectLabel.appendChild(incorrectPercent);

  labels.append(correctLabel, incorrectLabel);
  container.append(progressBar, labels);
  return container;
}

function createAbacusWrapper() {
  const wrapper = document.createElement("div");
  wrapper.className = "abacus-wrapper";
  wrapper.id = "abacus-wrapper";

  const header = document.createElement("div");
  header.className = "abacus-header";

  const title = document.createElement("span");
  title.className = "abacus-title";
  title.textContent = "üßÆ –ê–±–∞–∫—É—Å";

  const closeBtn = document.createElement("button");
  closeBtn.className = "abacus-close-btn";
  closeBtn.id = "btn-close-abacus";
  closeBtn.title = "–ó–∞–∫—Ä—ã—Ç—å";
  closeBtn.textContent = "√ó";

  header.append(title, closeBtn);

  const container = document.createElement("div");
  container.id = "floating-abacus-container";

  wrapper.append(header, container);
  return wrapper;
}

/**
 * Main trainer mounting function
 * @param {HTMLElement} container - Container element
 * @param {Object} context - { t, state }
 * @returns {Function} Cleanup function
 */
export function mountTrainerUI(container, { t, state }) {
  try {
    logger.info(CONTEXT, "Mounting trainer UI...");
    logger.debug(CONTEXT, "Settings:", state?.settings);

    const st = state?.settings ?? {};
    const actionsCfg = st.actions ?? {};
    const examplesCfg = st.examples ?? {};
    const blockSimpleDigits = Array.isArray(st?.blocks?.simple?.digits)
      ? st.blocks.simple.digits
      : [];

    const digits = parseInt(st.digits, 10) || 1; // –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
    const abacusColumns = digits + 1; // –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏: –Ω–∞ –æ–¥–Ω—É —Å—Ç–æ–π–∫—É –±–æ–ª—å—à–µ
    const displayMode = st.inline ? "inline" : "column";

    // --- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ —Å–µ—Ä–∏–∏ (–±–µ–∑ retry)
    const exampleCount = getExampleCount(examplesCfg);

    // === Create Layout (secure) ===
    const layout = createTrainerLayout(displayMode, exampleCount, t);
    container.appendChild(layout);

    // === Create Abacus ===
    const oldAbacus = document.getElementById("abacus-wrapper");
    if (oldAbacus) oldAbacus.remove();

    const abacusWrapper = createAbacusWrapper();
    document.body.appendChild(abacusWrapper);

    const exampleView = new ExampleView(
      document.getElementById("area-example")
    );

    // –ö–æ–ª-–≤–æ —Å—Ç–æ–µ–∫ = digits + 1
    const abacus = new Abacus(
      document.getElementById("floating-abacus-container"),
      abacusColumns
    );

    const overlayColor =
      getComputedStyle(document.documentElement).getPropertyValue(
        "--color-primary"
      )?.trim() || "#EC8D00";
    const overlay = new BigStepOverlay(
      st.bigDigitScale ?? UI.BIG_DIGIT_SCALE,
      overlayColor
    );

    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º "–∞–±–∞–∫—É—Å", —Ç–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å
    const shouldShowAbacus = st.mode === "abacus";
    if (shouldShowAbacus) {
      abacusWrapper.classList.add("visible");
      const btn = document.getElementById("btn-show-abacus");
      if (btn)
        btn.textContent =
          t?.("trainer.hideAbacus") || "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å";
    }

    // === –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ retry) ===
    const session = {
      currentExample: null,
      stats: { correct: 0, incorrect: 0, total: exampleCount },
      completed: 0
    };

    let isShowing = false;
    let showAbort = false;

    // === Adaptive font-size logic ===
    function adaptExampleFontSize(actionsCount, maxDigits) {
      const exampleLines = document.querySelectorAll(
        "#area-example .example__line"
      );

      logger.debug(
        CONTEXT,
        `adaptExampleFontSize called: ${exampleLines.length} lines found, actions: ${actionsCount}, digits: ${maxDigits}`
      );

      if (!exampleLines.length) return;

      // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      const actionsFactor = Math.min(actionsCount, 12) / 12; // 0..1
      const digitsFactor = Math.min(maxDigits, 9) / 9; // 0..1
      const complexityFactor = (actionsFactor + digitsFactor) / 2;

      // –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞: 24px ‚Üí 96px
      const minFontSize = 24;
      const maxFontSize = 96;
      const fontSize =
        maxFontSize -
        complexityFactor * (maxFontSize - minFontSize);

      exampleLines.forEach((line) => {
        line.style.setProperty(
          "font-size",
          `${Math.round(fontSize)}px`,
          "important"
        );
        line.style.setProperty("line-height", "1.2", "important");
      });

      logger.debug(
        CONTEXT,
        `Font size: ${Math.round(
          fontSize
        )}px (actions: ${actionsCount}, digits: ${maxDigits})`
      );
    }

    // === –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ ===
    async function showNextExample() {
      try {
        overlay.clear();
        showAbort = true;
        isShowing = false;

        // –í—Å—ë, —Å–µ—Ä–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞?
        if (session.completed >= session.stats.total) {
          return finishTraining();
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        const selectedDigits =
          blockSimpleDigits.length > 0
            ? blockSimpleDigits.map((d) => parseInt(d, 10))
            : [1, 2, 3, 4];

        // actions –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: —É—á–∏—Ç—ã–≤–∞–µ–º infinite –∏ min/max/count
        const genMin =
          actionsCfg.infinite === true
            ? DEFAULTS.ACTIONS_MIN
            : (actionsCfg.min ??
               actionsCfg.count ??
               DEFAULTS.ACTIONS_MIN);

        const genMax =
          actionsCfg.infinite === true
            ? DEFAULTS.ACTIONS_MAX
            : (actionsCfg.max ??
               actionsCfg.count ??
               DEFAULTS.ACTIONS_MAX);

        const generatorSettings = {
          blocks: {
            simple: {
              digits: selectedDigits,
              includeFive:
                (st.blocks?.simple?.includeFive ??
                  selectedDigits.includes(5)),
              onlyAddition:
                (st.blocks?.simple?.onlyAddition ?? false),
              onlySubtraction:
                (st.blocks?.simple?.onlySubtraction ?? false)
            },
            brothers: {
              active: st.blocks?.brothers?.active ?? false
            },
            friends: {
              active: st.blocks?.friends?.active ?? false
            },
            mix: {
              active: st.blocks?.mix?.active ?? false
            }
          },

          actions: {
            min: genMin,
            max: genMax,
            count: actionsCfg.count,
            infinite: actionsCfg.infinite === true
          },

          // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä—è–¥–æ–≤
          digits: st.digits,

          // "–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–Ω–∏" = –æ–¥–∏–Ω —à–∞–≥ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä—è–¥—ã —Å—Ä–∞–∑—É
          combineLevels: st.combineLevels || false
        };

        logger.info(
          CONTEXT,
          `Generating example digits=${st.digits}, combineLevels=${st.combineLevels}, blocks=`,
          generatorSettings.blocks
        );

        session.currentExample = generateExample(generatorSettings);

        if (
          !session.currentExample ||
          !Array.isArray(session.currentExample.steps)
        ) {
          throw new Error("Empty example generated");
        }

        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —à–∞–≥–∞–º ‚Üí –ø–æ–¥–≥–æ–Ω —à—Ä–∏—Ñ—Ç–∞
        const actionsLen = session.currentExample.steps.length;
        let maxDigitsInStep = 1;
        for (const step of session.currentExample.steps) {
          // step –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ "+7" –∏–ª–∏ "-12"
          const numericPart = String(step).replace(/[^\d-]/g, "");
          const num = parseInt(numericPart, 10);
          if (!isNaN(num)) {
            const lenAbs = Math.abs(num).toString().length;
            if (lenAbs > maxDigitsInStep) {
              maxDigitsInStep = lenAbs;
            }
          }
        }

        // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const input = document.getElementById("answer-input");
        if (input) input.value = "";

        // –†–µ–∂–∏–º –ø–æ–∫–∞–∑–∞ –ø–æ –æ–¥–Ω–æ–º—É —à–∞–≥—É (—Å–∫–æ—Ä–æ—Å—Ç—å –∏–ª–∏ –¥–∏–∫—Ç–æ–≤–∫–∞)
        const shouldUseDictation = actionsLen > 12;
        const effectiveShowSpeed = shouldUseDictation
          ? 2000
          : (st.showSpeedMs || 0);
        const showSpeedActive =
          st.showSpeedEnabled && effectiveShowSpeed > 0;

        // –ï—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ —à–∞–≥–∞–º (–∞–Ω–∏–º–∞—Ü–∏—è), –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –≤–µ—Å—å –ø—Ä–∏–º–µ—Ä —Å—Ä–∞–∑—É
        if (showSpeedActive || shouldUseDictation) {
          exampleView.clear();
        } else {
          // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ä–∞–∑—É –≤—Å—é —Ü–µ–ø–æ—á–∫—É:
          // steps —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ["+3","+1","-7",...]
          exampleView.render(
            session.currentExample.steps,
            displayMode
          );
          requestAnimationFrame(() => {
            adaptExampleFontSize(actionsLen, maxDigitsInStep);
          });
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥ –Ω–∞ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞, –µ—Å–ª–∏ –Ω–∞–¥–æ
        const lockDuringShow = st.lockInputDuringShow !== false;
        if (input) input.disabled = lockDuringShow;

        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑ –ø–æ —à–∞–≥–∞–º
        if (showSpeedActive || shouldUseDictation) {
          isShowing = true;
          showAbort = false;

          await playSequential(
            session.currentExample.steps,
            effectiveShowSpeed,
            { beepOnStep: !!st.beepOnStep }
          );

          if (showAbort) return;
          await delay(
            st.showSpeedPauseAfterChainMs ??
              UI.PAUSE_AFTER_CHAIN_MS
          );
          isShowing = false;

          if (lockDuringShow && input) {
            input.disabled = false;
            input.focus();
          }
        } else {
          if (input) {
            input.disabled = false;
            input.focus();
          }
        }

        logger.debug(
          CONTEXT,
          "New example:",
          session.currentExample.steps,
          "Answer:",
          session.currentExample.answer
        );
      } catch (e) {
        showFatalError(e);
      }
    }

    // === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ ===
    function checkAnswer() {
      const input = document.getElementById("answer-input");

      // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–æ–∫–∞–∑ –ø–æ —à–∞–≥–∞–º –∏ –≤–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
      if (isShowing && (st.lockInputDuringShow !== false)) return;

      const userAnswer = parseInt(input?.value ?? "", 10);
      if (isNaN(userAnswer)) {
        toast.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ");
        return;
      }

      // –ï—Å–ª–∏ –º—ã –∫–ª–∏–∫–∞–µ–º "–û—Ç–≤–µ—Ç–∏—Ç—å" –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ ‚Äî –æ–±—Ä—ã–≤–∞–µ–º –ø–æ–∫–∞–∑
      if (isShowing && (st.lockInputDuringShow === false)) {
        showAbort = true;
        isShowing = false;
        overlay.clear();
      }

      const isCorrect =
        userAnswer === session.currentExample.answer;

      if (isCorrect) {
        session.stats.correct++;
      } else {
        session.stats.incorrect++;
      }
      session.completed++;

      updateStats();
      playSound(isCorrect ? "correct" : "wrong");

      // –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä
      setTimeout(
        () => showNextExample(),
        UI.TRANSITION_DELAY_MS
      );
    }

    // === –¢–∞–π–º–µ—Ä –Ω–∞ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω) ===
    function handleTimeExpired() {
      const correct = session.currentExample?.answer;
      logger.warn(
        CONTEXT,
        "Time expired! Correct answer:",
        correct
      );

      if (st.beepOnTimeout) playSound("wrong");

      session.stats.incorrect++;
      session.completed++;

      updateStats();
      setTimeout(
        () => showNextExample(),
        UI.TIMEOUT_DELAY_MS
      );
    }

    // === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===
    function updateStats() {
      const { correct, incorrect, total } = session.stats;
      const completed = session.completed;
      const el = (id) => document.getElementById(id);

      el("stats-completed") &&
        (el("stats-completed").textContent =
          String(completed));
      el("stats-correct") &&
        (el("stats-correct").textContent =
          String(correct));
      el("stats-incorrect") &&
        (el("stats-incorrect").textContent =
          String(incorrect));

      const percentCorrect =
        completed > 0
          ? Math.round((correct / completed) * 100)
          : 0;
      const percentIncorrect =
        completed > 0
          ? Math.round((incorrect / completed) * 100)
          : 0;

      el("progress-correct") &&
        (el("progress-correct").style.width =
          percentCorrect + "%");
      el("progress-incorrect") &&
        (el("progress-incorrect").style.width =
          percentIncorrect + "%");
      el("percent-correct") &&
        (el("percent-correct").textContent =
          percentCorrect + "%");
      el("percent-incorrect") &&
        (el("percent-incorrect").textContent =
          percentIncorrect + "%");
    }

    // === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ===
    function finishTraining() {
      stopAnswerTimer();
      showAbort = true;
      isShowing = false;
      overlay.clear();
      abacusWrapper.classList.remove("visible");

      logger.info(
        CONTEXT,
        "Training finished:",
        session.stats
      );

      // –†–µ–ø–æ—Ä—Ç–∏–º –Ω–∞—Ä—É–∂—É
      eventBus.emit?.(EVENTS.TRAINING_FINISH, {
        correct: session.stats.correct,
        total: session.stats.total,
        phase: "done"
      }) ||
        eventBus.publish?.(EVENTS.TRAINING_FINISH, {
          correct: session.stats.correct,
          total: session.stats.total,
          phase: "done"
        });
    }

    // === –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —à–∞–≥–æ–≤ –Ω–∞ –æ–≤–µ—Ä–ª–µ–µ ===
    async function playSequential(
      steps,
      intervalMs,
      { beepOnStep = false } = {}
    ) {
      try {
        for (let i = 0; i < steps.length; i++) {
          if (showAbort) break;

          const stepStr = formatStep(steps[i]);
          const isOdd = i % 2 === 0;
          const color = isOdd ? "#EC8D00" : "#6db45c";

          overlay.show(stepStr, color);
          if (beepOnStep) playSound("tick");
          await delay(intervalMs);
          overlay.hide();
          await delay(UI.DELAY_BETWEEN_STEPS_MS);
        }
      } finally {
        overlay.clear();
      }
    }

    // —à–∞–≥–∏ —É –Ω–∞—Å —Ç–µ–ø–µ—Ä—å —É–∂–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–æ –∑–Ω–∞–∫–æ–º,
    // –Ω–∞–ø—Ä–∏–º–µ—Ä "+3", "-7", "+5". –ù–∞–º –ù–ï –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–¥–µ–ª—ã–≤–∞—Ç—å –ø–ª—é—Å.
    function formatStep(step) {
      return String(step);
    }

    function delay(ms) {
      return new Promise((r) => setTimeout(r, ms));
    }

    // === –°–ª—É—à–∞—Ç–µ–ª–∏ ===
    const listeners = [];

    function addListener(element, event, handler) {
      if (!element) return;
      element.addEventListener(event, handler);
      listeners.push({ element, event, handler });
    }

    addListener(
      document.getElementById("btn-show-abacus"),
      "click",
      () => {
        abacusWrapper.classList.toggle("visible");
        const btn = document.getElementById("btn-show-abacus");
        if (btn) {
          btn.textContent = abacusWrapper.classList.contains(
            "visible"
          )
            ? "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å"
            : "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";
        }
      }
    );

    addListener(
      document.getElementById("btn-close-abacus"),
      "click",
      () => {
        abacusWrapper.classList.remove("visible");
        const btn = document.getElementById("btn-show-abacus");
        if (btn) btn.textContent = "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";
      }
    );

    addListener(
      document.getElementById("btn-submit"),
      "click",
      checkAnswer
    );

    addListener(
      document.getElementById("answer-input"),
      "keypress",
      (e) => {
        if (e.key === "Enter") checkAnswer();
      }
    );

    // === –û–±—â–∏–π —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–µ—Ä–∏—é (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)
    if (st.timeLimitEnabled && st.timePerExampleMs > 0) {
      startAnswerTimer(st.timePerExampleMs, {
        onExpire: () => {
          logger.warn(
            CONTEXT,
            "Series time expired!"
          );
          finishTraining();
        },
        textElementId: "answerTimerText",
        barSelector: "#answer-timer .bar"
      });
    }

    // === –¢–∞–π–º–µ—Ä –Ω–∞ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
    // (—ç—Ç–æ—Ç —Ç–∞–π–º–µ—Ä –¥—ã—à–∏—Ç –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∞ –Ω–µ –≤—Å–µ–π —Å–µ—Å—Å–∏–∏)
    if (st.perExampleTimerEnabled && st.perExampleTimeMs > 0) {
      startAnswerTimer(st.perExampleTimeMs, {
        onExpire: () => handleTimeExpired(),
        textElementId: "answerTimerText",
        barSelector: "#answer-timer .bar"
      });
    }

    // === Start
    showNextExample();
    logger.info(
      CONTEXT,
      `Trainer started (${abacusColumns} columns for ${digits}-digit numbers)`
    );

    // === Cleanup
    return () => {
      const wrapper = document.getElementById("abacus-wrapper");
      if (wrapper) wrapper.remove();
      showAbort = true;
      isShowing = false;
      overlay.clear();
      stopAnswerTimer();

      listeners.forEach(({ element, event, handler }) => {
        element.removeEventListener(event, handler);
      });

      logger.debug(
        CONTEXT,
        "Trainer unmounted, listeners cleaned up"
      );
    };
  } catch (err) {
    showFatalError(err);
  }
}

/** Show fatal error using createElement (secure) */
function showFatalError(err) {
  const msg = err?.stack || err?.message || String(err);
  logger.error(CONTEXT, "Fatal error:", err);

  const host =
    document.querySelector(".screen__body") || document.body;

  const errorDiv = document.createElement("div");
  errorDiv.style.cssText =
    "color:#d93025;padding:16px;white-space:pre-wrap";

  const title = document.createElement("b");
  title.textContent = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä.";

  const br = document.createElement("br");

  const message = document.createTextNode(msg);

  errorDiv.append(title, br, message);
  host.insertBefore(errorDiv, host.firstChild);
}

/** Get example count */
function getExampleCount(examplesCfg) {
  if (!examplesCfg) return DEFAULTS.EXAMPLES_COUNT;
  return examplesCfg.infinite
    ? DEFAULTS.EXAMPLES_COUNT
    : (examplesCfg.count ?? DEFAULTS.EXAMPLES_COUNT);
}

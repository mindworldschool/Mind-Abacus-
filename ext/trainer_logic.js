// ext/trainer_logic.js ‚Äî Trainer logic (–ø–∞—Ç—á B —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ retry)
// –ì–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:
// 1. –ú—ã —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã:
//    - onExitTrainer() ‚Üí –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
//    - onShowResultsScreen() ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –ì–õ–û–ë–ê–õ–¨–ù–´–ô —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
// 2. –ö–Ω–æ–ø–∫–∞ "‚èπ –í—ã–π—Ç–∏" –±–æ–ª—å—à–µ –ù–ï –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
// 3. –†–µ–∂–∏–º "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏" –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ: —Ç–æ–ª—å–∫–æ –æ—à–∏–±–æ—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã,
//    –Ω–∏–∫–∞–∫–∏—Ö –Ω–æ–≤—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –æ—à–∏–±–æ–∫.
// 4. finishTraining() —Ç–µ–ø–µ—Ä—å –ù–ï —Ä–µ–Ω–¥–µ—Ä–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω "–ò—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏" –ø—Ä—è–º–æ
//    –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ. –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ state –∏ –≤—ã–∑—ã–≤–∞–µ—Ç onShowResultsScreen().
//    –í–Ω–µ—à–Ω–∏–π —ç–∫—Ä–∞–Ω "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" —Ç–µ–ø–µ—Ä—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω.
//
// –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ (session.mode, reviewQueue, renderResultsScreen –∏ —Ç.–¥.) –º—ã
// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –Ω–µ –ª–æ–º–∞—é—Ç UX.

import { ExampleView } from "./components/ExampleView.js";
import { Abacus } from "./components/AbacusNew.js";
import { generateExample } from "./core/generator.js";
import { startAnswerTimer, stopAnswerTimer } from "../js/utils/timer.js";
import { BigStepOverlay } from "../ui/components/BigStepOverlay.js";
import { playSound } from "../js/utils/sound.js";
import { logger } from "../core/utils/logger.js";
import { UI, DEFAULTS } from "../core/utils/constants.js";
import { eventBus, EVENTS } from "../core/utils/events.js";
import toast from "../ui/components/Toast.js";
import { state, resetResults } from "../core/state.js";

const CONTEXT = "Trainer";

/* ---------------- Layout helpers ---------------- */

function createTrainerLayout(displayMode, exampleCount, t) {
  const layout = document.createElement("div");
  layout.className = `mws-trainer mws-trainer--${displayMode}`;

  // MAIN COLUMN
  const trainerMain = document.createElement("div");
  trainerMain.className = `trainer-main trainer-main--${displayMode}`;

  const exampleArea = document.createElement("div");
  exampleArea.id = "area-example";
  exampleArea.className = "example-view";
  trainerMain.appendChild(exampleArea);

  // SIDE PANEL
  const panelControls = document.createElement("div");
  panelControls.id = "panel-controls";

  // --- Answer input block
  const answerSection = document.createElement("div");
  answerSection.className = "answer-section-panel";

  const answerLabel = document.createElement("div");
  answerLabel.className = "answer-label";
  answerLabel.textContent = t?.("trainer.answerLabel") || "–û—Ç–≤–µ—Ç:";

  const answerInput = document.createElement("input");
  answerInput.type = "number";
  answerInput.id = "answer-input";
  answerInput.placeholder = "";

  const submitBtn = document.createElement("button");
  submitBtn.className = "btn btn--primary";
  submitBtn.id = "btn-submit";
  submitBtn.textContent = t?.("trainer.submitButton") || "–û—Ç–≤–µ—Ç–∏—Ç—å";

  answerSection.append(answerLabel, answerInput, submitBtn);

  // --- Live stats capsule
  const statsCapsule = createResultsCapsule(exampleCount, t);

  // --- Progress bars
  const progressContainer = createProgressContainer(t);

  // --- Timer bar
  const timerContainer = document.createElement("div");
  timerContainer.id = "answer-timer";
  const timerBar = document.createElement("div");
  timerBar.className = "bar";
  timerContainer.appendChild(timerBar);

  const timerText = document.createElement("div");
  timerText.id = "answerTimerText";
  timerText.className = "answer-timer__text";

  // --- Abacus toggle card
  const abacusCard = document.createElement("div");
  abacusCard.className = "panel-card panel-card--compact";

  const abacusBtn = document.createElement("button");
  abacusBtn.className = "btn btn--secondary btn--fullwidth";
  abacusBtn.id = "btn-show-abacus";
  abacusBtn.textContent = t?.("trainer.showAbacus") || "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";

  abacusCard.appendChild(abacusBtn);

  // --- Exit button card
  const exitCard = document.createElement("div");
  exitCard.className = "panel-card panel-card--compact";

  const exitBtn = document.createElement("button");
  exitBtn.id = "btn-exit-trainer";
  exitBtn.className = "btn btn--secondary btn--fullwidth btn--danger";
  exitBtn.textContent = t?.("trainer.exitButton") || "‚èπ –í—ã–π—Ç–∏";

  exitCard.appendChild(exitBtn);

  panelControls.append(
    answerSection,
    statsCapsule,
    progressContainer,
    timerContainer,
    timerText,
    abacusCard,
    exitCard
  );

  layout.append(trainerMain, panelControls);
  return layout;
}

function createResultsCapsule(exampleCount, t) {
  const container = document.createElement("div");
  container.className = "results-capsule-extended";

  const header = document.createElement("div");
  header.className = "results-capsule-extended__header";

  const label = document.createElement("span");
  label.className = "results-capsule-extended__label";
  label.textContent = t?.("confirmation.list.actions") || "–ü—Ä–∏–º–µ—Ä—ã:";

  const counter = document.createElement("span");
  counter.className = "results-capsule-extended__counter";

  const completed = document.createElement("span");
  completed.id = "stats-completed";
  completed.textContent = "0";

  const total = document.createElement("span");
  total.id = "stats-total";
  total.textContent = String(exampleCount);

  counter.append(completed, " / ", total);
  header.append(label, counter);

  const capsule = document.createElement("div");
  capsule.className = "results-capsule";

  // correct cell
  const correctSide = document.createElement("div");
  correctSide.className = "results-capsule__side results-capsule__side--correct";

  const correctIcon = document.createElement("div");
  correctIcon.className = "results-capsule__icon";
  correctIcon.textContent = "‚úì";

  const correctValue = document.createElement("div");
  correctValue.className = "results-capsule__value";
  correctValue.id = "stats-correct";
  correctValue.textContent = "0";

  correctSide.append(correctIcon, correctValue);

  // divider
  const divider = document.createElement("div");
  divider.className = "results-capsule__divider";

  // wrong cell
  const incorrectSide = document.createElement("div");
  incorrectSide.className = "results-capsule__side results-capsule__side--incorrect";

  const incorrectIcon = document.createElement("div");
  incorrectIcon.className = "results-capsule__icon";
  incorrectIcon.textContent = "‚úó";

  const incorrectValue = document.createElement("div");
  incorrectValue.className = "results-capsule__value";
  incorrectValue.id = "stats-incorrect";
  incorrectValue.textContent = "0";

  incorrectSide.append(incorrectIcon, incorrectValue);

  capsule.append(correctSide, divider, incorrectSide);
  container.append(header, capsule);

  return container;
}

function createProgressContainer(t) {
  const container = document.createElement("div");
  container.className = "progress-container";

  const progressBar = document.createElement("div");
  progressBar.className = "progress-bar";

  const correctBar = document.createElement("div");
  correctBar.className = "progress-bar__correct";
  correctBar.id = "progress-correct";
  correctBar.style.width = "0%";

  const incorrectBar = document.createElement("div");
  incorrectBar.className = "progress-bar__incorrect";
  incorrectBar.id = "progress-incorrect";
  incorrectBar.style.width = "0%";

  progressBar.append(correctBar, incorrectBar);

  const labels = document.createElement("div");
  labels.className = "progress-label";

  const correctLabel = document.createElement("span");
  correctLabel.className = "progress-label__correct";
  correctLabel.textContent = t?.("trainer.correctLabel") || "–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ";
  const correctPercent = document.createElement("strong");
  correctPercent.id = "percent-correct";
  correctPercent.textContent = "0%";
  correctLabel.appendChild(correctPercent);

  const incorrectLabel = document.createElement("span");
  incorrectLabel.className = "progress-label__incorrect";
  incorrectLabel.textContent = t?.("trainer.incorrectLabel") || "–û—à–∏–±–∫–∏: ";
  const incorrectPercent = document.createElement("strong");
  incorrectPercent.id = "percent-incorrect";
  incorrectPercent.textContent = "0%";
  incorrectLabel.appendChild(incorrectPercent);

  labels.append(correctLabel, incorrectLabel);
  container.append(progressBar, labels);

  return container;
}

function createAbacusWrapper() {
  const wrapper = document.createElement("div");
  wrapper.className = "abacus-wrapper";
  wrapper.id = "abacus-wrapper";

  const header = document.createElement("div");
  header.className = "abacus-header";

  const title = document.createElement("span");
  title.className = "abacus-title";
  title.textContent = "üßÆ –ê–±–∞–∫—É—Å";

  const closeBtn = document.createElement("button");
  closeBtn.className = "abacus-close-btn";
  closeBtn.id = "btn-close-abacus";
  closeBtn.title = "–ó–∞–∫—Ä—ã—Ç—å";
  closeBtn.textContent = "√ó";

  header.append(title, closeBtn);

  const container = document.createElement("div");
  container.id = "floating-abacus-container";

  wrapper.append(header, container);
  return wrapper;
}

/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –∏—Ç–æ–≥–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏"
 * –û–°–¢–ê–í–õ–Ø–ï–ú –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
 * –í—Å—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å —É—Ö–æ–¥–∏—Ç –Ω–∞—Ä—É–∂—É.
 */
function renderResultsScreen(rootNode, session, { t, onRestart, onRetryErrors, onBackToSettings }) {
  rootNode.innerHTML = "";

  const wrapper = document.createElement("div");
  wrapper.className = "results-screen";

  const titleEl = document.createElement("h2");
  titleEl.className = "results-screen__title";
  titleEl.textContent = t?.("results.title") || "–ò—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏";

  const descEl = document.createElement("div");
  descEl.className = "results-screen__desc";
  descEl.textContent =
    t?.("results.description") || "–¢–∞–∫ –ø—Ä–æ—à–ª–∞ –ø–æ–ø—ã—Ç–∫–∞.";

  const statsEl = document.createElement("div");
  statsEl.className = "results-screen__stats";

  const correctLine = document.createElement("div");
  correctLine.className = "results-screen__row results-screen__row--success";
  const correctLabel = document.createElement("span");
  correctLabel.textContent =
    t?.("results.success") || "–í–µ—Ä–Ω–æ";
  const correctValue = document.createElement("strong");
  correctValue.textContent = `${session.stats.correct}/${session.stats.total}`;
  correctLine.append(correctLabel, correctValue);

  const mistakeLine = document.createElement("div");
  mistakeLine.className = "results-screen__row results-screen__row--fail";
  const mistakesLabel = document.createElement("span");
  mistakesLabel.textContent =
    t?.("results.mistakes") || "–û—à–∏–±–∫–∏";
  const mistakesValue = document.createElement("strong");
  mistakesValue.textContent = `${session.stats.incorrect}`;
  mistakeLine.append(mistakesLabel, mistakesValue);

  statsEl.append(correctLine, mistakeLine);

  const actionsEl = document.createElement("div");
  actionsEl.className = "results-screen__actions";

  if (
    session.incorrectExamples &&
    session.incorrectExamples.length > 0 &&
    session.stats.incorrect > 0
  ) {
    const retryBtn = document.createElement("button");
    retryBtn.className = "btn btn--primary";
    retryBtn.id = "btn-retry-errors";
    retryBtn.textContent =
      t?.("results.retryErrors") || "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏";

    retryBtn.addEventListener("click", () => {
      onRetryErrors?.();
    });

    actionsEl.appendChild(retryBtn);
  }

  const backBtn = document.createElement("button");
  backBtn.className = "btn btn--secondary";
  backBtn.id = "btn-results-back";
  backBtn.textContent =
    t?.("results.cta") || "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ";

  backBtn.addEventListener("click", () => {
    onBackToSettings?.();
  });

  actionsEl.appendChild(backBtn);

  wrapper.append(titleEl, descEl, statsEl, actionsEl);
  rootNode.appendChild(wrapper);
}

/* ---------------- Trainer main ---------------- */

/**
 * mountTrainerUI
 *
 * @param {HTMLElement} container
 * @param {{
 *   t: Function,
 *   state: { settings: any },
 *   retryMode?: { enabled: boolean, examples: Array<{steps: string[], answer: number}> },
 *   onExitTrainer?: Function,          // —É–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 *   onShowResultsScreen?: Function     // –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
 * }}
 */
export function mountTrainerUI(container, {
  t,
  state: stateFromCaller,
  retryMode,
  onExitTrainer,
  onShowResultsScreen
}) {
  try {
    logger.info(CONTEXT, "Mounting trainer UI...");
    logger.debug(CONTEXT, "Settings:", stateFromCaller?.settings);

    const st = stateFromCaller?.settings ?? {};
    const actionsCfg = st.actions ?? {};
    const examplesCfg = st.examples ?? {};
    const blockSimpleDigits = Array.isArray(st?.blocks?.simple?.digits)
      ? st.blocks.simple.digits
      : [];

    const digits = parseInt(st.digits, 10) || 1;
    const abacusColumns = digits + 1;
    const displayMode = st.inline ? "inline" : "column";

    // ====== –†–ï–ñ–ò–ú –ó–ê–ü–£–°–ö–ê: –æ–±—ã—á–Ω—ã–π –∏–ª–∏ retry –ø–æ—Å–ª–µ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏"
    const isRetryStartup =
      retryMode?.enabled && Array.isArray(retryMode.examples);

    // –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ä–∏—è)
    const baseExampleCount = getExampleCount(examplesCfg);

    // —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–µ–∞–ª—å–Ω–æ —Ä–µ—à–∞–µ–º –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏:
    const totalForThisRun = isRetryStartup
      ? retryMode.examples.length
      : baseExampleCount;

    // === —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    const session = {
      currentExample: null,

      stats: {
        correct: 0,
        incorrect: 0,
        total: totalForThisRun
      },

      completed: 0,

      // –º–∞—Å—Å–∏–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
      incorrectExamples: [],

      // —Ä–µ–∂–∏–º –ª–æ–≥–∏–∫–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞:
      //  - "main": –æ–±—ã—á–Ω–∞—è —Å–µ—Ä–∏—è (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã)
      //  - "review": –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ (–±–µ—Ä—ë–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤)
      mode: isRetryStartup ? "review" : "main",

      reviewQueue: isRetryStartup
        ? retryMode.examples.map(e => ({
            steps: [...e.steps],
            answer: e.answer
          }))
        : [],

      reviewIndex: 0
    };

    // === DOM —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞
    const layout = createTrainerLayout(displayMode, totalForThisRun, t);
    container.innerHTML = "";
    container.appendChild(layout);

    // Abacus wrapper
    const oldAbacus = document.getElementById("abacus-wrapper");
    if (oldAbacus) oldAbacus.remove();

    const abacusWrapper = createAbacusWrapper();
    document.body.appendChild(abacusWrapper);

    const exampleView = new ExampleView(
      document.getElementById("area-example")
    );

    const abacus = new Abacus(
      document.getElementById("floating-abacus-container"),
      abacusColumns
    );

    const overlayColor =
      getComputedStyle(document.documentElement).getPropertyValue(
        "--color-primary"
      )?.trim() || "#EC8D00";
    const overlay = new BigStepOverlay(
      st.bigDigitScale ?? UI.BIG_DIGIT_SCALE,
      overlayColor
    );

    if (st.mode === "abacus") {
      abacusWrapper.classList.add("visible");
      const btn = document.getElementById("btn-show-abacus");
      if (btn) {
        btn.textContent =
          t?.("trainer.hideAbacus") || "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å";
      }
    }

    let isShowing = false;
    let showAbort = false;

    /* ---------- helpers ---------- */

    function adaptExampleFontSize(actionsCount, maxDigitsInOneStep) {
      const exampleLines = document.querySelectorAll(
        "#area-example .example__line"
      );

      if (!exampleLines.length) return;

      const actionsFactor = Math.min(actionsCount, 12) / 12;
      const digitsFactor = Math.min(maxDigitsInOneStep, 9) / 9;
      const complexityFactor = (actionsFactor + digitsFactor) / 2;

      const minFontSize = 24;
      const maxFontSize = 96;
      const fontSize =
        maxFontSize -
        complexityFactor * (maxFontSize - minFontSize);

      exampleLines.forEach((line) => {
        line.style.setProperty(
          "font-size",
          `${Math.round(fontSize)}px`,
          "important"
        );
        line.style.setProperty("line-height", "1.2", "important");
      });
    }

    function buildGeneratorSettings() {
      const selectedDigits =
        blockSimpleDigits.length > 0
          ? blockSimpleDigits.map((d) => parseInt(d, 10))
          : [1, 2, 3, 4];

      const genMin =
        actionsCfg.infinite === true
          ? DEFAULTS.ACTIONS_MIN
          : (actionsCfg.min ??
             actionsCfg.count ??
             DEFAULTS.ACTIONS_MIN);

      const genMax =
        actionsCfg.infinite === true
          ? DEFAULTS.ACTIONS_MAX
          : (actionsCfg.max ??
             actionsCfg.count ??
             DEFAULTS.ACTIONS_MAX);

      return {
        blocks: {
          simple: {
            digits: selectedDigits,
            includeFive:
              (st.blocks?.simple?.includeFive ??
                selectedDigits.includes(5)),
            onlyAddition:
              (st.blocks?.simple?.onlyAddition ?? false),
            onlySubtraction:
              (st.blocks?.simple?.onlySubtraction ?? false)
          },
          brothers: {
            active: st.blocks?.brothers?.active ?? false,
            digits: st.blocks?.brothers?.digits ?? [4],
            onlyAddition: st.blocks?.brothers?.onlyAddition ?? false,
            onlySubtraction: st.blocks?.brothers?.onlySubtraction ?? false
          },
          friends: {
            active: st.blocks?.friends?.active ?? false
          },
          mix: {
            active: st.blocks?.mix?.active ?? false
          }
        },

        actions: {
          min: genMin,
          max: genMax,
          count: actionsCfg.count,
          infinite: actionsCfg.infinite === true
        },

        digits: st.digits,
        combineLevels: st.combineLevels || false
      };
    }

    function delay(ms) {
      return new Promise((r) => setTimeout(r, ms));
    }

    function formatStep(step) {
      // —à–∞–≥–∏ —É –Ω–∞—Å —É–∂–µ —Å–æ –∑–Ω–∞–∫–æ–º "+3"/"-2"
      return String(step);
    }

    async function playSequential(
      steps,
      intervalMs,
      { beepOnStep = false } = {}
    ) {
      try {
        for (let i = 0; i < steps.length; i++) {
          if (showAbort) break;

          const stepStr = formatStep(steps[i]);
          const isOdd = i % 2 === 0;
          const color = isOdd ? "#EC8D00" : "#6db45c";

          overlay.show(stepStr, color);
          if (beepOnStep) playSound("tick");
          await delay(intervalMs);
          overlay.hide();
          await delay(UI.DELAY_BETWEEN_STEPS_MS);
        }
      } finally {
        overlay.clear();
      }
    }

    function updateStatsUI() {
      const { correct, incorrect, total } = session.stats;
      const completed = session.completed;
      const el = (id) => document.getElementById(id);

      if (el("stats-completed"))
        el("stats-completed").textContent = String(completed);
      if (el("stats-correct"))
        el("stats-correct").textContent = String(correct);
      if (el("stats-incorrect"))
        el("stats-incorrect").textContent = String(incorrect);

      const percentCorrect =
        completed > 0
          ? Math.round((correct / completed) * 100)
          : 0;
      const percentIncorrect =
        completed > 0
          ? Math.round((incorrect / completed) * 100)
          : 0;

      if (el("progress-correct"))
        el("progress-correct").style.width =
          percentCorrect + "%";
      if (el("progress-incorrect"))
        el("progress-incorrect").style.width =
          percentIncorrect + "%";

      if (el("percent-correct"))
        el("percent-correct").textContent =
          percentCorrect + "%";
      if (el("percent-incorrect"))
        el("percent-incorrect").textContent =
          percentIncorrect + "%";
    }

    function getNextExample() {
      // —Ä–µ–∂–∏–º review: –±–µ—Ä—ë–º –∑–∞—Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—à–∏–±–æ—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
      if (session.mode === "review") {
        if (session.reviewIndex >= session.reviewQueue.length) {
          // –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–≤—Ç–æ—Ä –æ—à–∏–±–æ–∫
          finishTraining();
          return null;
        }
        return session.reviewQueue[session.reviewIndex];
      }

      // –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º main: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
      return generateExample(buildGeneratorSettings());
    }

    async function showNextExample() {
      overlay.clear();
      showAbort = true;
      isShowing = false;

      // –µ—Å–ª–∏ —Ä–µ—à–∏–ª–∏ –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ–º
      if (session.completed >= session.stats.total) {
        finishTraining();
        return;
      }

      const ex = getNextExample();
      if (!ex || !Array.isArray(ex.steps)) {
        finishTraining();
        return;
      }

      session.currentExample = ex;

      // –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
      const actionsLen = ex.steps.length;
      let maxDigitsInStep = 1;
      for (const step of ex.steps) {
        const numericPart = String(step).replace(/[^\d-]/g, "");
        const num = parseInt(numericPart, 10);
        if (!isNaN(num)) {
          const lenAbs = Math.abs(num).toString().length;
          if (lenAbs > maxDigitsInStep) {
            maxDigitsInStep = lenAbs;
          }
        }
      }

      // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
      const input = document.getElementById("answer-input");
      if (input) input.value = "";

      // —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ —à–∞–≥–æ–≤
      const shouldUseDictation = actionsLen > 12;
      const effectiveShowSpeed = shouldUseDictation
        ? 2000
        : (st.showSpeedMs || 0);
      const showSpeedActive =
        st.showSpeedEnabled && effectiveShowSpeed > 0;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —à–∞–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±—Ä–∞—Ç—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã ‚Üí —Å—Ç—Ä–æ–∫–∏)
const displaySteps = ex.steps.map(step => {
  if (typeof step === "string") return step;           // "+3"
  if (step.step) return step.step;                     // –±—Ä–∞—Ç—Å–∫–∏–π: {step: "+1", ...}
  return String(step);                                 // fallback
});

// –∫–∞–∫ —Ä–∏—Å—É–µ–º –ø—Ä–∏–º–µ—Ä
if (showSpeedActive || shouldUseDictation) {
  // –¥–∏–∫—Ç–æ–≤–∫–∞: –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–∏–∫–æ–º
  const area = document.getElementById("area-example");
  if (area) area.innerHTML = "";
} else {
  exampleView.render(displaySteps, displayMode);  // üî• –∏—Å–ø–æ–ª—å–∑—É–µ–º displaySteps
  requestAnimationFrame(() => {
    adaptExampleFontSize(actionsLen, maxDigitsInStep);
  });
}

      // –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –∏–Ω–ø—É—Ç –≤–æ –≤—Ä–µ–º—è –¥–∏–∫—Ç–æ–≤–∫–∏
      const lockDuringShow = st.lockInputDuringShow !== false;
      if (input) input.disabled = lockDuringShow;

    // === –°–¢–ê–õ–û ===
if (showSpeedActive || shouldUseDictation) {
  isShowing = true;
  showAbort = false;
  await playSequential(
    displaySteps,                      // –∏—Å–ø–æ–ª—å–∑—É–µ–º displaySteps
    effectiveShowSpeed,
    { beepOnStep: !!st.beepOnStep }
  );
        if (showAbort) return;
        await delay(
          st.showSpeedPauseAfterChainMs ??
            UI.PAUSE_AFTER_CHAIN_MS
        );
        isShowing = false;
        if (lockDuringShow && input) {
          input.disabled = false;
          input.focus();
        }
      } else {
        if (input) {
          input.disabled = false;
          input.focus();
        }
      }

      logger.debug(
        CONTEXT,
        "Next example:",
        ex.steps,
        "Answer:",
        ex.answer,
        "mode:",
        session.mode
      );
    }

    function checkAnswer() {
      const input = document.getElementById("answer-input");
      if (!input) return;

      // –Ω–µ –¥–∞—ë–º –æ—Ç–≤–µ—á–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ
      if (isShowing && st.lockInputDuringShow !== false) return;

      const userAnswer = parseInt(input.value ?? "", 10);
      if (Number.isNaN(userAnswer)) {
        toast.warning(
          t?.("trainer.pleaseEnterNumber") ||
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
        );
        return;
      }

      // –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω –æ—Ç–≤–µ—Ç –≤–æ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ ‚Üí –æ–±—Ä—ã–≤–∞–µ–º –ø–æ–∫–∞–∑
      if (isShowing && st.lockInputDuringShow === false) {
        showAbort = true;
        isShowing = false;
        overlay.clear();
      }

      const correctAnswer = session.currentExample.answer;
      const isCorrect = userAnswer === correctAnswer;

      if (session.mode === "review") {
        // –≤ —Ä–µ–∂–∏–º–µ review –º—ã –Ω–µ –º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç—á–∏–∫ total,
        // –Ω–æ –º—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
        if (!isCorrect) {
          // –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –æ—à–∏–±–∫–∞ ‚Äî –∫–∏–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –≤ —Ö–≤–æ—Å—Ç –µ—â—ë —Ä–∞–∑
          session.reviewQueue.push({
            steps: session.currentExample.steps.slice(),
            answer: correctAnswer,
            userAnswer
          });
        }
        session.reviewIndex++;
        // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É "—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–Ω–æ / –æ—à–∏–±–æ—á–Ω–æ" –¥–ª—è retry-—Å–µ—Å—Å–∏–∏
        if (isCorrect) {
          session.stats.correct++;
        } else {
          session.stats.incorrect++;
        }
      } else {
        // –æ—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ä–∏—è
        if (isCorrect) {
          session.stats.correct++;
        } else {
          session.stats.incorrect++;
          session.incorrectExamples.push({
            steps: session.currentExample.steps.slice(),
            answer: correctAnswer,
            userAnswer
          });
        }
        session.completed++;
      }

      updateStatsUI();
      playSound(isCorrect ? "correct" : "wrong");

      setTimeout(showNextExample, UI.TRANSITION_DELAY_MS);
    }

    function handleTimeExpired() {
      playSound("wrong");

      const correctAnswer = session.currentExample
        ? session.currentExample.answer
        : null;

      if (session.mode === "review") {
        // —Ç–∞–π–º-–∞—É—Ç –≤ retry-—Å–µ—Å—Å–∏–∏: —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É –∏ –¥–≤–∏–≥–∞–µ–º –¥–∞–ª—å—à–µ
        session.stats.incorrect++;
        session.reviewIndex++;
      } else {
        // —Ç–∞–π–º-–∞—É—Ç –≤ –æ–±—ã—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
        session.stats.incorrect++;
        session.incorrectExamples.push({
          steps: session.currentExample
            ? session.currentExample.steps.slice()
            : [],
          answer: correctAnswer,
          userAnswer: null
        });
        session.completed++;
      }

      updateStatsUI();
      setTimeout(showNextExample, UI.TIMEOUT_DELAY_MS);
    }

    /**
     * –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Ä–∏–∏.
     * –¢–µ–ø–µ—Ä—å –º—ã –ù–ï —Ä–µ–Ω–¥–µ—Ä–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –∏—Ç–æ–≥–æ–≤ (—Å–∫—Ä–∏–Ω 1).
     *
     * –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ:
     *  - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ global state
     *  - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º retryMode –≤ global state
     *  - —Å–æ—Ö—Ä–∞–Ω—è–µ–º lastSettings
     *  - –≤—ã–∑—ã–≤–∞–µ–º onShowResultsScreen(), —á—Ç–æ–±—ã —Ä–æ—É—Ç–µ—Ä –ø–æ–∫–∞–∑–∞–ª
     *    –≤–Ω–µ—à–Ω–∏–π —ç–∫—Ä–∞–Ω "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" (—Å–∫—Ä–∏–Ω 2)
     */
    function finishTraining() {
      stopAnswerTimer();
      showAbort = true;
      isShowing = false;
      overlay.clear();
      abacusWrapper.classList.remove("visible");

      logger.info(
        CONTEXT,
        "Training finished:",
        {
          stats: session.stats,
          incorrectExamples: session.incorrectExamples,
          mode: session.mode
        }
      );

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π state, —á—Ç–æ–±—ã results.js –º–æ–≥ —ç—Ç–æ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å
      state.results = {
        total: session.stats.total,
        success: session.stats.correct,
        wrongExamples:
          session.incorrectExamples.slice()
      };

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –æ—à–∏–±–æ–∫,
      // —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–∞—Å—Ç —ç—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ mountTrainerUI()
      state.retryMode = {
        enabled: session.incorrectExamples.length > 0,
        examples: session.incorrectExamples.slice()
      };

      // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ
      // –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–ª–∏ retry —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      state.lastSettings = st;

      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞—Ä—É–∂—É: –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
      onShowResultsScreen?.();

      // —Å–æ–±—ã—Ç–∏–µ –Ω–∞—Ä—É–∂—É –¥–ª—è –ª—é–±—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      eventBus.emit?.(EVENTS.TRAINING_FINISH, {
        correct: session.stats.correct,
        total: session.stats.total,
        wrong: session.stats.incorrect,
        phase: "done",
        wrongExamples: session.incorrectExamples.slice()
      }) || eventBus.publish?.(EVENTS.TRAINING_FINISH, {
        correct: session.stats.correct,
        total: session.stats.total,
        wrong: session.stats.incorrect,
        phase: "done",
        wrongExamples: session.incorrectExamples.slice()
      });
    }

    /* —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–∞–¥–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
       —Ç–µ–ø–µ—Ä—å –º—ã –Ω–µ –∑–æ–≤—ë–º –∏—Ö –∏–∑ finishTraining() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ */
    function remountTrainerViewForReview() {
      session.mode = "review";
      session.reviewQueue = session.incorrectExamples.map(
        (e) => ({
          steps: [...e.steps],
          answer: e.answer
        })
      );
      session.reviewIndex = 0;

      const newLayout = createTrainerLayout(
        displayMode,
        session.reviewQueue.length,
        t
      );
      container.innerHTML = "";
      container.appendChild(newLayout);

      rebindDynamicRefsAfterRemount();
      showNextExample();
    }

    function rebindDynamicRefsAfterRemount() {
      attachListeners(); // –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–≤—ã–µ DOM-–Ω–æ–¥—ã
      updateStatsUI();

      const btnToggleAbacus = document.getElementById("btn-show-abacus");
      if (btnToggleAbacus) {
        btnToggleAbacus.textContent = abacusWrapper.classList.contains("visible")
          ? (t?.("trainer.hideAbacus") || "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å")
          : (t?.("trainer.showAbacus") || "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å");
      }
    }

    /* ---------- events / listeners ---------- */

    const listeners = [];

    function addListener(element, event, handler) {
      if (!element) return;
      element.addEventListener(event, handler);
      listeners.push({ element, event, handler });
    }

    function attachListeners() {
      addListener(
        document.getElementById("btn-show-abacus"),
        "click",
        () => {
          abacusWrapper.classList.toggle("visible");
          const btn = document.getElementById("btn-show-abacus");
          if (btn) {
            btn.textContent = abacusWrapper.classList.contains("visible")
              ? (t?.("trainer.hideAbacus") || "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å")
              : (t?.("trainer.showAbacus") || "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å");
          }
        }
      );

      addListener(
        document.getElementById("btn-close-abacus"),
        "click",
        () => {
          abacusWrapper.classList.remove("visible");
          const btn = document.getElementById("btn-show-abacus");
          if (btn)
            btn.textContent =
              t?.("trainer.showAbacus") ||
              "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";
        }
      );

      addListener(
        document.getElementById("btn-submit"),
        "click",
        checkAnswer
      );

      addListener(
        document.getElementById("answer-input"),
        "keypress",
        (e) => {
          if (e.key === "Enter") checkAnswer();
        }
      );

      // üõ† –ö–ù–û–ü–ö–ê "–í–´–ô–¢–ò"
      // –†–∞–Ω—å—à–µ –º—ã —Ç—É—Ç –µ—â—ë –¥–µ—Ä–≥–∞–ª–∏ onShowResultsScreen(). –≠—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:
      // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—É–º–∞–ª "—è –≤—ã—Ö–æ–∂—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", –∞ –º—ã –≤–µ–ª–∏ –µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
      // –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û onExitTrainer().
      addListener(
        document.getElementById("btn-exit-trainer"),
        "click",
        () => {
          stopAnswerTimer();
          showAbort = true;
          isShowing = false;
          overlay.clear();
          abacusWrapper.classList.remove("visible");

          // –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω–∏–π —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –ø–æ–∫–∞–∑–∞–ª—Å—è —Å–ª—É—á–∞–π–Ω–æ
          resetResults();
          state.retryMode = {
            enabled: false,
            examples: []
          };

          // –ù–∞–≤–∏–≥–∞—Ü–∏—è: —É–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç–∫—Ä–∞–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
          onExitTrainer?.();

          eventBus.emit?.(EVENTS.TRAINING_FINISH, {
            correct: session.stats.correct,
            total: session.stats.total,
            phase: "exit"
          }) ||
            eventBus.publish?.(EVENTS.TRAINING_FINISH, {
              correct: session.stats.correct,
              total: session.stats.total,
              phase: "exit"
            });
        }
      );
    }

    attachListeners();

    // === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç (–æ–±—â–∏–π —Ç–∞–π–º–µ—Ä –≤—Å–µ–π —Å–µ—Å—Å–∏–∏)
    if (st.timeLimitEnabled && st.timePerExampleMs > 0) {
      startAnswerTimer(st.timePerExampleMs, {
        onExpire: () => {
          logger.warn(CONTEXT, "Series time expired!");
          finishTraining();
        },
        textElementId: "answerTimerText",
        barSelector: "#answer-timer .bar"
      });
    }

    // === –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä
    if (st.perExampleTimerEnabled && st.perExampleTimeMs > 0) {
      startAnswerTimer(st.perExampleTimeMs, {
        onExpire: () => handleTimeExpired(),
        textElementId: "answerTimerText",
        barSelector: "#answer-timer .bar"
      });
    }

    // === –°—Ç–∞—Ä—Ç—É–µ–º
    showNextExample();
    logger.info(
      CONTEXT,
      `Trainer started (retryStartup=${isRetryStartup}, cols=${abacusColumns}, digits=${digits})`
    );

    // === Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      const wrapper = document.getElementById("abacus-wrapper");
      if (wrapper) wrapper.remove();
      showAbort = true;
      isShowing = false;
      overlay.clear();
      stopAnswerTimer();

      listeners.forEach(({ element, event, handler }) => {
        element.removeEventListener(event, handler);
      });

      logger.debug(
        CONTEXT,
        "Trainer unmounted, listeners cleaned up"
      );
    };
  } catch (err) {
    showFatalError(err);
  }
}

/* ---------------- misc helpers ---------------- */

function showFatalError(err) {
  const msg = err?.stack || err?.message || String(err);
  logger.error(CONTEXT, "Fatal error:", err);

  const host =
    document.querySelector(".screen__body") || document.body;

  const errorDiv = document.createElement("div");
  errorDiv.style.cssText =
    "color:#d93025;padding:16px;white-space:pre-wrap";

  const title = document.createElement("b");
  title.textContent = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä.";

  const br = document.createElement("br");

  const message = document.createTextNode(msg);

  errorDiv.append(title, br, message);
  host.insertBefore(errorDiv, host.firstChild);
}

function getExampleCount(examplesCfg) {
  if (!examplesCfg) return DEFAULTS.EXAMPLES_COUNT;
  return examplesCfg.infinite
    ? DEFAULTS.EXAMPLES_COUNT
    : (examplesCfg.count ?? DEFAULTS.EXAMPLES_COUNT);
}


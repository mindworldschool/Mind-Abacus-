// ext/trainer_logic.js ‚Äî Trainer logic (–≤–∞—Ä–∏–∞–Ω—Ç B: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ç—á –ø–æ–≤–µ—Ä—Ö –º–∞—Å—Ç–µ—Ä–∞)
// –ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è: —Ç—Ä–µ–Ω–∞–∂—ë—Ä –±–æ–ª—å—à–µ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —ç–∫—Ä–∞–Ω
// "–ò—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏", –∞ –æ—Ç–¥–∞—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Ä—É–∂—É. –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
// (—Å–∫—Ä–∏–Ω 2) —Ç–µ–ø–µ—Ä—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω.
//
// –ß—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ç–≤–æ–µ–π —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π:
//  - finishTraining() –±–æ–ª—å—à–µ –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç renderResultsScreen()
//    –∏ –ù–ï —Ä–µ–Ω–¥–µ—Ä–∏—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞
//  - –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ finishTraining() –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ state.results
//    –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç state.retryMode
//  - –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç onBackToSettings?.() –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
//    –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —ç–∫—Ä–∞–Ω "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" (—Å–∫—Ä–∏–Ω 2)
//
// –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ (session.mode, reviewQueue, remountTrainerViewForReview,
// renderResultsScreen –∏ —Ç.–¥.) –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª–æ–º–∞—Ç—å —Å–≤—è–∑–∏.

import { ExampleView } from "./components/ExampleView.js";
import { Abacus } from "./components/AbacusNew.js";
import { generateExample } from "./core/generator.js";
import { startAnswerTimer, stopAnswerTimer } from "../js/utils/timer.js";
import { BigStepOverlay } from "../ui/components/BigStepOverlay.js";
import { playSound } from "../js/utils/sound.js";
import { logger } from "../core/utils/logger.js";
import { UI, DEFAULTS } from "../core/utils/constants.js";
import { eventBus, EVENTS } from "../core/utils/events.js";
import toast from "../ui/components/Toast.js";
import { state, resetResults } from "../core/state.js";

const CONTEXT = "Trainer";

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ layout —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ (–ø—Ä–∏–º–µ—Ä, –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞, –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å).
 * –í–ù–ò–ú–ê–ù–ò–ï: –∑–¥–µ—Å—å –∂–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "‚èπ –í—ã–π—Ç–∏".
 */
function createTrainerLayout(displayMode, exampleCount, t) {
  const layout = document.createElement("div");
  layout.className = `mws-trainer mws-trainer--${displayMode}`;

  // ===== MAIN AREA =====
  const trainerMain = document.createElement("div");
  trainerMain.className = `trainer-main trainer-main--${displayMode}`;

  const exampleArea = document.createElement("div");
  exampleArea.id = "area-example";
  exampleArea.className = "example-view";
  trainerMain.appendChild(exampleArea);

  // ===== CONTROLS PANEL =====
  const panelControls = document.createElement("div");
  panelControls.id = "panel-controls";

  // --- Answer section
  const answerSection = document.createElement("div");
  answerSection.className = "answer-section-panel";

  const answerLabel = document.createElement("div");
  answerLabel.className = "answer-label";
  answerLabel.textContent =
    t?.("trainer.answerLabel") || "–û—Ç–≤–µ—Ç:";

  const answerInput = document.createElement("input");
  answerInput.type = "number";
  answerInput.id = "answer-input";
  answerInput.placeholder = "";

  const submitBtn = document.createElement("button");
  submitBtn.className = "btn btn--primary";
  submitBtn.id = "btn-submit";
  submitBtn.textContent =
    t?.("trainer.submitButton") || "–û—Ç–≤–µ—Ç–∏—Ç—å";

  answerSection.append(answerLabel, answerInput, submitBtn);

  // --- Results capsule (per-session stats)
  const resultsCapsuleExt = createResultsCapsule(exampleCount, t);

  // --- Progress container (progress bars + percents)
  const progressContainer = createProgressContainer(t);

  // --- Timer strip + text
  const timerContainer = document.createElement("div");
  timerContainer.id = "answer-timer";
  const timerBar = document.createElement("div");
  timerBar.className = "bar";
  timerContainer.appendChild(timerBar);

  const timerText = document.createElement("div");
  timerText.id = "answerTimerText";
  timerText.className = "answer-timer__text";

  // --- Abacus toggle
  const panelCard = document.createElement("div");
  panelCard.className = "panel-card panel-card--compact";

  const abacusBtn = document.createElement("button");
  abacusBtn.className = "btn btn--secondary btn--fullwidth";
  abacusBtn.id = "btn-show-abacus";
  abacusBtn.textContent =
    t?.("trainer.showAbacus") || "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";

  panelCard.appendChild(abacusBtn);

  // --- Exit button (–∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏)
  const exitWrapper = document.createElement("div");
  exitWrapper.className = "panel-card panel-card--compact";

  const exitBtn = document.createElement("button");
  exitBtn.id = "btn-exit-trainer";
  exitBtn.className = "btn btn--secondary btn--fullwidth btn--danger";
  exitBtn.textContent =
    t?.("trainer.exitButton") || "‚èπ –í—ã–π—Ç–∏";

  exitWrapper.appendChild(exitBtn);

  // add everything to side panel
  panelControls.append(
    answerSection,
    resultsCapsuleExt,
    progressContainer,
    timerContainer,
    timerText,
    panelCard,
    exitWrapper
  );

  layout.append(trainerMain, panelControls);
  return layout;
}

function createResultsCapsule(exampleCount, t) {
  const container = document.createElement("div");
  container.className = "results-capsule-extended";

  const header = document.createElement("div");
  header.className = "results-capsule-extended__header";

  const label = document.createElement("span");
  label.className = "results-capsule-extended__label";
  label.textContent =
    t?.("confirmation.list.actions") || "–ü—Ä–∏–º–µ—Ä—ã:";

  const counter = document.createElement("span");
  counter.className = "results-capsule-extended__counter";

  const completed = document.createElement("span");
  completed.id = "stats-completed";
  completed.textContent = "0";

  const total = document.createElement("span");
  total.id = "stats-total";
  total.textContent = String(exampleCount);

  counter.append(completed, " / ", total);
  header.append(label, counter);

  const capsule = document.createElement("div");
  capsule.className = "results-capsule";

  // Correct side
  const correctSide = document.createElement("div");
  correctSide.className =
    "results-capsule__side results-capsule__side--correct";

  const correctIcon = document.createElement("div");
  correctIcon.className = "results-capsule__icon";
  correctIcon.textContent = "‚úì";

  const correctValue = document.createElement("div");
  correctValue.className = "results-capsule__value";
  correctValue.id = "stats-correct";
  correctValue.textContent = "0";

  correctSide.append(correctIcon, correctValue);

  const divider = document.createElement("div");
  divider.className = "results-capsule__divider";

  // Incorrect side
  const incorrectSide = document.createElement("div");
  incorrectSide.className =
    "results-capsule__side results-capsule__side--incorrect";

  const incorrectIcon = document.createElement("div");
  incorrectIcon.className = "results-capsule__icon";
  incorrectIcon.textContent = "‚úó";

  const incorrectValue = document.createElement("div");
  incorrectValue.className = "results-capsule__value";
  incorrectValue.id = "stats-incorrect";
  incorrectValue.textContent = "0";

  incorrectSide.append(incorrectIcon, incorrectValue);

  capsule.append(correctSide, divider, incorrectSide);
  container.append(header, capsule);
  return container;
}

function createProgressContainer(t) {
  const container = document.createElement("div");
  container.className = "progress-container";

  const progressBar = document.createElement("div");
  progressBar.className = "progress-bar";

  const correctBar = document.createElement("div");
  correctBar.className = "progress-bar__correct";
  correctBar.id = "progress-correct";
  correctBar.style.width = "0%";

  const incorrectBar = document.createElement("div");
  incorrectBar.className = "progress-bar__incorrect";
  incorrectBar.id = "progress-incorrect";
  incorrectBar.style.width = "0%";

  progressBar.append(correctBar, incorrectBar);

  const labels = document.createElement("div");
  labels.className = "progress-label";

  const correctLabel = document.createElement("span");
  correctLabel.className = "progress-label__correct";
  correctLabel.textContent =
    t?.("trainer.correctLabel") || "–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ";
  const correctPercent = document.createElement("strong");
  correctPercent.id = "percent-correct";
  correctPercent.textContent = "0%";
  correctLabel.appendChild(correctPercent);

  const incorrectLabel = document.createElement("span");
  incorrectLabel.className = "progress-label__incorrect";
  incorrectLabel.textContent =
    t?.("trainer.incorrectLabel") || "–û—à–∏–±–∫–∏: ";
  const incorrectPercent = document.createElement("strong");
  incorrectPercent.id = "percent-incorrect";
  incorrectPercent.textContent = "0%";
  incorrectLabel.appendChild(incorrectPercent);

  labels.append(correctLabel, incorrectLabel);
  container.append(progressBar, labels);
  return container;
}

function createAbacusWrapper() {
  const wrapper = document.createElement("div");
  wrapper.className = "abacus-wrapper";
  wrapper.id = "abacus-wrapper";

  const header = document.createElement("div");
  header.className = "abacus-header";

  const title = document.createElement("span");
  title.className = "abacus-title";
  title.textContent = "üßÆ –ê–±–∞–∫—É—Å";

  const closeBtn = document.createElement("button");
  closeBtn.className = "abacus-close-btn";
  closeBtn.id = "btn-close-abacus";
  closeBtn.title = "–ó–∞–∫—Ä—ã—Ç—å";
  closeBtn.textContent = "√ó";

  header.append(title, closeBtn);

  const container = document.createElement("div");
  container.id = "floating-abacus-container";

  wrapper.append(header, container);
  return wrapper;
}

/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π "–ò—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏") ‚Äî –¢–ï–ü–ï–†–¨ –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø.
 * –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é renderResultsScreen() –≤ —Ñ–∞–π–ª–µ, —á—Ç–æ–±—ã –Ω–µ —Ä—É—à–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã,
 * –Ω–æ finishTraining() –±–æ–ª—å—à–µ –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç –µ—ë.
 *
 * –í–Ω–µ—à–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å–∫—Ä–∏–Ω 2) —Å—Ç–∞–Ω–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º.
 */
function renderResultsScreen(rootNode, session, { t, onRestart, onRetryErrors, onBackToSettings }) {
  // ‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏,
  // –Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ finishTraining() –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ.
  // –ú—ã –ù–ï —É–¥–∞–ª—è–µ–º –µ—ë, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª–æ–º–∞—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥ –≥–¥–µ-—Ç–æ –Ω–∞ –Ω–µ—ë —Å—Å—ã–ª–∞—Ç—å—Å—è.

  rootNode.innerHTML = "";

  const wrapper = document.createElement("div");
  wrapper.className = "results-screen";

  const titleEl = document.createElement("h2");
  titleEl.className = "results-screen__title";
  titleEl.textContent = t?.("results.title") || "–ò—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏";

  const descEl = document.createElement("div");
  descEl.className = "results-screen__desc";
  descEl.textContent =
    t?.("results.description") || "–¢–∞–∫ –ø—Ä–æ—à–ª–∞ –ø–æ–ø—ã—Ç–∫–∞.";

  const statsEl = document.createElement("div");
  statsEl.className = "results-screen__stats";

  const correctLine = document.createElement("div");
  correctLine.className = "results-screen__row results-screen__row--success";
  const correctLabel = document.createElement("span");
  correctLabel.textContent =
    t?.("results.success") || "–í–µ—Ä–Ω–æ";
  const correctValue = document.createElement("strong");
  correctValue.textContent = `${session.stats.correct}/${session.stats.total}`;
  correctLine.append(correctLabel, correctValue);

  const mistakeLine = document.createElement("div");
  mistakeLine.className = "results-screen__row results-screen__row--fail";
  const mistakesLabel = document.createElement("span");
  mistakesLabel.textContent =
    t?.("results.mistakes") || "–û—à–∏–±–∫–∏";
  const mistakesValue = document.createElement("strong");
  mistakesValue.textContent = `${session.stats.incorrect}`;
  mistakeLine.append(mistakesLabel, mistakesValue);

  statsEl.append(correctLine, mistakeLine);

  const actionsEl = document.createElement("div");
  actionsEl.className = "results-screen__actions";

  // –ö–Ω–æ–ø–∫–∞ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏" (–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ª–æ–≥–∏–∫–µ)
  if (
    session.incorrectExamples &&
    session.incorrectExamples.length > 0 &&
    session.stats.incorrect > 0
  ) {
    const retryBtn = document.createElement("button");
    retryBtn.className = "btn btn--primary";
    retryBtn.id = "btn-retry-errors";
    retryBtn.textContent =
      t?.("results.retryErrors") || "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏";

    retryBtn.addEventListener("click", () => {
      onRetryErrors?.();
    });

    actionsEl.appendChild(retryBtn);
  }

  // –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
  const backBtn = document.createElement("button");
  backBtn.className = "btn btn--secondary";
  backBtn.id = "btn-results-back";
  backBtn.textContent =
    t?.("results.cta") || "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ";

  backBtn.addEventListener("click", () => {
    onBackToSettings?.();
  });

  actionsEl.appendChild(backBtn);

  wrapper.append(titleEl, descEl, statsEl, actionsEl);
  rootNode.appendChild(wrapper);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞.
 *
 * @param {HTMLElement} container
 * @param {{
 *   t: Function,
 *   state: { settings: any },
 *   onExitTrainer?: Function,
 *   onBackToSettings?: Function, // <-- —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
 * }} context
 *
 * –í–ê–ñ–ù–û –î–õ–Ø –¢–ï–ë–Ø:
 *  - onBackToSettings() —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏,
 *    —á—Ç–æ–±—ã —Ä–æ—É—Ç–µ—Ä –ø–æ–∫–∞–∑–∞–ª –ì–õ–û–ë–ê–õ–¨–ù–´–ô —ç–∫—Ä–∞–Ω "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã".
 *
 *  - –ú—ã –±–æ–ª—å—à–µ –ù–ï —Ä–µ–Ω–¥–µ—Ä–∏–º "–ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" –∑–¥–µ—Å—å.
 */
export function mountTrainerUI(
  container,
  { t, state: stateFromCaller, onExitTrainer, onBackToSettings }
) {
  try {
    logger.info(CONTEXT, "Mounting trainer UI...");
    logger.debug(CONTEXT, "Settings:", stateFromCaller?.settings);

    const st = stateFromCaller?.settings ?? {};
    const actionsCfg = st.actions ?? {};
    const examplesCfg = st.examples ?? {};
    const blockSimpleDigits = Array.isArray(st?.blocks?.simple?.digits)
      ? st.blocks.simple.digits
      : [];

    const digits = parseInt(st.digits, 10) || 1; // –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
    const abacusColumns = digits + 1; // –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏: –Ω–∞ –æ–¥–Ω—É —Å—Ç–æ–π–∫—É –±–æ–ª—å—à–µ
    const displayMode = st.inline ? "inline" : "column";

    // --- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ —Å–µ—Ä–∏–∏ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ—Ç—Ä–∞–µ–≤)
    const exampleCount = getExampleCount(examplesCfg);

    // === Session state ===
    const session = {
      currentExample: null,

      // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–∏–∏
      stats: { correct: 0, incorrect: 0, total: exampleCount },

      // —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —É–∂–µ –æ—Ç–¥–∞–ª–∏ —Ä–µ–±—ë–Ω–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∑–µ
      completed: 0,

      // –ø—Ä–∏–º–µ—Ä—ã, –≥–¥–µ —Ä–µ–±—ë–Ω–æ–∫ –æ—à–∏–±—Å—è
      // –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: { steps:[...], answer:number }
      incorrectExamples: [],

      // —Ä–µ–∂–∏–º: "main" (–æ—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ä–∏—è) –∏–ª–∏ "review" (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏)
      mode: "main",
      reviewQueue: [],
      reviewIndex: 0
    };

    // === DOM mount —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ ===
    const layout = createTrainerLayout(displayMode, exampleCount, t);
    container.innerHTML = "";
    container.appendChild(layout);

    // Abacus overlay
    const oldAbacus = document.getElementById("abacus-wrapper");
    if (oldAbacus) oldAbacus.remove();

    const abacusWrapper = createAbacusWrapper();
    document.body.appendChild(abacusWrapper);

    const exampleView = new ExampleView(
      document.getElementById("area-example")
    );

    const abacus = new Abacus(
      document.getElementById("floating-abacus-container"),
      abacusColumns
    );

    const overlayColor =
      getComputedStyle(document.documentElement).getPropertyValue(
        "--color-primary"
      )?.trim() || "#EC8D00";
    const overlay = new BigStepOverlay(
      st.bigDigitScale ?? UI.BIG_DIGIT_SCALE,
      overlayColor
    );

    const shouldShowAbacus = st.mode === "abacus";
    if (shouldShowAbacus) {
      abacusWrapper.classList.add("visible");
      const btn = document.getElementById("btn-show-abacus");
      if (btn)
        btn.textContent =
          t?.("trainer.hideAbacus") || "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å";
    }

    let isShowing = false;
    let showAbort = false;

    // -------------------------------------------------
    // –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞
    // -------------------------------------------------
    function adaptExampleFontSize(actionsCount, maxDigitsInOneStep) {
      const exampleLines = document.querySelectorAll(
        "#area-example .example__line"
      );
      if (!exampleLines.length) return;

      const actionsFactor = Math.min(actionsCount, 12) / 12;
      const digitsFactor = Math.min(maxDigitsInOneStep, 9) / 9;
      const complexityFactor = (actionsFactor + digitsFactor) / 2;

      const minFontSize = 24;
      const maxFontSize = 96;
      const fontSize =
        maxFontSize -
        complexityFactor * (maxFontSize - minFontSize);

      exampleLines.forEach((line) => {
        line.style.setProperty(
          "font-size",
          `${Math.round(fontSize)}px`,
          "important"
        );
        line.style.setProperty("line-height", "1.2", "important");
      });
    }

    // -------------------------------------------------
    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–º–µ—Ä–∞
    // -------------------------------------------------
    function buildGeneratorSettings() {
      const selectedDigits =
        blockSimpleDigits.length > 0
          ? blockSimpleDigits.map((d) => parseInt(d, 10))
          : [1, 2, 3, 4];

      const genMin =
        actionsCfg.infinite === true
          ? DEFAULTS.ACTIONS_MIN
          : (actionsCfg.min ??
             actionsCfg.count ??
             DEFAULTS.ACTIONS_MIN);

      const genMax =
        actionsCfg.infinite === true
          ? DEFAULTS.ACTIONS_MAX
          : (actionsCfg.max ??
             actionsCfg.count ??
             DEFAULTS.ACTIONS_MAX);

      return {
        blocks: {
          simple: {
            digits: selectedDigits,
            includeFive:
              (st.blocks?.simple?.includeFive ??
                selectedDigits.includes(5)),
            onlyAddition:
              (st.blocks?.simple?.onlyAddition ?? false),
            onlySubtraction:
              (st.blocks?.simple?.onlySubtraction ?? false)
          },
          brothers: {
            active: st.blocks?.brothers?.active ?? false
          },
          friends: {
            active: st.blocks?.friends?.active ?? false
          },
          mix: {
            active: st.blocks?.mix?.active ?? false
          }
        },

        actions: {
          min: genMin,
          max: genMax,
          count: actionsCfg.count,
          infinite: actionsCfg.infinite === true
        },

        digits: st.digits,
        combineLevels: st.combineLevels || false
      };
    }

    // -------------------------------------------------
    // –°–±–æ—Ä–∫–∞ + –ø–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ (main –∏–ª–∏ review)
    // -------------------------------------------------
    function createAndShowExample() {
      let generated;

      if (session.mode === "review") {
        // –±–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        if (session.reviewIndex >= session.reviewQueue.length) {
          // –º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–µ–∂–∏–º review -> –ø–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
          finishTraining();
          return null;
        }
        generated = session.reviewQueue[session.reviewIndex];
      } else {
        generated = generateExample(buildGeneratorSettings());
      }

      session.currentExample = generated;

      // –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞
      const actionsLen = generated.steps.length;
      let maxDigitsInStep = 1;
      for (const step of generated.steps) {
        const numericPart = String(step).replace(/[^\d-]/g, "");
        const num = parseInt(numericPart, 10);
        if (!isNaN(num)) {
          const lenAbs = Math.abs(num).toString().length;
          if (lenAbs > maxDigitsInStep) {
            maxDigitsInStep = lenAbs;
          }
        }
      }

      // –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
      const input = document.getElementById("answer-input");
      if (input) input.value = "";

      // —Ä–µ–∂–∏–º –¥–∏–∫—Ç–æ–≤–∫–∏
      const shouldUseDictation = actionsLen > 12;
      const effectiveShowSpeed = shouldUseDictation
        ? 2000
        : (st.showSpeedMs || 0);
      const showSpeedActive =
        st.showSpeedEnabled && effectiveShowSpeed > 0;

      if (showSpeedActive || shouldUseDictation) {
        exampleView.clear();
      } else {
        exampleView.render(
          generated.steps,
          displayMode
        );
        requestAnimationFrame(() => {
          adaptExampleFontSize(actionsLen, maxDigitsInStep);
        });
      }

      const lockDuringShow = st.lockInputDuringShow !== false;
      if (input) input.disabled = lockDuringShow;

      if (showSpeedActive || shouldUseDictation) {
        isShowing = true;
        showAbort = false;
        playSequential(
          generated.steps,
          effectiveShowSpeed,
          { beepOnStep: !!st.beepOnStep }
        ).then(async () => {
          if (showAbort) return;
          await delay(
            st.showSpeedPauseAfterChainMs ??
              UI.PAUSE_AFTER_CHAIN_MS
          );
          isShowing = false;

          if (lockDuringShow && input) {
            input.disabled = false;
            input.focus();
          }
        });
      } else {
        if (input) {
          input.disabled = false;
          input.focus();
        }
      }

      logger.debug(
        CONTEXT,
        "New example:",
        generated.steps,
        "Answer:",
        generated.answer,
        "mode:",
        session.mode
      );

      return generated;
    }

    /**
     * –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.
     * –ï—Å–ª–∏ —Å–µ—Ä–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚Üí finishTraining().
     */
    function showNextExample() {
      overlay.clear();
      showAbort = true;
      isShowing = false;

      // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–∞–∑–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å?
      if (
        session.mode === "main" &&
        session.completed >= session.stats.total
      ) {
        finishTraining();
        return;
      }

      createAndShowExample();
    }

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—ë—Ç –æ—Ç–≤–µ—Ç.
     */
    function checkAnswer() {
      const input = document.getElementById("answer-input");

      if (isShowing && (st.lockInputDuringShow !== false)) return;

      const userAnswer = parseInt(input?.value ?? "", 10);
      if (isNaN(userAnswer)) {
        toast.warning(
          t?.("trainer.pleaseEnterNumber") ||
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
        );
        return;
      }

      if (isShowing && (st.lockInputDuringShow === false)) {
        showAbort = true;
        isShowing = false;
        overlay.clear();
      }

      const isCorrect =
        userAnswer === session.currentExample.answer;

      if (session.mode === "main") {
        if (isCorrect) {
          session.stats.correct++;
        } else {
          session.stats.incorrect++;
          session.incorrectExamples.push({
            steps: [...session.currentExample.steps],
            answer: session.currentExample.answer,
            userAnswer
          });
        }
        session.completed++;
      } else if (session.mode === "review") {
        // –≤ —Ä–µ–∂–∏–º–µ review –º—ã –Ω–µ –º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É,
        // –ø—Ä–æ—Å—Ç–æ –¥–≤–∏–≥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        if (!isCorrect) {
          // –µ—Å–ª–∏ —Å–Ω–æ–≤–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–æ –∑–∞–∫–∏–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ö–≤–æ—Å—Ç
          session.reviewQueue.push({
            steps: [...session.currentExample.steps],
            answer: session.currentExample.answer,
            userAnswer
          });
        }
        session.reviewIndex++;
      }

      updateStatsUI();
      playSound(isCorrect ? "correct" : "wrong");

      setTimeout(
        () => showNextExample(),
        UI.TRANSITION_DELAY_MS
      );
    }

    /**
     * –ò—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
     */
    function handleTimeExpired() {
      const correct = session.currentExample?.answer;
      logger.warn(
        CONTEXT,
        "Time expired! Correct answer:",
        correct
      );

      if (st.beepOnTimeout) playSound("wrong");

      if (session.mode === "main") {
        session.stats.incorrect++;
        session.incorrectExamples.push({
          steps: [...session.currentExample.steps],
          answer: session.currentExample.answer,
          userAnswer: null
        });
        session.completed++;
      } else if (session.mode === "review") {
        session.reviewIndex++;
      }

      updateStatsUI();
      setTimeout(
        () => showNextExample(),
        UI.TIMEOUT_DELAY_MS
      );
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    function updateStatsUI() {
      const { correct, incorrect, total } = session.stats;
      const completed = session.completed;
      const el = (id) => document.getElementById(id);

      el("stats-completed") &&
        (el("stats-completed").textContent =
          String(completed));
      el("stats-correct") &&
        (el("stats-correct").textContent =
          String(correct));
      el("stats-incorrect") &&
        (el("stats-incorrect").textContent =
          String(incorrect));

      const percentCorrect =
        completed > 0
          ? Math.round((correct / completed) * 100)
          : 0;
      const percentIncorrect =
        completed > 0
          ? Math.round((incorrect / completed) * 100)
          : 0;

      el("progress-correct") &&
        (el("progress-correct").style.width =
          percentCorrect + "%");
      el("progress-incorrect") &&
        (el("progress-incorrect").style.width =
          percentIncorrect + "%");
      el("percent-correct") &&
        (el("percent-correct").textContent =
          percentCorrect + "%");
      el("percent-incorrect") &&
        (el("percent-incorrect").textContent =
          percentIncorrect + "%");
    }

    /**
     * –í–ê–ñ–ù–û: –∫–ª—é—á–µ–≤–∞—è —Ç–æ—á–∫–∞.
     *
     * finishTraining() –ë–û–õ–¨–®–ï –ù–ï —Ä–µ–Ω–¥–µ—Ä–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     * —á–µ—Ä–µ–∑ renderResultsScreen(). –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ:
     *
     * - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä—ã –∏ —á–∏—Å—Ç–∏—Ç overlay
     * - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π state.results
     * - –≥–æ—Ç–æ–≤–∏—Ç state.retryMode (–¥–ª—è "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏")
     * - –≤—ã–∑—ã–≤–∞–µ—Ç onBackToSettings() –∫–∞–∫ —Å–∏–≥–Ω–∞–ª —Ä–æ—É—Ç–µ—Ä—É:
     *   "–ø–æ–∫–∞–∂–∏ –≤–Ω–µ—à–Ω–∏–π —ç–∫—Ä–∞–Ω –†–µ–∑—É–ª—å—Ç–∞—Ç—ã" (—Å–∫—Ä–∏–Ω 2)
     *
     * –≠—Ç–æ —É–±–∏—Ä–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
     */
    function finishTraining() {
      stopAnswerTimer();
      showAbort = true;
      isShowing = false;
      overlay.clear();
      abacusWrapper.classList.remove("visible");

      logger.info(
        CONTEXT,
        "Training finished:",
        session.stats,
        "mode:",
        session.mode,
        "incorrectExamples:",
        session.incorrectExamples
      );

      // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
      state.results = {
        total: session.stats.total,
        success: session.stats.correct,
        wrongExamples: session.incorrectExamples.slice()
      };

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º retryMode:
      // "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏" –Ω–∞–∂–∏–º–∞–µ—Ç—Å—è —É–∂–µ –Ω–∞ –≤–Ω–µ—à–Ω–µ–º —ç–∫—Ä–∞–Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤,
      // –ø–æ—ç—Ç–æ–º—É –º—ã —Å—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å.
      state.retryMode = {
        enabled: session.incorrectExamples.length > 0,
        examples: session.incorrectExamples.slice()
      };

      // –°–æ—Ö—Ä–∞–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
      // –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å retry —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
      state.lastSettings = st;

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞—Ä—É–∂—É.
      // onBackToSettings() —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤,
      // –∞ –Ω–µ –±—É–∫–≤–∞–ª—å–Ω–æ "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏".
      onBackToSettings?.();

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —ç–º–∏—Ç–∏–º TRAINING_FINISH –¥–ª—è —Ç–µ—Ö —á–∞—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
      // –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –Ω–µ–≥–æ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.
      eventBus.emit?.(EVENTS.TRAINING_FINISH, {
        correct: session.stats.correct,
        total: session.stats.total,
        wrong: session.stats.incorrect,
        phase: "done",
        wrongExamples: session.incorrectExamples.slice()
      }) ||
        eventBus.publish?.(EVENTS.TRAINING_FINISH, {
          correct: session.stats.correct,
          total: session.stats.total,
          wrong: session.stats.incorrect,
          phase: "done",
          wrongExamples: session.incorrectExamples.slice()
        });
    }

    /**
     * –ü–µ—Ä–µ-–º–∞—É–Ω—Ç —Ç—Ä–µ–Ω–∞–∂—ë—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ review (–ò–°–ü–†–ê–í–ò–¢–¨ –û–®–ò–ë–ö–ò)
     * –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∑–¥–µ—Å—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏,
     * –Ω–æ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∑–∞–ø—É—Å–∫ —Ä–µ—Ç—Ä–∞—è –¥–µ–ª–∞–µ—Ç—Å—è –° –°–ù–ê–†–£–ñ–ò (–∏–∑ —ç–∫—Ä–∞–Ω–∞ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"),
     * –∏ —Ç—É–¥–∞ –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π mountTrainerUI —Å state.retryMode.enabled = true.
     *
     * remountTrainerViewForReview() —Å–µ–π—á–∞—Å –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ finishTraining().
     */
    function remountTrainerViewForReview() {
      session.mode = "review";
      session.reviewQueue = session.incorrectExamples.map(e => ({
        steps: [...e.steps],
        answer: e.answer
      }));
      session.reviewIndex = 0;

      const newLayout = createTrainerLayout(
        displayMode,
        session.reviewQueue.length,
        t
      );
      container.innerHTML = "";
      container.appendChild(newLayout);

      rebindDynamicRefsAfterRemount();
      showNextExample();
    }

    /**
     * –ü–æ—Å–ª–µ remount-–∞ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ review)
     */
    function rebindDynamicRefsAfterRemount() {
      attachListeners(); // –ø–µ—Ä–µ–≤–µ—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
      updateStatsUI();

      const btnToggleAbacus = document.getElementById("btn-show-abacus");
      if (btnToggleAbacus) {
        btnToggleAbacus.textContent = abacusWrapper.classList.contains("visible")
          ? (t?.("trainer.hideAbacus") || "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å")
          : (t?.("trainer.showAbacus") || "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å");
      }
    }

    /**
     * –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —à–∞–≥–æ–≤ —Å overlay
     */
    async function playSequential(
      steps,
      intervalMs,
      { beepOnStep = false } = {}
    ) {
      try {
        for (let i = 0; i < steps.length; i++) {
          if (showAbort) break;

          const stepStr = formatStep(steps[i]);
          const isOdd = i % 2 === 0;
          const color = isOdd ? "#EC8D00" : "#6db45c";

          overlay.show(stepStr, color);
          if (beepOnStep) playSound("tick");
          await delay(intervalMs);
          overlay.hide();
          await delay(UI.DELAY_BETWEEN_STEPS_MS);
        }
      } finally {
        overlay.clear();
      }
    }

    function formatStep(step) {
      return String(step);
    }

    function delay(ms) {
      return new Promise((r) => setTimeout(r, ms));
    }

    // === –°–ª—É—à–∞—Ç–µ–ª–∏ ===
    const listeners = [];

    function addListener(element, event, handler) {
      if (!element) return;
      element.addEventListener(event, handler);
      listeners.push({ element, event, handler });
    }

    function attachListeners() {
      addListener(
        document.getElementById("btn-show-abacus"),
        "click",
        () => {
          abacusWrapper.classList.toggle("visible");
          const btn = document.getElementById("btn-show-abacus");
          if (btn) {
            btn.textContent = abacusWrapper.classList.contains(
              "visible"
            )
              ? (t?.("trainer.hideAbacus") || "üßÆ –°–∫—Ä—ã—Ç—å –∞–±–∞–∫—É—Å")
              : (t?.("trainer.showAbacus") || "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å");
          }
        }
      );

      addListener(
        document.getElementById("btn-close-abacus"),
        "click",
        () => {
          abacusWrapper.classList.remove("visible");
          const btn = document.getElementById("btn-show-abacus");
          if (btn)
            btn.textContent =
              t?.("trainer.showAbacus") ||
              "üßÆ –ü–æ–∫–∞–∑–∞—Ç—å –∞–±–∞–∫—É—Å";
        }
      );

      addListener(
        document.getElementById("btn-submit"),
        "click",
        checkAnswer
      );

      addListener(
        document.getElementById("answer-input"),
        "keypress",
        (e) => {
          if (e.key === "Enter") checkAnswer();
        }
      );

      // Exit trainer button
      addListener(
        document.getElementById("btn-exit-trainer"),
        "click",
        () => {
          // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ.
          // –≠—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π": –º—ã –Ω–µ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          // –≤ state.results —Ü–µ–ª–∏–∫–æ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ –Ω–µ–ø–æ–ª–Ω–∞—è.
          stopAnswerTimer();
          showAbort = true;
          isShowing = false;
          overlay.clear();
          abacusWrapper.classList.remove("visible");

          // –ì–ª–æ–±–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é ‚Äî —Å–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤,
          // —á—Ç–æ–±—ã —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.
          resetResults();
          state.retryMode = {
            enabled: false,
            examples: []
          };

          onExitTrainer?.();
          onBackToSettings?.();

          eventBus.emit?.(EVENTS.TRAINING_FINISH, {
            correct: session.stats.correct,
            total: session.stats.total,
            phase: "exit"
          }) ||
            eventBus.publish?.(EVENTS.TRAINING_FINISH, {
              correct: session.stats.correct,
              total: session.stats.total,
              phase: "exit"
            });
        }
      );
    }

    attachListeners();

    // === –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ –≤—Å—é —Å–µ—Ä–∏—é (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
    if (st.timeLimitEnabled && st.timePerExampleMs > 0) {
      startAnswerTimer(st.timePerExampleMs, {
        onExpire: () => {
          logger.warn(
            CONTEXT,
            "Series time expired!"
          );
          finishTraining();
        },
        textElementId: "answerTimerText",
        barSelector: "#answer-timer .bar"
      });
    }

    // === –¢–∞–π–º–µ—Ä –Ω–∞ –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω)
    if (st.perExampleTimerEnabled && st.perExampleTimeMs > 0) {
      startAnswerTimer(st.perExampleTimeMs, {
        onExpire: () => handleTimeExpired(),
        textElementId: "answerTimerText",
        barSelector: "#answer-timer .bar"
      });
    }

    // === –°—Ç–∞—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    showNextExample();
    logger.info(
      CONTEXT,
      `Trainer started (${abacusColumns} columns for ${digits}-digit numbers)`
    );

    // === Cleanup
    return () => {
      const wrapper = document.getElementById("abacus-wrapper");
      if (wrapper) wrapper.remove();
      showAbort = true;
      isShowing = false;
      overlay.clear();
      stopAnswerTimer();

      listeners.forEach(({ element, event, handler }) => {
        element.removeEventListener(event, handler);
      });

      logger.debug(
        CONTEXT,
        "Trainer unmounted, listeners cleaned up"
      );
    };
  } catch (err) {
    showFatalError(err);
  }
}

/** –ü–∞–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –æ—à–∏–±–∫–æ–π */
function showFatalError(err) {
  const msg = err?.stack || err?.message || String(err);
  logger.error(CONTEXT, "Fatal error:", err);

  const host =
    document.querySelector(".screen__body") || document.body;

  const errorDiv = document.createElement("div");
  errorDiv.style.cssText =
    "color:#d93025;padding:16px;white-space:pre-wrap";

  const title = document.createElement("b");
  title.textContent = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä.";

  const br = document.createElement("br");

  const message = document.createTextNode(msg);

  errorDiv.append(title, br, message);
  host.insertBefore(errorDiv, host.firstChild);
}

/** –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–∏–∏ */
function getExampleCount(examplesCfg) {
  if (!examplesCfg) return DEFAULTS.EXAMPLES_COUNT;
  return examplesCfg.infinite
    ? DEFAULTS.EXAMPLES_COUNT
    : (examplesCfg.count ?? DEFAULTS.EXAMPLES_COUNT);
}

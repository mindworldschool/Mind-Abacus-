// ext/components/ExampleView.js - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ (—Å—Ç–æ–ª–±–∏–∫–æ–º/–≤ —Å—Ç—Ä–æ–∫—É)

/**
 * ExampleView - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞: —Å—Ç–æ–ª–±–∏–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏ —Å—Ç—Ä–æ–∫–∞
 * –°–æ–≤–º–µ—Å—Ç–∏–º —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º steps = ["+3", "-1", "+5", ...]
 */
export class ExampleView {
  constructor(container) {
    this.container = container;
    this.displayMode = "column"; // "column" | "inline"
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {string} mode - 'column' –∏–ª–∏ 'inline'
   */
  setDisplayMode(mode) {
    if (mode === "column" || mode === "inline") {
      this.displayMode = mode;
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä –ø—Ä–∏–º–µ—Ä–∞ (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Ç–∏–ø–∞ "+2", "-5")
   * @param {Array<string>|string} steps - –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
   * @param {string} mode - —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  render(steps, mode = null) {
    if (mode) {
      this.setDisplayMode(mode);
    }

    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    this.container.innerHTML = "";
    this.container.className = `example-view example--${this.displayMode}`;

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (expr = "+3 +1 -2")
    let stepsArray = [];
    if (Array.isArray(steps)) {
      stepsArray = steps;
    } else if (typeof steps === "string") {
      stepsArray = steps.trim().split(/\s+/);
    } else {
      console.warn("‚ö†Ô∏è ExampleView: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç steps:", steps);
      return;
    }

    if (this.displayMode === "column") {
      this.renderColumn(stepsArray);
    } else {
      this.renderInline(stepsArray);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä –≤ —Å—Ç–æ–ª–±–∏–∫ (–∫–∞–∂–¥—ã–π —à–∞–≥ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ)
   * @param {Array<string>} steps
   */
  renderColumn(steps) {
    for (const step of steps) {
      const line = document.createElement("div");
      line.className = "example__line";
      line.textContent = step;
      this.container.appendChild(line);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä –≤ —Å—Ç—Ä–æ–∫—É (–≤—Å–µ —à–∞–≥–∏ –æ–¥–Ω–æ–π –ª–∏–Ω–∏–µ–π)
   * @param {Array<string>} steps
   */
  renderInline(steps) {
    const line = document.createElement("div");
    line.className = "example__line example__line--inline";
    line.textContent = steps.join(" ");
    this.container.appendChild(line);
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞
   * (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è trainer_logic.js, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
   * @param {number} lineCount
   */
  adjustFontSize(lineCount) {
    const lines = this.container.querySelectorAll(".example__line");
    if (!lines.length) return;

    const vh = window.innerHeight;
    const clampedLines = Math.min(lineCount, 15);
    const calculatedSize = (vh * 0.75) / (clampedLines + 2);
    const fontSize = Math.max(24, Math.min(72, calculatedSize));

    for (const line of lines) {
      line.style.fontSize = `${fontSize}px`;
    }

    console.log(`üìè Font: ${fontSize.toFixed(0)}px (${clampedLines} —Å—Ç—Ä–æ–∫)`);
  }

  /**
   * –ü–æ—à–∞–≥–æ–≤—ã–π –ø–æ–∫–∞–∑ (–¥–ª—è –¥–∏–∫—Ç–æ–≤–∫–∏ –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫)
   * @param {Array<string>} steps
   * @param {number} speed - –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º—Å
   * @param {Function} onComplete - callback –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
   */
  renderStepByStep(steps, speed = 1000, onComplete = null) {
    this.container.innerHTML = "";
    this.container.className = `example-view example--${this.displayMode}`;

    let index = 0;
    const stepsArray = Array.isArray(steps)
      ? steps
      : String(steps).trim().split(/\s+/);

    const showNext = () => {
      if (index >= stepsArray.length) {
        if (onComplete) onComplete();
        return;
      }

      if (this.displayMode === "column") {
        const line = document.createElement("div");
        line.className = "example__line";
        line.textContent = stepsArray[index];
        this.container.appendChild(line);
      } else {
        let line =
          this.container.querySelector(".example__line") ||
          (() => {
            const el = document.createElement("div");
            el.className = "example__line example__line--inline";
            this.container.appendChild(el);
            return el;
          })();
        line.textContent = line.textContent
          ? `${line.textContent} ${stepsArray[index]}`
          : stepsArray[index];
      }

      index++;
      setTimeout(showNext, speed);
    };

    showNext();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  clear() {
    this.container.innerHTML = "";
  }
}
